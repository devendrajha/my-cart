package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class AgentService {

	/**
	 * Agent Service: provides abstract interface to agent
	 */
	public interface Iface {

		/**
		 * Updated URL and CUID from cloud JSON
		 */
		public Result GetConfig() throws org.apache.thrift.TException;

		/**
		 * Initialize the Agent
		 * 
		 * @param DevInfo
		 */
		public Result Init(DeviceInfoStruct DevInfo) throws org.apache.thrift.TException;

		/**
		 * Get Agent Version
		 */
		public String GetAgentLibVersion() throws org.apache.thrift.TException;

		/**
		 * Return the Provision status of the Agent with the cloud
		 */
		public Result GetConfigStatus() throws org.apache.thrift.TException;

		/**
		 * Return the activation status of the Agent with the cloud
		 */
		public Result GetActivationStatus() throws org.apache.thrift.TException;

		/**
		 * Activate the Agent with the cloud
		 */
		public Result Activate() throws org.apache.thrift.TException;

		/**
		 * Force product deactivate
		 */
		public Result ForceDeactivate() throws org.apache.thrift.TException;

		/**
		 * Synchronize the Agent with the cloud
		 * 
		 * @param sync_type
		 */
		public Result Sync(int sync_type) throws org.apache.thrift.TException;

		/**
		 * Create an MQTT connection with the cloud for messaging
		 */
		public Result Connect() throws org.apache.thrift.TException;

		/**
		 * Terminate MQTT connection with the cloud
		 */
		public Result Disconnect() throws org.apache.thrift.TException;

		/**
		 * Send attribute value of an endpoint to the cloud
		 * 
		 * @param LocalEpId
		 * @param LocalAttrId
		 * @param Value
		 * @param priority
		 */
		public Result SendAttributeMessage(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority) throws org.apache.thrift.TException;

		/**
		 * Send setting value of en endpoint to the cloud
		 * 
		 * @param LocalEpId
		 * @param SettingId
		 * @param Value
		 * @param priority
		 */
		public Result SendSettingMessage(int LocalEpId, int SettingId, DataElementStruct Value, int priority) throws org.apache.thrift.TException;

		/**
		 * Initialize an endpoint message
		 */
		public Result InitEndpointMessage() throws org.apache.thrift.TException;

		/**
		 * Initialize an endpoint message
		 */
		public Result InitSettingEndpointMessage() throws org.apache.thrift.TException;

		/**
		 * Add attribute information to an endpoint message
		 * 
		 * @param LocalEpId
		 * @param AttributeInfo
		 */
		public Result UpdateEndpointMessage(int LocalEpId, List<AttributeStruct> AttributeInfo) throws org.apache.thrift.TException;

		/**
		 * Add attribute information to an endpoint message
		 * 
		 * @param LocalEpId
		 * @param SettingInfo
		 */
		public Result UpdateSettingEndpointMessage(int LocalEpId, List<SettingStruct> SettingInfo) throws org.apache.thrift.TException;

		/**
		 * Send the previously constructed endpoint message
		 * 
		 * @param priority
		 */
		public Result SendEndpointMessage(int priority) throws org.apache.thrift.TException;

		/**
		 * Send the previously constructed endpoint message
		 * 
		 * @param priority
		 */
		public Result SendSettingEndpointMessage(int priority) throws org.apache.thrift.TException;

		/**
		 * Add an array of dynamic endpoints. This endpoint cannot be used until Sync()
		 * is called. Many endpoints can be added before calling Sync() to minimize
		 * network usage.
		 * 
		 * @param MultiEpInfo
		 */
		public EpCreateStruct AddDynamicEndpoint(List<MultiEpCreateStruct> MultiEpInfo) throws org.apache.thrift.TException;

		/**
		 * Delete specified dynamic endpoint
		 * 
		 * @param LocalEpId
		 */
		public Result DeleteDynamicEndpoint(int LocalEpId) throws org.apache.thrift.TException;

		/**
		 * Send an alert message to the cloud
		 * 
		 * @param AlertParams
		 */
		public Result SendAlertMessage(AlertParamsStruct AlertParams) throws org.apache.thrift.TException;

		/**
		 * Send receipt message to cloud indicating completion status of a
		 * command/setting
		 * 
		 * @param ReceiptParams
		 */
		public Result SendReceiptMessage(ReceiptParamsStruct ReceiptParams) throws org.apache.thrift.TException;

		/**
		 * Send an informational log message to the cloud
		 * 
		 * @param LogParams
		 */
		public Result SendLogMessage(LogParamsStruct LogParams) throws org.apache.thrift.TException;

		/**
		 * Clear activation data in the Agent. i.e. 'forget' it has been activated
		 */
		public Result ClearActivationData() throws org.apache.thrift.TException;

		/**
		 * Clear provision data in the Agent. i.e. 'forget' it has been provisioned
		 */
		public Result ClearProvisionData() throws org.apache.thrift.TException;

		/**
		 * Retreive a list of endpoints
		 */
		public List<Integer> GetEndpointList() throws org.apache.thrift.TException;

		/**
		 * Retrieve information about a specific endpoint
		 * 
		 * @param LocalEpId
		 */
		public EndpointInfoStruct GetEndpointInfo(int LocalEpId) throws org.apache.thrift.TException;

		/**
		 * SetLogLevel to the agent
		 * 
		 * @param log_level
		 * @param log_control
		 */
		public Result SetLogLevel(LogLevelTypeStruct log_level, int log_control) throws org.apache.thrift.TException;

		/**
		 * Signal Agent the eApp is ready
		 */
		public void eAppReady() throws org.apache.thrift.TException;

		/**
		 * Return asynchronous information from the agent--events and received messages
		 */
		public ReturnStruct getEvents() throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void GetConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void Init(DeviceInfoStruct DevInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetAgentLibVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetConfigStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetActivationStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void Activate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void ForceDeactivate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void Sync(int sync_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void Connect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void Disconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SendAttributeMessage(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority,
			org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SendSettingMessage(int LocalEpId, int SettingId, DataElementStruct Value, int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void InitEndpointMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void InitSettingEndpointMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void UpdateEndpointMessage(int LocalEpId, List<AttributeStruct> AttributeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void UpdateSettingEndpointMessage(int LocalEpId, List<SettingStruct> SettingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void SendEndpointMessage(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SendSettingEndpointMessage(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void AddDynamicEndpoint(List<MultiEpCreateStruct> MultiEpInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void DeleteDynamicEndpoint(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SendAlertMessage(AlertParamsStruct AlertParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SendReceiptMessage(ReceiptParamsStruct ReceiptParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void SendLogMessage(LogParamsStruct LogParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void ClearActivationData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void ClearProvisionData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetEndpointList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetEndpointInfo(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void SetLogLevel(LogLevelTypeStruct log_level, int log_control, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void eAppReady(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void getEvents(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public Result GetConfig() throws org.apache.thrift.TException {
			send_GetConfig();
			return recv_GetConfig();
		}

		public void send_GetConfig() throws org.apache.thrift.TException {
			GetConfig_args args = new GetConfig_args();
			sendBase("GetConfig", args);
		}

		public Result recv_GetConfig() throws org.apache.thrift.TException {
			GetConfig_result result = new GetConfig_result();
			receiveBase(result, "GetConfig");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetConfig failed: unknown result");
		}

		public Result Init(DeviceInfoStruct DevInfo) throws org.apache.thrift.TException {
			send_Init(DevInfo);
			return recv_Init();
		}

		public void send_Init(DeviceInfoStruct DevInfo) throws org.apache.thrift.TException {
			Init_args args = new Init_args();
			args.setDevInfo(DevInfo);
			sendBase("Init", args);
		}

		public Result recv_Init() throws org.apache.thrift.TException {
			Init_result result = new Init_result();
			receiveBase(result, "Init");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Init failed: unknown result");
		}

		public String GetAgentLibVersion() throws org.apache.thrift.TException {
			send_GetAgentLibVersion();
			return recv_GetAgentLibVersion();
		}

		public void send_GetAgentLibVersion() throws org.apache.thrift.TException {
			GetAgentLibVersion_args args = new GetAgentLibVersion_args();
			sendBase("GetAgentLibVersion", args);
		}

		public String recv_GetAgentLibVersion() throws org.apache.thrift.TException {
			GetAgentLibVersion_result result = new GetAgentLibVersion_result();
			receiveBase(result, "GetAgentLibVersion");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAgentLibVersion failed: unknown result");
		}

		public Result GetConfigStatus() throws org.apache.thrift.TException {
			send_GetConfigStatus();
			return recv_GetConfigStatus();
		}

		public void send_GetConfigStatus() throws org.apache.thrift.TException {
			GetConfigStatus_args args = new GetConfigStatus_args();
			sendBase("GetConfigStatus", args);
		}

		public Result recv_GetConfigStatus() throws org.apache.thrift.TException {
			GetConfigStatus_result result = new GetConfigStatus_result();
			receiveBase(result, "GetConfigStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetConfigStatus failed: unknown result");
		}

		public Result GetActivationStatus() throws org.apache.thrift.TException {
			send_GetActivationStatus();
			return recv_GetActivationStatus();
		}

		public void send_GetActivationStatus() throws org.apache.thrift.TException {
			GetActivationStatus_args args = new GetActivationStatus_args();
			sendBase("GetActivationStatus", args);
		}

		public Result recv_GetActivationStatus() throws org.apache.thrift.TException {
			GetActivationStatus_result result = new GetActivationStatus_result();
			receiveBase(result, "GetActivationStatus");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetActivationStatus failed: unknown result");
		}

		public Result Activate() throws org.apache.thrift.TException {
			send_Activate();
			return recv_Activate();
		}

		public void send_Activate() throws org.apache.thrift.TException {
			Activate_args args = new Activate_args();
			sendBase("Activate", args);
		}

		public Result recv_Activate() throws org.apache.thrift.TException {
			Activate_result result = new Activate_result();
			receiveBase(result, "Activate");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Activate failed: unknown result");
		}

		public Result ForceDeactivate() throws org.apache.thrift.TException {
			send_ForceDeactivate();
			return recv_ForceDeactivate();
		}

		public void send_ForceDeactivate() throws org.apache.thrift.TException {
			ForceDeactivate_args args = new ForceDeactivate_args();
			sendBase("ForceDeactivate", args);
		}

		public Result recv_ForceDeactivate() throws org.apache.thrift.TException {
			ForceDeactivate_result result = new ForceDeactivate_result();
			receiveBase(result, "ForceDeactivate");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ForceDeactivate failed: unknown result");
		}

		public Result Sync(int sync_type) throws org.apache.thrift.TException {
			send_Sync(sync_type);
			return recv_Sync();
		}

		public void send_Sync(int sync_type) throws org.apache.thrift.TException {
			Sync_args args = new Sync_args();
			args.setSync_type(sync_type);
			sendBase("Sync", args);
		}

		public Result recv_Sync() throws org.apache.thrift.TException {
			Sync_result result = new Sync_result();
			receiveBase(result, "Sync");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Sync failed: unknown result");
		}

		public Result Connect() throws org.apache.thrift.TException {
			send_Connect();
			return recv_Connect();
		}

		public void send_Connect() throws org.apache.thrift.TException {
			Connect_args args = new Connect_args();
			sendBase("Connect", args);
		}

		public Result recv_Connect() throws org.apache.thrift.TException {
			Connect_result result = new Connect_result();
			receiveBase(result, "Connect");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Connect failed: unknown result");
		}

		public Result Disconnect() throws org.apache.thrift.TException {
			send_Disconnect();
			return recv_Disconnect();
		}

		public void send_Disconnect() throws org.apache.thrift.TException {
			Disconnect_args args = new Disconnect_args();
			sendBase("Disconnect", args);
		}

		public Result recv_Disconnect() throws org.apache.thrift.TException {
			Disconnect_result result = new Disconnect_result();
			receiveBase(result, "Disconnect");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Disconnect failed: unknown result");
		}

		public Result SendAttributeMessage(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority) throws org.apache.thrift.TException {
			send_SendAttributeMessage(LocalEpId, LocalAttrId, Value, priority);
			return recv_SendAttributeMessage();
		}

		public void send_SendAttributeMessage(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority) throws org.apache.thrift.TException {
			SendAttributeMessage_args args = new SendAttributeMessage_args();
			args.setLocalEpId(LocalEpId);
			args.setLocalAttrId(LocalAttrId);
			args.setValue(Value);
			args.setPriority(priority);
			sendBase("SendAttributeMessage", args);
		}

		public Result recv_SendAttributeMessage() throws org.apache.thrift.TException {
			SendAttributeMessage_result result = new SendAttributeMessage_result();
			receiveBase(result, "SendAttributeMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendAttributeMessage failed: unknown result");
		}

		public Result SendSettingMessage(int LocalEpId, int SettingId, DataElementStruct Value, int priority) throws org.apache.thrift.TException {
			send_SendSettingMessage(LocalEpId, SettingId, Value, priority);
			return recv_SendSettingMessage();
		}

		public void send_SendSettingMessage(int LocalEpId, int SettingId, DataElementStruct Value, int priority) throws org.apache.thrift.TException {
			SendSettingMessage_args args = new SendSettingMessage_args();
			args.setLocalEpId(LocalEpId);
			args.setSettingId(SettingId);
			args.setValue(Value);
			args.setPriority(priority);
			sendBase("SendSettingMessage", args);
		}

		public Result recv_SendSettingMessage() throws org.apache.thrift.TException {
			SendSettingMessage_result result = new SendSettingMessage_result();
			receiveBase(result, "SendSettingMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendSettingMessage failed: unknown result");
		}

		public Result InitEndpointMessage() throws org.apache.thrift.TException {
			send_InitEndpointMessage();
			return recv_InitEndpointMessage();
		}

		public void send_InitEndpointMessage() throws org.apache.thrift.TException {
			InitEndpointMessage_args args = new InitEndpointMessage_args();
			sendBase("InitEndpointMessage", args);
		}

		public Result recv_InitEndpointMessage() throws org.apache.thrift.TException {
			InitEndpointMessage_result result = new InitEndpointMessage_result();
			receiveBase(result, "InitEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "InitEndpointMessage failed: unknown result");
		}

		public Result InitSettingEndpointMessage() throws org.apache.thrift.TException {
			send_InitSettingEndpointMessage();
			return recv_InitSettingEndpointMessage();
		}

		public void send_InitSettingEndpointMessage() throws org.apache.thrift.TException {
			InitSettingEndpointMessage_args args = new InitSettingEndpointMessage_args();
			sendBase("InitSettingEndpointMessage", args);
		}

		public Result recv_InitSettingEndpointMessage() throws org.apache.thrift.TException {
			InitSettingEndpointMessage_result result = new InitSettingEndpointMessage_result();
			receiveBase(result, "InitSettingEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
				"InitSettingEndpointMessage failed: unknown result");
		}

		public Result UpdateEndpointMessage(int LocalEpId, List<AttributeStruct> AttributeInfo) throws org.apache.thrift.TException {
			send_UpdateEndpointMessage(LocalEpId, AttributeInfo);
			return recv_UpdateEndpointMessage();
		}

		public void send_UpdateEndpointMessage(int LocalEpId, List<AttributeStruct> AttributeInfo) throws org.apache.thrift.TException {
			UpdateEndpointMessage_args args = new UpdateEndpointMessage_args();
			args.setLocalEpId(LocalEpId);
			args.setAttributeInfo(AttributeInfo);
			sendBase("UpdateEndpointMessage", args);
		}

		public Result recv_UpdateEndpointMessage() throws org.apache.thrift.TException {
			UpdateEndpointMessage_result result = new UpdateEndpointMessage_result();
			receiveBase(result, "UpdateEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UpdateEndpointMessage failed: unknown result");
		}

		public Result UpdateSettingEndpointMessage(int LocalEpId, List<SettingStruct> SettingInfo) throws org.apache.thrift.TException {
			send_UpdateSettingEndpointMessage(LocalEpId, SettingInfo);
			return recv_UpdateSettingEndpointMessage();
		}

		public void send_UpdateSettingEndpointMessage(int LocalEpId, List<SettingStruct> SettingInfo) throws org.apache.thrift.TException {
			UpdateSettingEndpointMessage_args args = new UpdateSettingEndpointMessage_args();
			args.setLocalEpId(LocalEpId);
			args.setSettingInfo(SettingInfo);
			sendBase("UpdateSettingEndpointMessage", args);
		}

		public Result recv_UpdateSettingEndpointMessage() throws org.apache.thrift.TException {
			UpdateSettingEndpointMessage_result result = new UpdateSettingEndpointMessage_result();
			receiveBase(result, "UpdateSettingEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
				"UpdateSettingEndpointMessage failed: unknown result");
		}

		public Result SendEndpointMessage(int priority) throws org.apache.thrift.TException {
			send_SendEndpointMessage(priority);
			return recv_SendEndpointMessage();
		}

		public void send_SendEndpointMessage(int priority) throws org.apache.thrift.TException {
			SendEndpointMessage_args args = new SendEndpointMessage_args();
			args.setPriority(priority);
			sendBase("SendEndpointMessage", args);
		}

		public Result recv_SendEndpointMessage() throws org.apache.thrift.TException {
			SendEndpointMessage_result result = new SendEndpointMessage_result();
			receiveBase(result, "SendEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendEndpointMessage failed: unknown result");
		}

		public Result SendSettingEndpointMessage(int priority) throws org.apache.thrift.TException {
			send_SendSettingEndpointMessage(priority);
			return recv_SendSettingEndpointMessage();
		}

		public void send_SendSettingEndpointMessage(int priority) throws org.apache.thrift.TException {
			SendSettingEndpointMessage_args args = new SendSettingEndpointMessage_args();
			args.setPriority(priority);
			sendBase("SendSettingEndpointMessage", args);
		}

		public Result recv_SendSettingEndpointMessage() throws org.apache.thrift.TException {
			SendSettingEndpointMessage_result result = new SendSettingEndpointMessage_result();
			receiveBase(result, "SendSettingEndpointMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
				"SendSettingEndpointMessage failed: unknown result");
		}

		public EpCreateStruct AddDynamicEndpoint(List<MultiEpCreateStruct> MultiEpInfo) throws org.apache.thrift.TException {
			send_AddDynamicEndpoint(MultiEpInfo);
			return recv_AddDynamicEndpoint();
		}

		public void send_AddDynamicEndpoint(List<MultiEpCreateStruct> MultiEpInfo) throws org.apache.thrift.TException {
			AddDynamicEndpoint_args args = new AddDynamicEndpoint_args();
			args.setMultiEpInfo(MultiEpInfo);
			sendBase("AddDynamicEndpoint", args);
		}

		public EpCreateStruct recv_AddDynamicEndpoint() throws org.apache.thrift.TException {
			AddDynamicEndpoint_result result = new AddDynamicEndpoint_result();
			receiveBase(result, "AddDynamicEndpoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddDynamicEndpoint failed: unknown result");
		}

		public Result DeleteDynamicEndpoint(int LocalEpId) throws org.apache.thrift.TException {
			send_DeleteDynamicEndpoint(LocalEpId);
			return recv_DeleteDynamicEndpoint();
		}

		public void send_DeleteDynamicEndpoint(int LocalEpId) throws org.apache.thrift.TException {
			DeleteDynamicEndpoint_args args = new DeleteDynamicEndpoint_args();
			args.setLocalEpId(LocalEpId);
			sendBase("DeleteDynamicEndpoint", args);
		}

		public Result recv_DeleteDynamicEndpoint() throws org.apache.thrift.TException {
			DeleteDynamicEndpoint_result result = new DeleteDynamicEndpoint_result();
			receiveBase(result, "DeleteDynamicEndpoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DeleteDynamicEndpoint failed: unknown result");
		}

		public Result SendAlertMessage(AlertParamsStruct AlertParams) throws org.apache.thrift.TException {
			send_SendAlertMessage(AlertParams);
			return recv_SendAlertMessage();
		}

		public void send_SendAlertMessage(AlertParamsStruct AlertParams) throws org.apache.thrift.TException {
			SendAlertMessage_args args = new SendAlertMessage_args();
			args.setAlertParams(AlertParams);
			sendBase("SendAlertMessage", args);
		}

		public Result recv_SendAlertMessage() throws org.apache.thrift.TException {
			SendAlertMessage_result result = new SendAlertMessage_result();
			receiveBase(result, "SendAlertMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendAlertMessage failed: unknown result");
		}

		public Result SendReceiptMessage(ReceiptParamsStruct ReceiptParams) throws org.apache.thrift.TException {
			send_SendReceiptMessage(ReceiptParams);
			return recv_SendReceiptMessage();
		}

		public void send_SendReceiptMessage(ReceiptParamsStruct ReceiptParams) throws org.apache.thrift.TException {
			SendReceiptMessage_args args = new SendReceiptMessage_args();
			args.setReceiptParams(ReceiptParams);
			sendBase("SendReceiptMessage", args);
		}

		public Result recv_SendReceiptMessage() throws org.apache.thrift.TException {
			SendReceiptMessage_result result = new SendReceiptMessage_result();
			receiveBase(result, "SendReceiptMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendReceiptMessage failed: unknown result");
		}

		public Result SendLogMessage(LogParamsStruct LogParams) throws org.apache.thrift.TException {
			send_SendLogMessage(LogParams);
			return recv_SendLogMessage();
		}

		public void send_SendLogMessage(LogParamsStruct LogParams) throws org.apache.thrift.TException {
			SendLogMessage_args args = new SendLogMessage_args();
			args.setLogParams(LogParams);
			sendBase("SendLogMessage", args);
		}

		public Result recv_SendLogMessage() throws org.apache.thrift.TException {
			SendLogMessage_result result = new SendLogMessage_result();
			receiveBase(result, "SendLogMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendLogMessage failed: unknown result");
		}

		public Result ClearActivationData() throws org.apache.thrift.TException {
			send_ClearActivationData();
			return recv_ClearActivationData();
		}

		public void send_ClearActivationData() throws org.apache.thrift.TException {
			ClearActivationData_args args = new ClearActivationData_args();
			sendBase("ClearActivationData", args);
		}

		public Result recv_ClearActivationData() throws org.apache.thrift.TException {
			ClearActivationData_result result = new ClearActivationData_result();
			receiveBase(result, "ClearActivationData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ClearActivationData failed: unknown result");
		}

		public Result ClearProvisionData() throws org.apache.thrift.TException {
			send_ClearProvisionData();
			return recv_ClearProvisionData();
		}

		public void send_ClearProvisionData() throws org.apache.thrift.TException {
			ClearProvisionData_args args = new ClearProvisionData_args();
			sendBase("ClearProvisionData", args);
		}

		public Result recv_ClearProvisionData() throws org.apache.thrift.TException {
			ClearProvisionData_result result = new ClearProvisionData_result();
			receiveBase(result, "ClearProvisionData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ClearProvisionData failed: unknown result");
		}

		public List<Integer> GetEndpointList() throws org.apache.thrift.TException {
			send_GetEndpointList();
			return recv_GetEndpointList();
		}

		public void send_GetEndpointList() throws org.apache.thrift.TException {
			GetEndpointList_args args = new GetEndpointList_args();
			sendBase("GetEndpointList", args);
		}

		public List<Integer> recv_GetEndpointList() throws org.apache.thrift.TException {
			GetEndpointList_result result = new GetEndpointList_result();
			receiveBase(result, "GetEndpointList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEndpointList failed: unknown result");
		}

		public EndpointInfoStruct GetEndpointInfo(int LocalEpId) throws org.apache.thrift.TException {
			send_GetEndpointInfo(LocalEpId);
			return recv_GetEndpointInfo();
		}

		public void send_GetEndpointInfo(int LocalEpId) throws org.apache.thrift.TException {
			GetEndpointInfo_args args = new GetEndpointInfo_args();
			args.setLocalEpId(LocalEpId);
			sendBase("GetEndpointInfo", args);
		}

		public EndpointInfoStruct recv_GetEndpointInfo() throws org.apache.thrift.TException {
			GetEndpointInfo_result result = new GetEndpointInfo_result();
			receiveBase(result, "GetEndpointInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEndpointInfo failed: unknown result");
		}

		public Result SetLogLevel(LogLevelTypeStruct log_level, int log_control) throws org.apache.thrift.TException {
			send_SetLogLevel(log_level, log_control);
			return recv_SetLogLevel();
		}

		public void send_SetLogLevel(LogLevelTypeStruct log_level, int log_control) throws org.apache.thrift.TException {
			SetLogLevel_args args = new SetLogLevel_args();
			args.setLog_level(log_level);
			args.setLog_control(log_control);
			sendBase("SetLogLevel", args);
		}

		public Result recv_SetLogLevel() throws org.apache.thrift.TException {
			SetLogLevel_result result = new SetLogLevel_result();
			receiveBase(result, "SetLogLevel");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetLogLevel failed: unknown result");
		}

		public void eAppReady() throws org.apache.thrift.TException {
			send_eAppReady();
			recv_eAppReady();
		}

		public void send_eAppReady() throws org.apache.thrift.TException {
			eAppReady_args args = new eAppReady_args();
			sendBase("eAppReady", args);
		}

		public void recv_eAppReady() throws org.apache.thrift.TException {
			eAppReady_result result = new eAppReady_result();
			receiveBase(result, "eAppReady");
			return;
		}

		public ReturnStruct getEvents() throws org.apache.thrift.TException {
			send_getEvents();
			return recv_getEvents();
		}

		public void send_getEvents() throws org.apache.thrift.TException {
			getEvents_args args = new getEvents_args();
			sendBase("getEvents", args);
		}

		public ReturnStruct recv_getEvents() throws org.apache.thrift.TException {
			getEvents_result result = new getEvents_result();
			receiveBase(result, "getEvents");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager,
			org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void GetConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetConfig_call method_call = new GetConfig_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
			public GetConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetConfig_args args = new GetConfig_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetConfig();
			}
		}

		public void Init(DeviceInfoStruct DevInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			Init_call method_call = new Init_call(DevInfo, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Init_call extends org.apache.thrift.async.TAsyncMethodCall {
			private DeviceInfoStruct DevInfo;

			public Init_call(DeviceInfoStruct DevInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.DevInfo = DevInfo;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Init", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Init_args args = new Init_args();
				args.setDevInfo(DevInfo);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Init();
			}
		}

		public void GetAgentLibVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetAgentLibVersion_call method_call = new GetAgentLibVersion_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetAgentLibVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
			public GetAgentLibVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAgentLibVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetAgentLibVersion_args args = new GetAgentLibVersion_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetAgentLibVersion();
			}
		}

		public void GetConfigStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetConfigStatus_call method_call = new GetConfigStatus_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetConfigStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
			public GetConfigStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetConfigStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetConfigStatus_args args = new GetConfigStatus_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetConfigStatus();
			}
		}

		public void GetActivationStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetActivationStatus_call method_call = new GetActivationStatus_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetActivationStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
			public GetActivationStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetActivationStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetActivationStatus_args args = new GetActivationStatus_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetActivationStatus();
			}
		}

		public void Activate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			Activate_call method_call = new Activate_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Activate_call extends org.apache.thrift.async.TAsyncMethodCall {
			public Activate_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Activate", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Activate_args args = new Activate_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Activate();
			}
		}

		public void ForceDeactivate(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ForceDeactivate_call method_call = new ForceDeactivate_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ForceDeactivate_call extends org.apache.thrift.async.TAsyncMethodCall {
			public ForceDeactivate_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ForceDeactivate", org.apache.thrift.protocol.TMessageType.CALL, 0));
				ForceDeactivate_args args = new ForceDeactivate_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ForceDeactivate();
			}
		}

		public void Sync(int sync_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			Sync_call method_call = new Sync_call(sync_type, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Sync_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int sync_type;

			public Sync_call(int sync_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sync_type = sync_type;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Sync", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Sync_args args = new Sync_args();
				args.setSync_type(sync_type);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Sync();
			}
		}

		public void Connect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			Connect_call method_call = new Connect_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Connect_call extends org.apache.thrift.async.TAsyncMethodCall {
			public Connect_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Connect_args args = new Connect_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Connect();
			}
		}

		public void Disconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			Disconnect_call method_call = new Disconnect_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Disconnect_call extends org.apache.thrift.async.TAsyncMethodCall {
			public Disconnect_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Disconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Disconnect_args args = new Disconnect_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Disconnect();
			}
		}

		public void SendAttributeMessage(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority,
			org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			SendAttributeMessage_call method_call = new SendAttributeMessage_call(LocalEpId, LocalAttrId, Value, priority, resultHandler, this, ___protocolFactory,
				___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendAttributeMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;
			private int LocalAttrId;
			private DataElementStruct Value;
			private int priority;

			public SendAttributeMessage_call(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority,
				org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
				this.LocalAttrId = LocalAttrId;
				this.Value = Value;
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendAttributeMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendAttributeMessage_args args = new SendAttributeMessage_args();
				args.setLocalEpId(LocalEpId);
				args.setLocalAttrId(LocalAttrId);
				args.setValue(Value);
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendAttributeMessage();
			}
		}

		public void SendSettingMessage(int LocalEpId, int SettingId, DataElementStruct Value, int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			SendSettingMessage_call method_call = new SendSettingMessage_call(LocalEpId, SettingId, Value, priority, resultHandler, this, ___protocolFactory,
				___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendSettingMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;
			private int SettingId;
			private DataElementStruct Value;
			private int priority;

			public SendSettingMessage_call(int LocalEpId, int SettingId, DataElementStruct Value, int priority,
				org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
				this.SettingId = SettingId;
				this.Value = Value;
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendSettingMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendSettingMessage_args args = new SendSettingMessage_args();
				args.setLocalEpId(LocalEpId);
				args.setSettingId(SettingId);
				args.setValue(Value);
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendSettingMessage();
			}
		}

		public void InitEndpointMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			InitEndpointMessage_call method_call = new InitEndpointMessage_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class InitEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			public InitEndpointMessage_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InitEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				InitEndpointMessage_args args = new InitEndpointMessage_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_InitEndpointMessage();
			}
		}

		public void InitSettingEndpointMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			InitSettingEndpointMessage_call method_call = new InitSettingEndpointMessage_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class InitSettingEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			public InitSettingEndpointMessage_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InitSettingEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				InitSettingEndpointMessage_args args = new InitSettingEndpointMessage_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_InitSettingEndpointMessage();
			}
		}

		public void UpdateEndpointMessage(int LocalEpId, List<AttributeStruct> AttributeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			UpdateEndpointMessage_call method_call = new UpdateEndpointMessage_call(LocalEpId, AttributeInfo, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class UpdateEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;
			private List<AttributeStruct> AttributeInfo;

			public UpdateEndpointMessage_call(int LocalEpId, List<AttributeStruct> AttributeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
				this.AttributeInfo = AttributeInfo;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				UpdateEndpointMessage_args args = new UpdateEndpointMessage_args();
				args.setLocalEpId(LocalEpId);
				args.setAttributeInfo(AttributeInfo);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_UpdateEndpointMessage();
			}
		}

		public void UpdateSettingEndpointMessage(int LocalEpId, List<SettingStruct> SettingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			UpdateSettingEndpointMessage_call method_call = new UpdateSettingEndpointMessage_call(LocalEpId, SettingInfo, resultHandler, this, ___protocolFactory,
				___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class UpdateSettingEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;
			private List<SettingStruct> SettingInfo;

			public UpdateSettingEndpointMessage_call(int LocalEpId, List<SettingStruct> SettingInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
				this.SettingInfo = SettingInfo;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateSettingEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				UpdateSettingEndpointMessage_args args = new UpdateSettingEndpointMessage_args();
				args.setLocalEpId(LocalEpId);
				args.setSettingInfo(SettingInfo);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_UpdateSettingEndpointMessage();
			}
		}

		public void SendEndpointMessage(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			SendEndpointMessage_call method_call = new SendEndpointMessage_call(priority, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int priority;

			public SendEndpointMessage_call(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendEndpointMessage_args args = new SendEndpointMessage_args();
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendEndpointMessage();
			}
		}

		public void SendSettingEndpointMessage(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			SendSettingEndpointMessage_call method_call = new SendSettingEndpointMessage_call(priority, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendSettingEndpointMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int priority;

			public SendSettingEndpointMessage_call(int priority, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendSettingEndpointMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendSettingEndpointMessage_args args = new SendSettingEndpointMessage_args();
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendSettingEndpointMessage();
			}
		}

		public void AddDynamicEndpoint(List<MultiEpCreateStruct> MultiEpInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			AddDynamicEndpoint_call method_call = new AddDynamicEndpoint_call(MultiEpInfo, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class AddDynamicEndpoint_call extends org.apache.thrift.async.TAsyncMethodCall {
			private List<MultiEpCreateStruct> MultiEpInfo;

			public AddDynamicEndpoint_call(List<MultiEpCreateStruct> MultiEpInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.MultiEpInfo = MultiEpInfo;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddDynamicEndpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
				AddDynamicEndpoint_args args = new AddDynamicEndpoint_args();
				args.setMultiEpInfo(MultiEpInfo);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public EpCreateStruct getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_AddDynamicEndpoint();
			}
		}

		public void DeleteDynamicEndpoint(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			DeleteDynamicEndpoint_call method_call = new DeleteDynamicEndpoint_call(LocalEpId, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class DeleteDynamicEndpoint_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;

			public DeleteDynamicEndpoint_call(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteDynamicEndpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
				DeleteDynamicEndpoint_args args = new DeleteDynamicEndpoint_args();
				args.setLocalEpId(LocalEpId);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_DeleteDynamicEndpoint();
			}
		}

		public void SendAlertMessage(AlertParamsStruct AlertParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			SendAlertMessage_call method_call = new SendAlertMessage_call(AlertParams, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendAlertMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private AlertParamsStruct AlertParams;

			public SendAlertMessage_call(AlertParamsStruct AlertParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.AlertParams = AlertParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendAlertMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendAlertMessage_args args = new SendAlertMessage_args();
				args.setAlertParams(AlertParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendAlertMessage();
			}
		}

		public void SendReceiptMessage(ReceiptParamsStruct ReceiptParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			SendReceiptMessage_call method_call = new SendReceiptMessage_call(ReceiptParams, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendReceiptMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private ReceiptParamsStruct ReceiptParams;

			public SendReceiptMessage_call(ReceiptParamsStruct ReceiptParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.ReceiptParams = ReceiptParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendReceiptMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendReceiptMessage_args args = new SendReceiptMessage_args();
				args.setReceiptParams(ReceiptParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendReceiptMessage();
			}
		}

		public void SendLogMessage(LogParamsStruct LogParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			SendLogMessage_call method_call = new SendLogMessage_call(LogParams, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SendLogMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
			private LogParamsStruct LogParams;

			public SendLogMessage_call(LogParamsStruct LogParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LogParams = LogParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendLogMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SendLogMessage_args args = new SendLogMessage_args();
				args.setLogParams(LogParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SendLogMessage();
			}
		}

		public void ClearActivationData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ClearActivationData_call method_call = new ClearActivationData_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ClearActivationData_call extends org.apache.thrift.async.TAsyncMethodCall {
			public ClearActivationData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ClearActivationData", org.apache.thrift.protocol.TMessageType.CALL, 0));
				ClearActivationData_args args = new ClearActivationData_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ClearActivationData();
			}
		}

		public void ClearProvisionData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ClearProvisionData_call method_call = new ClearProvisionData_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ClearProvisionData_call extends org.apache.thrift.async.TAsyncMethodCall {
			public ClearProvisionData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ClearProvisionData", org.apache.thrift.protocol.TMessageType.CALL, 0));
				ClearProvisionData_args args = new ClearProvisionData_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ClearProvisionData();
			}
		}

		public void GetEndpointList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetEndpointList_call method_call = new GetEndpointList_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetEndpointList_call extends org.apache.thrift.async.TAsyncMethodCall {
			public GetEndpointList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEndpointList", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetEndpointList_args args = new GetEndpointList_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<Integer> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetEndpointList();
			}
		}

		public void GetEndpointInfo(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetEndpointInfo_call method_call = new GetEndpointInfo_call(LocalEpId, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetEndpointInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int LocalEpId;

			public GetEndpointInfo_call(int LocalEpId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.LocalEpId = LocalEpId;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEndpointInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetEndpointInfo_args args = new GetEndpointInfo_args();
				args.setLocalEpId(LocalEpId);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public EndpointInfoStruct getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetEndpointInfo();
			}
		}

		public void SetLogLevel(LogLevelTypeStruct log_level, int log_control, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			SetLogLevel_call method_call = new SetLogLevel_call(log_level, log_control, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SetLogLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
			private LogLevelTypeStruct log_level;
			private int log_control;

			public SetLogLevel_call(LogLevelTypeStruct log_level, int log_control, org.apache.thrift.async.AsyncMethodCallback resultHandler,
				org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.log_level = log_level;
				this.log_control = log_control;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetLogLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
				SetLogLevel_args args = new SetLogLevel_args();
				args.setLog_level(log_level);
				args.setLog_control(log_control);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SetLogLevel();
			}
		}

		public void eAppReady(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			eAppReady_call method_call = new eAppReady_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class eAppReady_call extends org.apache.thrift.async.TAsyncMethodCall {
			public eAppReady_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("eAppReady", org.apache.thrift.protocol.TMessageType.CALL, 0));
				eAppReady_args args = new eAppReady_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				(new Client(prot)).recv_eAppReady();
			}
		}

		public void getEvents(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getEvents_call method_call = new getEvents_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
			public getEvents_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
				org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport)
				throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
				getEvents_args args = new getEvents_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ReturnStruct getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getEvents();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
			Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("GetConfig", new GetConfig());
			processMap.put("Init", new Init());
			processMap.put("GetAgentLibVersion", new GetAgentLibVersion());
			processMap.put("GetConfigStatus", new GetConfigStatus());
			processMap.put("GetActivationStatus", new GetActivationStatus());
			processMap.put("Activate", new Activate());
			processMap.put("ForceDeactivate", new ForceDeactivate());
			processMap.put("Sync", new Sync());
			processMap.put("Connect", new Connect());
			processMap.put("Disconnect", new Disconnect());
			processMap.put("SendAttributeMessage", new SendAttributeMessage());
			processMap.put("SendSettingMessage", new SendSettingMessage());
			processMap.put("InitEndpointMessage", new InitEndpointMessage());
			processMap.put("InitSettingEndpointMessage", new InitSettingEndpointMessage());
			processMap.put("UpdateEndpointMessage", new UpdateEndpointMessage());
			processMap.put("UpdateSettingEndpointMessage", new UpdateSettingEndpointMessage());
			processMap.put("SendEndpointMessage", new SendEndpointMessage());
			processMap.put("SendSettingEndpointMessage", new SendSettingEndpointMessage());
			processMap.put("AddDynamicEndpoint", new AddDynamicEndpoint());
			processMap.put("DeleteDynamicEndpoint", new DeleteDynamicEndpoint());
			processMap.put("SendAlertMessage", new SendAlertMessage());
			processMap.put("SendReceiptMessage", new SendReceiptMessage());
			processMap.put("SendLogMessage", new SendLogMessage());
			processMap.put("ClearActivationData", new ClearActivationData());
			processMap.put("ClearProvisionData", new ClearProvisionData());
			processMap.put("GetEndpointList", new GetEndpointList());
			processMap.put("GetEndpointInfo", new GetEndpointInfo());
			processMap.put("SetLogLevel", new SetLogLevel());
			processMap.put("eAppReady", new eAppReady());
			processMap.put("getEvents", new getEvents());
			return processMap;
		}

		public static class GetConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetConfig_args> {
			public GetConfig() {
				super("GetConfig");
			}

			public GetConfig_args getEmptyArgsInstance() {
				return new GetConfig_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetConfig_result getResult(I iface, GetConfig_args args) throws org.apache.thrift.TException {
				GetConfig_result result = new GetConfig_result();
				result.success = iface.GetConfig();
				return result;
			}
		}

		public static class Init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Init_args> {
			public Init() {
				super("Init");
			}

			public Init_args getEmptyArgsInstance() {
				return new Init_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public Init_result getResult(I iface, Init_args args) throws org.apache.thrift.TException {
				Init_result result = new Init_result();
				result.success = iface.Init(args.DevInfo);
				return result;
			}
		}

		public static class GetAgentLibVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAgentLibVersion_args> {
			public GetAgentLibVersion() {
				super("GetAgentLibVersion");
			}

			public GetAgentLibVersion_args getEmptyArgsInstance() {
				return new GetAgentLibVersion_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetAgentLibVersion_result getResult(I iface, GetAgentLibVersion_args args) throws org.apache.thrift.TException {
				GetAgentLibVersion_result result = new GetAgentLibVersion_result();
				result.success = iface.GetAgentLibVersion();
				return result;
			}
		}

		public static class GetConfigStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetConfigStatus_args> {
			public GetConfigStatus() {
				super("GetConfigStatus");
			}

			public GetConfigStatus_args getEmptyArgsInstance() {
				return new GetConfigStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetConfigStatus_result getResult(I iface, GetConfigStatus_args args) throws org.apache.thrift.TException {
				GetConfigStatus_result result = new GetConfigStatus_result();
				result.success = iface.GetConfigStatus();
				return result;
			}
		}

		public static class GetActivationStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetActivationStatus_args> {
			public GetActivationStatus() {
				super("GetActivationStatus");
			}

			public GetActivationStatus_args getEmptyArgsInstance() {
				return new GetActivationStatus_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetActivationStatus_result getResult(I iface, GetActivationStatus_args args) throws org.apache.thrift.TException {
				GetActivationStatus_result result = new GetActivationStatus_result();
				result.success = iface.GetActivationStatus();
				return result;
			}
		}

		public static class Activate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Activate_args> {
			public Activate() {
				super("Activate");
			}

			public Activate_args getEmptyArgsInstance() {
				return new Activate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public Activate_result getResult(I iface, Activate_args args) throws org.apache.thrift.TException {
				Activate_result result = new Activate_result();
				result.success = iface.Activate();
				return result;
			}
		}

		public static class ForceDeactivate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ForceDeactivate_args> {
			public ForceDeactivate() {
				super("ForceDeactivate");
			}

			public ForceDeactivate_args getEmptyArgsInstance() {
				return new ForceDeactivate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public ForceDeactivate_result getResult(I iface, ForceDeactivate_args args) throws org.apache.thrift.TException {
				ForceDeactivate_result result = new ForceDeactivate_result();
				result.success = iface.ForceDeactivate();
				return result;
			}
		}

		public static class Sync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Sync_args> {
			public Sync() {
				super("Sync");
			}

			public Sync_args getEmptyArgsInstance() {
				return new Sync_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public Sync_result getResult(I iface, Sync_args args) throws org.apache.thrift.TException {
				Sync_result result = new Sync_result();
				result.success = iface.Sync(args.sync_type);
				return result;
			}
		}

		public static class Connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Connect_args> {
			public Connect() {
				super("Connect");
			}

			public Connect_args getEmptyArgsInstance() {
				return new Connect_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public Connect_result getResult(I iface, Connect_args args) throws org.apache.thrift.TException {
				Connect_result result = new Connect_result();
				result.success = iface.Connect();
				return result;
			}
		}

		public static class Disconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Disconnect_args> {
			public Disconnect() {
				super("Disconnect");
			}

			public Disconnect_args getEmptyArgsInstance() {
				return new Disconnect_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public Disconnect_result getResult(I iface, Disconnect_args args) throws org.apache.thrift.TException {
				Disconnect_result result = new Disconnect_result();
				result.success = iface.Disconnect();
				return result;
			}
		}

		public static class SendAttributeMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendAttributeMessage_args> {
			public SendAttributeMessage() {
				super("SendAttributeMessage");
			}

			public SendAttributeMessage_args getEmptyArgsInstance() {
				return new SendAttributeMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendAttributeMessage_result getResult(I iface, SendAttributeMessage_args args) throws org.apache.thrift.TException {
				SendAttributeMessage_result result = new SendAttributeMessage_result();
				result.success = iface.SendAttributeMessage(args.LocalEpId, args.LocalAttrId, args.Value, args.priority);
				return result;
			}
		}

		public static class SendSettingMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendSettingMessage_args> {
			public SendSettingMessage() {
				super("SendSettingMessage");
			}

			public SendSettingMessage_args getEmptyArgsInstance() {
				return new SendSettingMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendSettingMessage_result getResult(I iface, SendSettingMessage_args args) throws org.apache.thrift.TException {
				SendSettingMessage_result result = new SendSettingMessage_result();
				result.success = iface.SendSettingMessage(args.LocalEpId, args.SettingId, args.Value, args.priority);
				return result;
			}
		}

		public static class InitEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InitEndpointMessage_args> {
			public InitEndpointMessage() {
				super("InitEndpointMessage");
			}

			public InitEndpointMessage_args getEmptyArgsInstance() {
				return new InitEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public InitEndpointMessage_result getResult(I iface, InitEndpointMessage_args args) throws org.apache.thrift.TException {
				InitEndpointMessage_result result = new InitEndpointMessage_result();
				result.success = iface.InitEndpointMessage();
				return result;
			}
		}

		public static class InitSettingEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InitSettingEndpointMessage_args> {
			public InitSettingEndpointMessage() {
				super("InitSettingEndpointMessage");
			}

			public InitSettingEndpointMessage_args getEmptyArgsInstance() {
				return new InitSettingEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public InitSettingEndpointMessage_result getResult(I iface, InitSettingEndpointMessage_args args) throws org.apache.thrift.TException {
				InitSettingEndpointMessage_result result = new InitSettingEndpointMessage_result();
				result.success = iface.InitSettingEndpointMessage();
				return result;
			}
		}

		public static class UpdateEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEndpointMessage_args> {
			public UpdateEndpointMessage() {
				super("UpdateEndpointMessage");
			}

			public UpdateEndpointMessage_args getEmptyArgsInstance() {
				return new UpdateEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public UpdateEndpointMessage_result getResult(I iface, UpdateEndpointMessage_args args) throws org.apache.thrift.TException {
				UpdateEndpointMessage_result result = new UpdateEndpointMessage_result();
				result.success = iface.UpdateEndpointMessage(args.LocalEpId, args.AttributeInfo);
				return result;
			}
		}

		public static class UpdateSettingEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateSettingEndpointMessage_args> {
			public UpdateSettingEndpointMessage() {
				super("UpdateSettingEndpointMessage");
			}

			public UpdateSettingEndpointMessage_args getEmptyArgsInstance() {
				return new UpdateSettingEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public UpdateSettingEndpointMessage_result getResult(I iface, UpdateSettingEndpointMessage_args args) throws org.apache.thrift.TException {
				UpdateSettingEndpointMessage_result result = new UpdateSettingEndpointMessage_result();
				result.success = iface.UpdateSettingEndpointMessage(args.LocalEpId, args.SettingInfo);
				return result;
			}
		}

		public static class SendEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendEndpointMessage_args> {
			public SendEndpointMessage() {
				super("SendEndpointMessage");
			}

			public SendEndpointMessage_args getEmptyArgsInstance() {
				return new SendEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendEndpointMessage_result getResult(I iface, SendEndpointMessage_args args) throws org.apache.thrift.TException {
				SendEndpointMessage_result result = new SendEndpointMessage_result();
				result.success = iface.SendEndpointMessage(args.priority);
				return result;
			}
		}

		public static class SendSettingEndpointMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendSettingEndpointMessage_args> {
			public SendSettingEndpointMessage() {
				super("SendSettingEndpointMessage");
			}

			public SendSettingEndpointMessage_args getEmptyArgsInstance() {
				return new SendSettingEndpointMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendSettingEndpointMessage_result getResult(I iface, SendSettingEndpointMessage_args args) throws org.apache.thrift.TException {
				SendSettingEndpointMessage_result result = new SendSettingEndpointMessage_result();
				result.success = iface.SendSettingEndpointMessage(args.priority);
				return result;
			}
		}

		public static class AddDynamicEndpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddDynamicEndpoint_args> {
			public AddDynamicEndpoint() {
				super("AddDynamicEndpoint");
			}

			public AddDynamicEndpoint_args getEmptyArgsInstance() {
				return new AddDynamicEndpoint_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public AddDynamicEndpoint_result getResult(I iface, AddDynamicEndpoint_args args) throws org.apache.thrift.TException {
				AddDynamicEndpoint_result result = new AddDynamicEndpoint_result();
				result.success = iface.AddDynamicEndpoint(args.MultiEpInfo);
				return result;
			}
		}

		public static class DeleteDynamicEndpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteDynamicEndpoint_args> {
			public DeleteDynamicEndpoint() {
				super("DeleteDynamicEndpoint");
			}

			public DeleteDynamicEndpoint_args getEmptyArgsInstance() {
				return new DeleteDynamicEndpoint_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public DeleteDynamicEndpoint_result getResult(I iface, DeleteDynamicEndpoint_args args) throws org.apache.thrift.TException {
				DeleteDynamicEndpoint_result result = new DeleteDynamicEndpoint_result();
				result.success = iface.DeleteDynamicEndpoint(args.LocalEpId);
				return result;
			}
		}

		public static class SendAlertMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendAlertMessage_args> {
			public SendAlertMessage() {
				super("SendAlertMessage");
			}

			public SendAlertMessage_args getEmptyArgsInstance() {
				return new SendAlertMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendAlertMessage_result getResult(I iface, SendAlertMessage_args args) throws org.apache.thrift.TException {
				SendAlertMessage_result result = new SendAlertMessage_result();
				result.success = iface.SendAlertMessage(args.AlertParams);
				return result;
			}
		}

		public static class SendReceiptMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendReceiptMessage_args> {
			public SendReceiptMessage() {
				super("SendReceiptMessage");
			}

			public SendReceiptMessage_args getEmptyArgsInstance() {
				return new SendReceiptMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendReceiptMessage_result getResult(I iface, SendReceiptMessage_args args) throws org.apache.thrift.TException {
				SendReceiptMessage_result result = new SendReceiptMessage_result();
				result.success = iface.SendReceiptMessage(args.ReceiptParams);
				return result;
			}
		}

		public static class SendLogMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendLogMessage_args> {
			public SendLogMessage() {
				super("SendLogMessage");
			}

			public SendLogMessage_args getEmptyArgsInstance() {
				return new SendLogMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SendLogMessage_result getResult(I iface, SendLogMessage_args args) throws org.apache.thrift.TException {
				SendLogMessage_result result = new SendLogMessage_result();
				result.success = iface.SendLogMessage(args.LogParams);
				return result;
			}
		}

		public static class ClearActivationData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ClearActivationData_args> {
			public ClearActivationData() {
				super("ClearActivationData");
			}

			public ClearActivationData_args getEmptyArgsInstance() {
				return new ClearActivationData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public ClearActivationData_result getResult(I iface, ClearActivationData_args args) throws org.apache.thrift.TException {
				ClearActivationData_result result = new ClearActivationData_result();
				result.success = iface.ClearActivationData();
				return result;
			}
		}

		public static class ClearProvisionData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ClearProvisionData_args> {
			public ClearProvisionData() {
				super("ClearProvisionData");
			}

			public ClearProvisionData_args getEmptyArgsInstance() {
				return new ClearProvisionData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public ClearProvisionData_result getResult(I iface, ClearProvisionData_args args) throws org.apache.thrift.TException {
				ClearProvisionData_result result = new ClearProvisionData_result();
				result.success = iface.ClearProvisionData();
				return result;
			}
		}

		public static class GetEndpointList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEndpointList_args> {
			public GetEndpointList() {
				super("GetEndpointList");
			}

			public GetEndpointList_args getEmptyArgsInstance() {
				return new GetEndpointList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetEndpointList_result getResult(I iface, GetEndpointList_args args) throws org.apache.thrift.TException {
				GetEndpointList_result result = new GetEndpointList_result();
				result.success = iface.GetEndpointList();
				return result;
			}
		}

		public static class GetEndpointInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEndpointInfo_args> {
			public GetEndpointInfo() {
				super("GetEndpointInfo");
			}

			public GetEndpointInfo_args getEmptyArgsInstance() {
				return new GetEndpointInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetEndpointInfo_result getResult(I iface, GetEndpointInfo_args args) throws org.apache.thrift.TException {
				GetEndpointInfo_result result = new GetEndpointInfo_result();
				result.success = iface.GetEndpointInfo(args.LocalEpId);
				return result;
			}
		}

		public static class SetLogLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetLogLevel_args> {
			public SetLogLevel() {
				super("SetLogLevel");
			}

			public SetLogLevel_args getEmptyArgsInstance() {
				return new SetLogLevel_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SetLogLevel_result getResult(I iface, SetLogLevel_args args) throws org.apache.thrift.TException {
				SetLogLevel_result result = new SetLogLevel_result();
				result.success = iface.SetLogLevel(args.log_level, args.log_control);
				return result;
			}
		}

		public static class eAppReady<I extends Iface> extends org.apache.thrift.ProcessFunction<I, eAppReady_args> {
			public eAppReady() {
				super("eAppReady");
			}

			public eAppReady_args getEmptyArgsInstance() {
				return new eAppReady_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public eAppReady_result getResult(I iface, eAppReady_args args) throws org.apache.thrift.TException {
				eAppReady_result result = new eAppReady_result();
				iface.eAppReady();
				return result;
			}
		}

		public static class getEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvents_args> {
			public getEvents() {
				super("getEvents");
			}

			public getEvents_args getEmptyArgsInstance() {
				return new getEvents_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getEvents_result getResult(I iface, getEvents_args args) throws org.apache.thrift.TException {
				getEvents_result result = new getEvents_result();
				result.success = iface.getEvents();
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
			Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("GetConfig", new GetConfig());
			processMap.put("Init", new Init());
			processMap.put("GetAgentLibVersion", new GetAgentLibVersion());
			processMap.put("GetConfigStatus", new GetConfigStatus());
			processMap.put("GetActivationStatus", new GetActivationStatus());
			processMap.put("Activate", new Activate());
			processMap.put("ForceDeactivate", new ForceDeactivate());
			processMap.put("Sync", new Sync());
			processMap.put("Connect", new Connect());
			processMap.put("Disconnect", new Disconnect());
			processMap.put("SendAttributeMessage", new SendAttributeMessage());
			processMap.put("SendSettingMessage", new SendSettingMessage());
			processMap.put("InitEndpointMessage", new InitEndpointMessage());
			processMap.put("InitSettingEndpointMessage", new InitSettingEndpointMessage());
			processMap.put("UpdateEndpointMessage", new UpdateEndpointMessage());
			processMap.put("UpdateSettingEndpointMessage", new UpdateSettingEndpointMessage());
			processMap.put("SendEndpointMessage", new SendEndpointMessage());
			processMap.put("SendSettingEndpointMessage", new SendSettingEndpointMessage());
			processMap.put("AddDynamicEndpoint", new AddDynamicEndpoint());
			processMap.put("DeleteDynamicEndpoint", new DeleteDynamicEndpoint());
			processMap.put("SendAlertMessage", new SendAlertMessage());
			processMap.put("SendReceiptMessage", new SendReceiptMessage());
			processMap.put("SendLogMessage", new SendLogMessage());
			processMap.put("ClearActivationData", new ClearActivationData());
			processMap.put("ClearProvisionData", new ClearProvisionData());
			processMap.put("GetEndpointList", new GetEndpointList());
			processMap.put("GetEndpointInfo", new GetEndpointInfo());
			processMap.put("SetLogLevel", new SetLogLevel());
			processMap.put("eAppReady", new eAppReady());
			processMap.put("getEvents", new getEvents());
			return processMap;
		}

		public static class GetConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetConfig_args, Result> {
			public GetConfig() {
				super("GetConfig");
			}

			public GetConfig_args getEmptyArgsInstance() {
				return new GetConfig_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						GetConfig_result result = new GetConfig_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetConfig_result result = new GetConfig_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetConfig_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.GetConfig(resultHandler);
			}
		}

		public static class Init<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Init_args, Result> {
			public Init() {
				super("Init");
			}

			public Init_args getEmptyArgsInstance() {
				return new Init_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						Init_result result = new Init_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						Init_result result = new Init_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, Init_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.Init(args.DevInfo, resultHandler);
			}
		}

		public static class GetAgentLibVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAgentLibVersion_args, String> {
			public GetAgentLibVersion() {
				super("GetAgentLibVersion");
			}

			public GetAgentLibVersion_args getEmptyArgsInstance() {
				return new GetAgentLibVersion_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetAgentLibVersion_result result = new GetAgentLibVersion_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetAgentLibVersion_result result = new GetAgentLibVersion_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetAgentLibVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetAgentLibVersion(resultHandler);
			}
		}

		public static class GetConfigStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetConfigStatus_args, Result> {
			public GetConfigStatus() {
				super("GetConfigStatus");
			}

			public GetConfigStatus_args getEmptyArgsInstance() {
				return new GetConfigStatus_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						GetConfigStatus_result result = new GetConfigStatus_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetConfigStatus_result result = new GetConfigStatus_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetConfigStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.GetConfigStatus(resultHandler);
			}
		}

		public static class GetActivationStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetActivationStatus_args, Result> {
			public GetActivationStatus() {
				super("GetActivationStatus");
			}

			public GetActivationStatus_args getEmptyArgsInstance() {
				return new GetActivationStatus_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						GetActivationStatus_result result = new GetActivationStatus_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetActivationStatus_result result = new GetActivationStatus_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetActivationStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.GetActivationStatus(resultHandler);
			}
		}

		public static class Activate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Activate_args, Result> {
			public Activate() {
				super("Activate");
			}

			public Activate_args getEmptyArgsInstance() {
				return new Activate_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						Activate_result result = new Activate_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						Activate_result result = new Activate_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, Activate_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.Activate(resultHandler);
			}
		}

		public static class ForceDeactivate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ForceDeactivate_args, Result> {
			public ForceDeactivate() {
				super("ForceDeactivate");
			}

			public ForceDeactivate_args getEmptyArgsInstance() {
				return new ForceDeactivate_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						ForceDeactivate_result result = new ForceDeactivate_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						ForceDeactivate_result result = new ForceDeactivate_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ForceDeactivate_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.ForceDeactivate(resultHandler);
			}
		}

		public static class Sync<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Sync_args, Result> {
			public Sync() {
				super("Sync");
			}

			public Sync_args getEmptyArgsInstance() {
				return new Sync_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						Sync_result result = new Sync_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						Sync_result result = new Sync_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, Sync_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.Sync(args.sync_type, resultHandler);
			}
		}

		public static class Connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Connect_args, Result> {
			public Connect() {
				super("Connect");
			}

			public Connect_args getEmptyArgsInstance() {
				return new Connect_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						Connect_result result = new Connect_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						Connect_result result = new Connect_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, Connect_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.Connect(resultHandler);
			}
		}

		public static class Disconnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Disconnect_args, Result> {
			public Disconnect() {
				super("Disconnect");
			}

			public Disconnect_args getEmptyArgsInstance() {
				return new Disconnect_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						Disconnect_result result = new Disconnect_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						Disconnect_result result = new Disconnect_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, Disconnect_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.Disconnect(resultHandler);
			}
		}

		public static class SendAttributeMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendAttributeMessage_args, Result> {
			public SendAttributeMessage() {
				super("SendAttributeMessage");
			}

			public SendAttributeMessage_args getEmptyArgsInstance() {
				return new SendAttributeMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendAttributeMessage_result result = new SendAttributeMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendAttributeMessage_result result = new SendAttributeMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendAttributeMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendAttributeMessage(args.LocalEpId, args.LocalAttrId, args.Value, args.priority, resultHandler);
			}
		}

		public static class SendSettingMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendSettingMessage_args, Result> {
			public SendSettingMessage() {
				super("SendSettingMessage");
			}

			public SendSettingMessage_args getEmptyArgsInstance() {
				return new SendSettingMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendSettingMessage_result result = new SendSettingMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendSettingMessage_result result = new SendSettingMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendSettingMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendSettingMessage(args.LocalEpId, args.SettingId, args.Value, args.priority, resultHandler);
			}
		}

		public static class InitEndpointMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, InitEndpointMessage_args, Result> {
			public InitEndpointMessage() {
				super("InitEndpointMessage");
			}

			public InitEndpointMessage_args getEmptyArgsInstance() {
				return new InitEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						InitEndpointMessage_result result = new InitEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						InitEndpointMessage_result result = new InitEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, InitEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.InitEndpointMessage(resultHandler);
			}
		}

		public static class InitSettingEndpointMessage<I extends AsyncIface>
			extends org.apache.thrift.AsyncProcessFunction<I, InitSettingEndpointMessage_args, Result> {
			public InitSettingEndpointMessage() {
				super("InitSettingEndpointMessage");
			}

			public InitSettingEndpointMessage_args getEmptyArgsInstance() {
				return new InitSettingEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						InitSettingEndpointMessage_result result = new InitSettingEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						InitSettingEndpointMessage_result result = new InitSettingEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, InitSettingEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.InitSettingEndpointMessage(resultHandler);
			}
		}

		public static class UpdateEndpointMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateEndpointMessage_args, Result> {
			public UpdateEndpointMessage() {
				super("UpdateEndpointMessage");
			}

			public UpdateEndpointMessage_args getEmptyArgsInstance() {
				return new UpdateEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						UpdateEndpointMessage_result result = new UpdateEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						UpdateEndpointMessage_result result = new UpdateEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, UpdateEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.UpdateEndpointMessage(args.LocalEpId, args.AttributeInfo, resultHandler);
			}
		}

		public static class UpdateSettingEndpointMessage<I extends AsyncIface>
			extends org.apache.thrift.AsyncProcessFunction<I, UpdateSettingEndpointMessage_args, Result> {
			public UpdateSettingEndpointMessage() {
				super("UpdateSettingEndpointMessage");
			}

			public UpdateSettingEndpointMessage_args getEmptyArgsInstance() {
				return new UpdateSettingEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						UpdateSettingEndpointMessage_result result = new UpdateSettingEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						UpdateSettingEndpointMessage_result result = new UpdateSettingEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, UpdateSettingEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.UpdateSettingEndpointMessage(args.LocalEpId, args.SettingInfo, resultHandler);
			}
		}

		public static class SendEndpointMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendEndpointMessage_args, Result> {
			public SendEndpointMessage() {
				super("SendEndpointMessage");
			}

			public SendEndpointMessage_args getEmptyArgsInstance() {
				return new SendEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendEndpointMessage_result result = new SendEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendEndpointMessage_result result = new SendEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendEndpointMessage(args.priority, resultHandler);
			}
		}

		public static class SendSettingEndpointMessage<I extends AsyncIface>
			extends org.apache.thrift.AsyncProcessFunction<I, SendSettingEndpointMessage_args, Result> {
			public SendSettingEndpointMessage() {
				super("SendSettingEndpointMessage");
			}

			public SendSettingEndpointMessage_args getEmptyArgsInstance() {
				return new SendSettingEndpointMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendSettingEndpointMessage_result result = new SendSettingEndpointMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendSettingEndpointMessage_result result = new SendSettingEndpointMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendSettingEndpointMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendSettingEndpointMessage(args.priority, resultHandler);
			}
		}

		public static class AddDynamicEndpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddDynamicEndpoint_args, EpCreateStruct> {
			public AddDynamicEndpoint() {
				super("AddDynamicEndpoint");
			}

			public AddDynamicEndpoint_args getEmptyArgsInstance() {
				return new AddDynamicEndpoint_args();
			}

			public AsyncMethodCallback<EpCreateStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<EpCreateStruct>() {
					public void onComplete(EpCreateStruct o) {
						AddDynamicEndpoint_result result = new AddDynamicEndpoint_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						AddDynamicEndpoint_result result = new AddDynamicEndpoint_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, AddDynamicEndpoint_args args, org.apache.thrift.async.AsyncMethodCallback<EpCreateStruct> resultHandler) throws TException {
				iface.AddDynamicEndpoint(args.MultiEpInfo, resultHandler);
			}
		}

		public static class DeleteDynamicEndpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteDynamicEndpoint_args, Result> {
			public DeleteDynamicEndpoint() {
				super("DeleteDynamicEndpoint");
			}

			public DeleteDynamicEndpoint_args getEmptyArgsInstance() {
				return new DeleteDynamicEndpoint_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						DeleteDynamicEndpoint_result result = new DeleteDynamicEndpoint_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						DeleteDynamicEndpoint_result result = new DeleteDynamicEndpoint_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, DeleteDynamicEndpoint_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.DeleteDynamicEndpoint(args.LocalEpId, resultHandler);
			}
		}

		public static class SendAlertMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendAlertMessage_args, Result> {
			public SendAlertMessage() {
				super("SendAlertMessage");
			}

			public SendAlertMessage_args getEmptyArgsInstance() {
				return new SendAlertMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendAlertMessage_result result = new SendAlertMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendAlertMessage_result result = new SendAlertMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendAlertMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendAlertMessage(args.AlertParams, resultHandler);
			}
		}

		public static class SendReceiptMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendReceiptMessage_args, Result> {
			public SendReceiptMessage() {
				super("SendReceiptMessage");
			}

			public SendReceiptMessage_args getEmptyArgsInstance() {
				return new SendReceiptMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendReceiptMessage_result result = new SendReceiptMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendReceiptMessage_result result = new SendReceiptMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendReceiptMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendReceiptMessage(args.ReceiptParams, resultHandler);
			}
		}

		public static class SendLogMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendLogMessage_args, Result> {
			public SendLogMessage() {
				super("SendLogMessage");
			}

			public SendLogMessage_args getEmptyArgsInstance() {
				return new SendLogMessage_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SendLogMessage_result result = new SendLogMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SendLogMessage_result result = new SendLogMessage_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SendLogMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SendLogMessage(args.LogParams, resultHandler);
			}
		}

		public static class ClearActivationData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ClearActivationData_args, Result> {
			public ClearActivationData() {
				super("ClearActivationData");
			}

			public ClearActivationData_args getEmptyArgsInstance() {
				return new ClearActivationData_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						ClearActivationData_result result = new ClearActivationData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						ClearActivationData_result result = new ClearActivationData_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ClearActivationData_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.ClearActivationData(resultHandler);
			}
		}

		public static class ClearProvisionData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ClearProvisionData_args, Result> {
			public ClearProvisionData() {
				super("ClearProvisionData");
			}

			public ClearProvisionData_args getEmptyArgsInstance() {
				return new ClearProvisionData_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						ClearProvisionData_result result = new ClearProvisionData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						ClearProvisionData_result result = new ClearProvisionData_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ClearProvisionData_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.ClearProvisionData(resultHandler);
			}
		}

		public static class GetEndpointList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEndpointList_args, List<Integer>> {
			public GetEndpointList() {
				super("GetEndpointList");
			}

			public GetEndpointList_args getEmptyArgsInstance() {
				return new GetEndpointList_args();
			}

			public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<Integer>>() {
					public void onComplete(List<Integer> o) {
						GetEndpointList_result result = new GetEndpointList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetEndpointList_result result = new GetEndpointList_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetEndpointList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
				iface.GetEndpointList(resultHandler);
			}
		}

		public static class GetEndpointInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEndpointInfo_args, EndpointInfoStruct> {
			public GetEndpointInfo() {
				super("GetEndpointInfo");
			}

			public GetEndpointInfo_args getEmptyArgsInstance() {
				return new GetEndpointInfo_args();
			}

			public AsyncMethodCallback<EndpointInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<EndpointInfoStruct>() {
					public void onComplete(EndpointInfoStruct o) {
						GetEndpointInfo_result result = new GetEndpointInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetEndpointInfo_result result = new GetEndpointInfo_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetEndpointInfo_args args, org.apache.thrift.async.AsyncMethodCallback<EndpointInfoStruct> resultHandler) throws TException {
				iface.GetEndpointInfo(args.LocalEpId, resultHandler);
			}
		}

		public static class SetLogLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetLogLevel_args, Result> {
			public SetLogLevel() {
				super("SetLogLevel");
			}

			public SetLogLevel_args getEmptyArgsInstance() {
				return new SetLogLevel_args();
			}

			public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Result>() {
					public void onComplete(Result o) {
						SetLogLevel_result result = new SetLogLevel_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SetLogLevel_result result = new SetLogLevel_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SetLogLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
				iface.SetLogLevel(args.log_level, args.log_control, resultHandler);
			}
		}

		public static class eAppReady<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, eAppReady_args, Void> {
			public eAppReady() {
				super("eAppReady");
			}

			public eAppReady_args getEmptyArgsInstance() {
				return new eAppReady_args();
			}

			public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						eAppReady_result result = new eAppReady_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						eAppReady_result result = new eAppReady_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, eAppReady_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
				iface.eAppReady(resultHandler);
			}
		}

		public static class getEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEvents_args, ReturnStruct> {
			public getEvents() {
				super("getEvents");
			}

			public getEvents_args getEmptyArgsInstance() {
				return new getEvents_args();
			}

			public AsyncMethodCallback<ReturnStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<ReturnStruct>() {
					public void onComplete(ReturnStruct o) {
						getEvents_result result = new getEvents_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getEvents_result result = new getEvents_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getEvents_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnStruct> resultHandler) throws TException {
				iface.getEvents(resultHandler);
			}
		}

	}

	public static class GetConfig_args
		implements org.apache.thrift.TBase<GetConfig_args, GetConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfig_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfig_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetConfig_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetConfig_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfig_args.class, metaDataMap);
		}

		public GetConfig_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetConfig_args(GetConfig_args other) {
		}

		public GetConfig_args deepCopy() {
			return new GetConfig_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetConfig_args)
				return this.equals((GetConfig_args) that);
			return false;
		}

		public boolean equals(GetConfig_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(GetConfig_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetConfig_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetConfig_argsStandardSchemeFactory implements SchemeFactory {
			public GetConfig_argsStandardScheme getScheme() {
				return new GetConfig_argsStandardScheme();
			}
		}

		private static class GetConfig_argsStandardScheme extends StandardScheme<GetConfig_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfig_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfig_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetConfig_argsTupleSchemeFactory implements SchemeFactory {
			public GetConfig_argsTupleScheme getScheme() {
				return new GetConfig_argsTupleScheme();
			}
		}

		private static class GetConfig_argsTupleScheme extends TupleScheme<GetConfig_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetConfig_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetConfig_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class GetConfig_result
		implements org.apache.thrift.TBase<GetConfig_result, GetConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfig_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfig_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetConfig_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetConfig_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfig_result.class, metaDataMap);
		}

		public GetConfig_result() {
		}

		public GetConfig_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetConfig_result(GetConfig_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetConfig_result deepCopy() {
			return new GetConfig_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public GetConfig_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetConfig_result)
				return this.equals((GetConfig_result) that);
			return false;
		}

		public boolean equals(GetConfig_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(GetConfig_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetConfig_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetConfig_resultStandardSchemeFactory implements SchemeFactory {
			public GetConfig_resultStandardScheme getScheme() {
				return new GetConfig_resultStandardScheme();
			}
		}

		private static class GetConfig_resultStandardScheme extends StandardScheme<GetConfig_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfig_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfig_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetConfig_resultTupleSchemeFactory implements SchemeFactory {
			public GetConfig_resultTupleScheme getScheme() {
				return new GetConfig_resultTupleScheme();
			}
		}

		private static class GetConfig_resultTupleScheme extends TupleScheme<GetConfig_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetConfig_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetConfig_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class Init_args implements org.apache.thrift.TBase<Init_args, Init_args._Fields>, java.io.Serializable, Cloneable, Comparable<Init_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Init_args");

		private static final org.apache.thrift.protocol.TField DEV_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("DevInfo",
			org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Init_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Init_argsTupleSchemeFactory());
		}

		public DeviceInfoStruct DevInfo; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			DEV_INFO((short) 1, "DevInfo");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // DEV_INFO
					return DEV_INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.DEV_INFO, new org.apache.thrift.meta_data.FieldMetaData("DevInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfoStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Init_args.class, metaDataMap);
		}

		public Init_args() {
		}

		public Init_args(DeviceInfoStruct DevInfo) {
			this();
			this.DevInfo = DevInfo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Init_args(Init_args other) {
			if (other.isSetDevInfo()) {
				this.DevInfo = new DeviceInfoStruct(other.DevInfo);
			}
		}

		public Init_args deepCopy() {
			return new Init_args(this);
		}

		@Override
		public void clear() {
			this.DevInfo = null;
		}

		public DeviceInfoStruct getDevInfo() {
			return this.DevInfo;
		}

		public Init_args setDevInfo(DeviceInfoStruct DevInfo) {
			this.DevInfo = DevInfo;
			return this;
		}

		public void unsetDevInfo() {
			this.DevInfo = null;
		}

		/**
		 * Returns true if field DevInfo is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetDevInfo() {
			return this.DevInfo != null;
		}

		public void setDevInfoIsSet(boolean value) {
			if (!value) {
				this.DevInfo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case DEV_INFO:
				if (value == null) {
					unsetDevInfo();
				} else {
					setDevInfo((DeviceInfoStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case DEV_INFO:
				return getDevInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case DEV_INFO:
				return isSetDevInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Init_args)
				return this.equals((Init_args) that);
			return false;
		}

		public boolean equals(Init_args that) {
			if (that == null)
				return false;

			boolean this_present_DevInfo = true && this.isSetDevInfo();
			boolean that_present_DevInfo = true && that.isSetDevInfo();
			if (this_present_DevInfo || that_present_DevInfo) {
				if (!(this_present_DevInfo && that_present_DevInfo))
					return false;
				if (!this.DevInfo.equals(that.DevInfo))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_DevInfo = true && (isSetDevInfo());
			list.add(present_DevInfo);
			if (present_DevInfo)
				list.add(DevInfo);

			return list.hashCode();
		}

		@Override
		public int compareTo(Init_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetDevInfo()).compareTo(other.isSetDevInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetDevInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DevInfo, other.DevInfo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Init_args(");
			boolean first = true;

			sb.append("DevInfo:");
			if (this.DevInfo == null) {
				sb.append("null");
			} else {
				sb.append(this.DevInfo);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (DevInfo != null) {
				DevInfo.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Init_argsStandardSchemeFactory implements SchemeFactory {
			public Init_argsStandardScheme getScheme() {
				return new Init_argsStandardScheme();
			}
		}

		private static class Init_argsStandardScheme extends StandardScheme<Init_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Init_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // DEV_INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.DevInfo = new DeviceInfoStruct();
							struct.DevInfo.read(iprot);
							struct.setDevInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Init_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.DevInfo != null) {
					oprot.writeFieldBegin(DEV_INFO_FIELD_DESC);
					struct.DevInfo.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Init_argsTupleSchemeFactory implements SchemeFactory {
			public Init_argsTupleScheme getScheme() {
				return new Init_argsTupleScheme();
			}
		}

		private static class Init_argsTupleScheme extends TupleScheme<Init_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Init_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetDevInfo()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetDevInfo()) {
					struct.DevInfo.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Init_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.DevInfo = new DeviceInfoStruct();
					struct.DevInfo.read(iprot);
					struct.setDevInfoIsSet(true);
				}
			}
		}

	}

	public static class Init_result
		implements org.apache.thrift.TBase<Init_result, Init_result._Fields>, java.io.Serializable, Cloneable, Comparable<Init_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Init_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Init_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Init_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Init_result.class, metaDataMap);
		}

		public Init_result() {
		}

		public Init_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Init_result(Init_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public Init_result deepCopy() {
			return new Init_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public Init_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Init_result)
				return this.equals((Init_result) that);
			return false;
		}

		public boolean equals(Init_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(Init_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Init_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Init_resultStandardSchemeFactory implements SchemeFactory {
			public Init_resultStandardScheme getScheme() {
				return new Init_resultStandardScheme();
			}
		}

		private static class Init_resultStandardScheme extends StandardScheme<Init_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Init_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Init_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Init_resultTupleSchemeFactory implements SchemeFactory {
			public Init_resultTupleScheme getScheme() {
				return new Init_resultTupleScheme();
			}
		}

		private static class Init_resultTupleScheme extends TupleScheme<Init_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Init_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Init_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetAgentLibVersion_args implements org.apache.thrift.TBase<GetAgentLibVersion_args, GetAgentLibVersion_args._Fields>, java.io.Serializable,
		Cloneable, Comparable<GetAgentLibVersion_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAgentLibVersion_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetAgentLibVersion_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetAgentLibVersion_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAgentLibVersion_args.class, metaDataMap);
		}

		public GetAgentLibVersion_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetAgentLibVersion_args(GetAgentLibVersion_args other) {
		}

		public GetAgentLibVersion_args deepCopy() {
			return new GetAgentLibVersion_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetAgentLibVersion_args)
				return this.equals((GetAgentLibVersion_args) that);
			return false;
		}

		public boolean equals(GetAgentLibVersion_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(GetAgentLibVersion_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetAgentLibVersion_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetAgentLibVersion_argsStandardSchemeFactory implements SchemeFactory {
			public GetAgentLibVersion_argsStandardScheme getScheme() {
				return new GetAgentLibVersion_argsStandardScheme();
			}
		}

		private static class GetAgentLibVersion_argsStandardScheme extends StandardScheme<GetAgentLibVersion_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetAgentLibVersion_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetAgentLibVersion_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetAgentLibVersion_argsTupleSchemeFactory implements SchemeFactory {
			public GetAgentLibVersion_argsTupleScheme getScheme() {
				return new GetAgentLibVersion_argsTupleScheme();
			}
		}

		private static class GetAgentLibVersion_argsTupleScheme extends TupleScheme<GetAgentLibVersion_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetAgentLibVersion_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetAgentLibVersion_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class GetAgentLibVersion_result implements org.apache.thrift.TBase<GetAgentLibVersion_result, GetAgentLibVersion_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<GetAgentLibVersion_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAgentLibVersion_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetAgentLibVersion_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetAgentLibVersion_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAgentLibVersion_result.class, metaDataMap);
		}

		public GetAgentLibVersion_result() {
		}

		public GetAgentLibVersion_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetAgentLibVersion_result(GetAgentLibVersion_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetAgentLibVersion_result deepCopy() {
			return new GetAgentLibVersion_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetAgentLibVersion_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetAgentLibVersion_result)
				return this.equals((GetAgentLibVersion_result) that);
			return false;
		}

		public boolean equals(GetAgentLibVersion_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetAgentLibVersion_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetAgentLibVersion_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetAgentLibVersion_resultStandardSchemeFactory implements SchemeFactory {
			public GetAgentLibVersion_resultStandardScheme getScheme() {
				return new GetAgentLibVersion_resultStandardScheme();
			}
		}

		private static class GetAgentLibVersion_resultStandardScheme extends StandardScheme<GetAgentLibVersion_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetAgentLibVersion_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetAgentLibVersion_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetAgentLibVersion_resultTupleSchemeFactory implements SchemeFactory {
			public GetAgentLibVersion_resultTupleScheme getScheme() {
				return new GetAgentLibVersion_resultTupleScheme();
			}
		}

		private static class GetAgentLibVersion_resultTupleScheme extends TupleScheme<GetAgentLibVersion_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetAgentLibVersion_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetAgentLibVersion_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetConfigStatus_args
		implements org.apache.thrift.TBase<GetConfigStatus_args, GetConfigStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfigStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigStatus_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetConfigStatus_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetConfigStatus_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigStatus_args.class, metaDataMap);
		}

		public GetConfigStatus_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetConfigStatus_args(GetConfigStatus_args other) {
		}

		public GetConfigStatus_args deepCopy() {
			return new GetConfigStatus_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetConfigStatus_args)
				return this.equals((GetConfigStatus_args) that);
			return false;
		}

		public boolean equals(GetConfigStatus_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(GetConfigStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetConfigStatus_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetConfigStatus_argsStandardSchemeFactory implements SchemeFactory {
			public GetConfigStatus_argsStandardScheme getScheme() {
				return new GetConfigStatus_argsStandardScheme();
			}
		}

		private static class GetConfigStatus_argsStandardScheme extends StandardScheme<GetConfigStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigStatus_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigStatus_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetConfigStatus_argsTupleSchemeFactory implements SchemeFactory {
			public GetConfigStatus_argsTupleScheme getScheme() {
				return new GetConfigStatus_argsTupleScheme();
			}
		}

		private static class GetConfigStatus_argsTupleScheme extends TupleScheme<GetConfigStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigStatus_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigStatus_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class GetConfigStatus_result implements org.apache.thrift.TBase<GetConfigStatus_result, GetConfigStatus_result._Fields>, java.io.Serializable,
		Cloneable, Comparable<GetConfigStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetConfigStatus_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetConfigStatus_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigStatus_result.class, metaDataMap);
		}

		public GetConfigStatus_result() {
		}

		public GetConfigStatus_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetConfigStatus_result(GetConfigStatus_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetConfigStatus_result deepCopy() {
			return new GetConfigStatus_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public GetConfigStatus_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetConfigStatus_result)
				return this.equals((GetConfigStatus_result) that);
			return false;
		}

		public boolean equals(GetConfigStatus_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(GetConfigStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetConfigStatus_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetConfigStatus_resultStandardSchemeFactory implements SchemeFactory {
			public GetConfigStatus_resultStandardScheme getScheme() {
				return new GetConfigStatus_resultStandardScheme();
			}
		}

		private static class GetConfigStatus_resultStandardScheme extends StandardScheme<GetConfigStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigStatus_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigStatus_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetConfigStatus_resultTupleSchemeFactory implements SchemeFactory {
			public GetConfigStatus_resultTupleScheme getScheme() {
				return new GetConfigStatus_resultTupleScheme();
			}
		}

		private static class GetConfigStatus_resultTupleScheme extends TupleScheme<GetConfigStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigStatus_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigStatus_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetActivationStatus_args implements org.apache.thrift.TBase<GetActivationStatus_args, GetActivationStatus_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<GetActivationStatus_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetActivationStatus_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetActivationStatus_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetActivationStatus_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetActivationStatus_args.class, metaDataMap);
		}

		public GetActivationStatus_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetActivationStatus_args(GetActivationStatus_args other) {
		}

		public GetActivationStatus_args deepCopy() {
			return new GetActivationStatus_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetActivationStatus_args)
				return this.equals((GetActivationStatus_args) that);
			return false;
		}

		public boolean equals(GetActivationStatus_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(GetActivationStatus_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetActivationStatus_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetActivationStatus_argsStandardSchemeFactory implements SchemeFactory {
			public GetActivationStatus_argsStandardScheme getScheme() {
				return new GetActivationStatus_argsStandardScheme();
			}
		}

		private static class GetActivationStatus_argsStandardScheme extends StandardScheme<GetActivationStatus_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetActivationStatus_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetActivationStatus_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetActivationStatus_argsTupleSchemeFactory implements SchemeFactory {
			public GetActivationStatus_argsTupleScheme getScheme() {
				return new GetActivationStatus_argsTupleScheme();
			}
		}

		private static class GetActivationStatus_argsTupleScheme extends TupleScheme<GetActivationStatus_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetActivationStatus_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetActivationStatus_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class GetActivationStatus_result implements org.apache.thrift.TBase<GetActivationStatus_result, GetActivationStatus_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<GetActivationStatus_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetActivationStatus_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetActivationStatus_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetActivationStatus_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetActivationStatus_result.class, metaDataMap);
		}

		public GetActivationStatus_result() {
		}

		public GetActivationStatus_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetActivationStatus_result(GetActivationStatus_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetActivationStatus_result deepCopy() {
			return new GetActivationStatus_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public GetActivationStatus_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetActivationStatus_result)
				return this.equals((GetActivationStatus_result) that);
			return false;
		}

		public boolean equals(GetActivationStatus_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(GetActivationStatus_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetActivationStatus_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetActivationStatus_resultStandardSchemeFactory implements SchemeFactory {
			public GetActivationStatus_resultStandardScheme getScheme() {
				return new GetActivationStatus_resultStandardScheme();
			}
		}

		private static class GetActivationStatus_resultStandardScheme extends StandardScheme<GetActivationStatus_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetActivationStatus_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetActivationStatus_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetActivationStatus_resultTupleSchemeFactory implements SchemeFactory {
			public GetActivationStatus_resultTupleScheme getScheme() {
				return new GetActivationStatus_resultTupleScheme();
			}
		}

		private static class GetActivationStatus_resultTupleScheme extends TupleScheme<GetActivationStatus_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetActivationStatus_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetActivationStatus_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class Activate_args
		implements org.apache.thrift.TBase<Activate_args, Activate_args._Fields>, java.io.Serializable, Cloneable, Comparable<Activate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Activate_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Activate_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Activate_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Activate_args.class, metaDataMap);
		}

		public Activate_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Activate_args(Activate_args other) {
		}

		public Activate_args deepCopy() {
			return new Activate_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Activate_args)
				return this.equals((Activate_args) that);
			return false;
		}

		public boolean equals(Activate_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(Activate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Activate_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Activate_argsStandardSchemeFactory implements SchemeFactory {
			public Activate_argsStandardScheme getScheme() {
				return new Activate_argsStandardScheme();
			}
		}

		private static class Activate_argsStandardScheme extends StandardScheme<Activate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Activate_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Activate_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Activate_argsTupleSchemeFactory implements SchemeFactory {
			public Activate_argsTupleScheme getScheme() {
				return new Activate_argsTupleScheme();
			}
		}

		private static class Activate_argsTupleScheme extends TupleScheme<Activate_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Activate_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Activate_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class Activate_result
		implements org.apache.thrift.TBase<Activate_result, Activate_result._Fields>, java.io.Serializable, Cloneable, Comparable<Activate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Activate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Activate_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Activate_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Activate_result.class, metaDataMap);
		}

		public Activate_result() {
		}

		public Activate_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Activate_result(Activate_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public Activate_result deepCopy() {
			return new Activate_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public Activate_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Activate_result)
				return this.equals((Activate_result) that);
			return false;
		}

		public boolean equals(Activate_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(Activate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Activate_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Activate_resultStandardSchemeFactory implements SchemeFactory {
			public Activate_resultStandardScheme getScheme() {
				return new Activate_resultStandardScheme();
			}
		}

		private static class Activate_resultStandardScheme extends StandardScheme<Activate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Activate_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Activate_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Activate_resultTupleSchemeFactory implements SchemeFactory {
			public Activate_resultTupleScheme getScheme() {
				return new Activate_resultTupleScheme();
			}
		}

		private static class Activate_resultTupleScheme extends TupleScheme<Activate_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Activate_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Activate_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class ForceDeactivate_args
		implements org.apache.thrift.TBase<ForceDeactivate_args, ForceDeactivate_args._Fields>, java.io.Serializable, Cloneable, Comparable<ForceDeactivate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForceDeactivate_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ForceDeactivate_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ForceDeactivate_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForceDeactivate_args.class, metaDataMap);
		}

		public ForceDeactivate_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ForceDeactivate_args(ForceDeactivate_args other) {
		}

		public ForceDeactivate_args deepCopy() {
			return new ForceDeactivate_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ForceDeactivate_args)
				return this.equals((ForceDeactivate_args) that);
			return false;
		}

		public boolean equals(ForceDeactivate_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(ForceDeactivate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ForceDeactivate_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ForceDeactivate_argsStandardSchemeFactory implements SchemeFactory {
			public ForceDeactivate_argsStandardScheme getScheme() {
				return new ForceDeactivate_argsStandardScheme();
			}
		}

		private static class ForceDeactivate_argsStandardScheme extends StandardScheme<ForceDeactivate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ForceDeactivate_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ForceDeactivate_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ForceDeactivate_argsTupleSchemeFactory implements SchemeFactory {
			public ForceDeactivate_argsTupleScheme getScheme() {
				return new ForceDeactivate_argsTupleScheme();
			}
		}

		private static class ForceDeactivate_argsTupleScheme extends TupleScheme<ForceDeactivate_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ForceDeactivate_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ForceDeactivate_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class ForceDeactivate_result implements org.apache.thrift.TBase<ForceDeactivate_result, ForceDeactivate_result._Fields>, java.io.Serializable,
		Cloneable, Comparable<ForceDeactivate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForceDeactivate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ForceDeactivate_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ForceDeactivate_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForceDeactivate_result.class, metaDataMap);
		}

		public ForceDeactivate_result() {
		}

		public ForceDeactivate_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ForceDeactivate_result(ForceDeactivate_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public ForceDeactivate_result deepCopy() {
			return new ForceDeactivate_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public ForceDeactivate_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ForceDeactivate_result)
				return this.equals((ForceDeactivate_result) that);
			return false;
		}

		public boolean equals(ForceDeactivate_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(ForceDeactivate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ForceDeactivate_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ForceDeactivate_resultStandardSchemeFactory implements SchemeFactory {
			public ForceDeactivate_resultStandardScheme getScheme() {
				return new ForceDeactivate_resultStandardScheme();
			}
		}

		private static class ForceDeactivate_resultStandardScheme extends StandardScheme<ForceDeactivate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ForceDeactivate_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ForceDeactivate_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ForceDeactivate_resultTupleSchemeFactory implements SchemeFactory {
			public ForceDeactivate_resultTupleScheme getScheme() {
				return new ForceDeactivate_resultTupleScheme();
			}
		}

		private static class ForceDeactivate_resultTupleScheme extends TupleScheme<ForceDeactivate_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ForceDeactivate_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ForceDeactivate_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class Sync_args implements org.apache.thrift.TBase<Sync_args, Sync_args._Fields>, java.io.Serializable, Cloneable, Comparable<Sync_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sync_args");

		private static final org.apache.thrift.protocol.TField SYNC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_type",
			org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Sync_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Sync_argsTupleSchemeFactory());
		}

		public int sync_type; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SYNC_TYPE((short) 1, "sync_type");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SYNC_TYPE
					return SYNC_TYPE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SYNC_TYPE_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SYNC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sync_type", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sync_args.class, metaDataMap);
		}

		public Sync_args() {
		}

		public Sync_args(int sync_type) {
			this();
			this.sync_type = sync_type;
			setSync_typeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Sync_args(Sync_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.sync_type = other.sync_type;
		}

		public Sync_args deepCopy() {
			return new Sync_args(this);
		}

		@Override
		public void clear() {
			setSync_typeIsSet(false);
			this.sync_type = 0;
		}

		public int getSync_type() {
			return this.sync_type;
		}

		public Sync_args setSync_type(int sync_type) {
			this.sync_type = sync_type;
			setSync_typeIsSet(true);
			return this;
		}

		public void unsetSync_type() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNC_TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field sync_type is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSync_type() {
			return EncodingUtils.testBit(__isset_bitfield, __SYNC_TYPE_ISSET_ID);
		}

		public void setSync_typeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNC_TYPE_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SYNC_TYPE:
				if (value == null) {
					unsetSync_type();
				} else {
					setSync_type((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SYNC_TYPE:
				return getSync_type();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SYNC_TYPE:
				return isSetSync_type();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Sync_args)
				return this.equals((Sync_args) that);
			return false;
		}

		public boolean equals(Sync_args that) {
			if (that == null)
				return false;

			boolean this_present_sync_type = true;
			boolean that_present_sync_type = true;
			if (this_present_sync_type || that_present_sync_type) {
				if (!(this_present_sync_type && that_present_sync_type))
					return false;
				if (this.sync_type != that.sync_type)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sync_type = true;
			list.add(present_sync_type);
			if (present_sync_type)
				list.add(sync_type);

			return list.hashCode();
		}

		@Override
		public int compareTo(Sync_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSync_type()).compareTo(other.isSetSync_type());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSync_type()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_type, other.sync_type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Sync_args(");
			boolean first = true;

			sb.append("sync_type:");
			sb.append(this.sync_type);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Sync_argsStandardSchemeFactory implements SchemeFactory {
			public Sync_argsStandardScheme getScheme() {
				return new Sync_argsStandardScheme();
			}
		}

		private static class Sync_argsStandardScheme extends StandardScheme<Sync_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Sync_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SYNC_TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.sync_type = iprot.readI32();
							struct.setSync_typeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Sync_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SYNC_TYPE_FIELD_DESC);
				oprot.writeI32(struct.sync_type);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Sync_argsTupleSchemeFactory implements SchemeFactory {
			public Sync_argsTupleScheme getScheme() {
				return new Sync_argsTupleScheme();
			}
		}

		private static class Sync_argsTupleScheme extends TupleScheme<Sync_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Sync_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSync_type()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSync_type()) {
					oprot.writeI32(struct.sync_type);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Sync_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.sync_type = iprot.readI32();
					struct.setSync_typeIsSet(true);
				}
			}
		}

	}

	public static class Sync_result
		implements org.apache.thrift.TBase<Sync_result, Sync_result._Fields>, java.io.Serializable, Cloneable, Comparable<Sync_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sync_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Sync_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Sync_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sync_result.class, metaDataMap);
		}

		public Sync_result() {
		}

		public Sync_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Sync_result(Sync_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public Sync_result deepCopy() {
			return new Sync_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public Sync_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Sync_result)
				return this.equals((Sync_result) that);
			return false;
		}

		public boolean equals(Sync_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(Sync_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Sync_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Sync_resultStandardSchemeFactory implements SchemeFactory {
			public Sync_resultStandardScheme getScheme() {
				return new Sync_resultStandardScheme();
			}
		}

		private static class Sync_resultStandardScheme extends StandardScheme<Sync_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Sync_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Sync_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Sync_resultTupleSchemeFactory implements SchemeFactory {
			public Sync_resultTupleScheme getScheme() {
				return new Sync_resultTupleScheme();
			}
		}

		private static class Sync_resultTupleScheme extends TupleScheme<Sync_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Sync_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Sync_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class Connect_args
		implements org.apache.thrift.TBase<Connect_args, Connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<Connect_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Connect_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Connect_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Connect_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Connect_args.class, metaDataMap);
		}

		public Connect_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Connect_args(Connect_args other) {
		}

		public Connect_args deepCopy() {
			return new Connect_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Connect_args)
				return this.equals((Connect_args) that);
			return false;
		}

		public boolean equals(Connect_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(Connect_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Connect_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Connect_argsStandardSchemeFactory implements SchemeFactory {
			public Connect_argsStandardScheme getScheme() {
				return new Connect_argsStandardScheme();
			}
		}

		private static class Connect_argsStandardScheme extends StandardScheme<Connect_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Connect_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Connect_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Connect_argsTupleSchemeFactory implements SchemeFactory {
			public Connect_argsTupleScheme getScheme() {
				return new Connect_argsTupleScheme();
			}
		}

		private static class Connect_argsTupleScheme extends TupleScheme<Connect_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Connect_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Connect_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class Connect_result
		implements org.apache.thrift.TBase<Connect_result, Connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<Connect_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Connect_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Connect_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Connect_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Connect_result.class, metaDataMap);
		}

		public Connect_result() {
		}

		public Connect_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Connect_result(Connect_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public Connect_result deepCopy() {
			return new Connect_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public Connect_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Connect_result)
				return this.equals((Connect_result) that);
			return false;
		}

		public boolean equals(Connect_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(Connect_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Connect_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Connect_resultStandardSchemeFactory implements SchemeFactory {
			public Connect_resultStandardScheme getScheme() {
				return new Connect_resultStandardScheme();
			}
		}

		private static class Connect_resultStandardScheme extends StandardScheme<Connect_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Connect_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Connect_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Connect_resultTupleSchemeFactory implements SchemeFactory {
			public Connect_resultTupleScheme getScheme() {
				return new Connect_resultTupleScheme();
			}
		}

		private static class Connect_resultTupleScheme extends TupleScheme<Connect_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Connect_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Connect_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class Disconnect_args
		implements org.apache.thrift.TBase<Disconnect_args, Disconnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<Disconnect_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Disconnect_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Disconnect_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Disconnect_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Disconnect_args.class, metaDataMap);
		}

		public Disconnect_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Disconnect_args(Disconnect_args other) {
		}

		public Disconnect_args deepCopy() {
			return new Disconnect_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Disconnect_args)
				return this.equals((Disconnect_args) that);
			return false;
		}

		public boolean equals(Disconnect_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(Disconnect_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Disconnect_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Disconnect_argsStandardSchemeFactory implements SchemeFactory {
			public Disconnect_argsStandardScheme getScheme() {
				return new Disconnect_argsStandardScheme();
			}
		}

		private static class Disconnect_argsStandardScheme extends StandardScheme<Disconnect_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Disconnect_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Disconnect_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Disconnect_argsTupleSchemeFactory implements SchemeFactory {
			public Disconnect_argsTupleScheme getScheme() {
				return new Disconnect_argsTupleScheme();
			}
		}

		private static class Disconnect_argsTupleScheme extends TupleScheme<Disconnect_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Disconnect_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Disconnect_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class Disconnect_result
		implements org.apache.thrift.TBase<Disconnect_result, Disconnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<Disconnect_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Disconnect_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Disconnect_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Disconnect_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Disconnect_result.class, metaDataMap);
		}

		public Disconnect_result() {
		}

		public Disconnect_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Disconnect_result(Disconnect_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public Disconnect_result deepCopy() {
			return new Disconnect_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public Disconnect_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Disconnect_result)
				return this.equals((Disconnect_result) that);
			return false;
		}

		public boolean equals(Disconnect_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(Disconnect_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Disconnect_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Disconnect_resultStandardSchemeFactory implements SchemeFactory {
			public Disconnect_resultStandardScheme getScheme() {
				return new Disconnect_resultStandardScheme();
			}
		}

		private static class Disconnect_resultStandardScheme extends StandardScheme<Disconnect_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Disconnect_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Disconnect_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Disconnect_resultTupleSchemeFactory implements SchemeFactory {
			public Disconnect_resultTupleScheme getScheme() {
				return new Disconnect_resultTupleScheme();
			}
		}

		private static class Disconnect_resultTupleScheme extends TupleScheme<Disconnect_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Disconnect_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Disconnect_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendAttributeMessage_args implements org.apache.thrift.TBase<SendAttributeMessage_args, SendAttributeMessage_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendAttributeMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAttributeMessage_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField LOCAL_ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalAttrId",
			org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("Value",
			org.apache.thrift.protocol.TType.STRUCT, (short) 3);
		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority",
			org.apache.thrift.protocol.TType.I32, (short) 4);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendAttributeMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendAttributeMessage_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required
		public int LocalAttrId; // required
		public DataElementStruct Value; // required
		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId"), LOCAL_ATTR_ID((short) 2, "LocalAttrId"), VALUE((short) 3, "Value"), PRIORITY((short) 4, "priority");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				case 2: // LOCAL_ATTR_ID
					return LOCAL_ATTR_ID;
				case 3: // VALUE
					return VALUE;
				case 4: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private static final int __LOCALATTRID_ISSET_ID = 1;
		private static final int __PRIORITY_ISSET_ID = 2;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.LOCAL_ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalAttrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("Value", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataElementStruct.class)));
			tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAttributeMessage_args.class, metaDataMap);
		}

		public SendAttributeMessage_args() {
		}

		public SendAttributeMessage_args(int LocalEpId, int LocalAttrId, DataElementStruct Value, int priority) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			this.LocalAttrId = LocalAttrId;
			setLocalAttrIdIsSet(true);
			this.Value = Value;
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendAttributeMessage_args(SendAttributeMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
			this.LocalAttrId = other.LocalAttrId;
			if (other.isSetValue()) {
				this.Value = new DataElementStruct(other.Value);
			}
			this.priority = other.priority;
		}

		public SendAttributeMessage_args deepCopy() {
			return new SendAttributeMessage_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
			setLocalAttrIdIsSet(false);
			this.LocalAttrId = 0;
			this.Value = null;
			setPriorityIsSet(false);
			this.priority = 0;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public SendAttributeMessage_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public int getLocalAttrId() {
			return this.LocalAttrId;
		}

		public SendAttributeMessage_args setLocalAttrId(int LocalAttrId) {
			this.LocalAttrId = LocalAttrId;
			setLocalAttrIdIsSet(true);
			return this;
		}

		public void unsetLocalAttrId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALATTRID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalAttrId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLocalAttrId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALATTRID_ISSET_ID);
		}

		public void setLocalAttrIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALATTRID_ISSET_ID, value);
		}

		public DataElementStruct getValue() {
			return this.Value;
		}

		public SendAttributeMessage_args setValue(DataElementStruct Value) {
			this.Value = Value;
			return this;
		}

		public void unsetValue() {
			this.Value = null;
		}

		/**
		 * Returns true if field Value is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetValue() {
			return this.Value != null;
		}

		public void setValueIsSet(boolean value) {
			if (!value) {
				this.Value = null;
			}
		}

		public int getPriority() {
			return this.priority;
		}

		public SendAttributeMessage_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			case LOCAL_ATTR_ID:
				if (value == null) {
					unsetLocalAttrId();
				} else {
					setLocalAttrId((Integer) value);
				}
				break;

			case VALUE:
				if (value == null) {
					unsetValue();
				} else {
					setValue((DataElementStruct) value);
				}
				break;

			case PRIORITY:
				if (value == null) {
					unsetPriority();
				} else {
					setPriority((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			case LOCAL_ATTR_ID:
				return getLocalAttrId();

			case VALUE:
				return getValue();

			case PRIORITY:
				return getPriority();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			case LOCAL_ATTR_ID:
				return isSetLocalAttrId();
			case VALUE:
				return isSetValue();
			case PRIORITY:
				return isSetPriority();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendAttributeMessage_args)
				return this.equals((SendAttributeMessage_args) that);
			return false;
		}

		public boolean equals(SendAttributeMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			boolean this_present_LocalAttrId = true;
			boolean that_present_LocalAttrId = true;
			if (this_present_LocalAttrId || that_present_LocalAttrId) {
				if (!(this_present_LocalAttrId && that_present_LocalAttrId))
					return false;
				if (this.LocalAttrId != that.LocalAttrId)
					return false;
			}

			boolean this_present_Value = true && this.isSetValue();
			boolean that_present_Value = true && that.isSetValue();
			if (this_present_Value || that_present_Value) {
				if (!(this_present_Value && that_present_Value))
					return false;
				if (!this.Value.equals(that.Value))
					return false;
			}

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			boolean present_LocalAttrId = true;
			list.add(present_LocalAttrId);
			if (present_LocalAttrId)
				list.add(LocalAttrId);

			boolean present_Value = true && (isSetValue());
			list.add(present_Value);
			if (present_Value)
				list.add(Value);

			boolean present_priority = true;
			list.add(present_priority);
			if (present_priority)
				list.add(priority);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendAttributeMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetLocalAttrId()).compareTo(other.isSetLocalAttrId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalAttrId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalAttrId, other.LocalAttrId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetValue()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Value, other.Value);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendAttributeMessage_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("LocalAttrId:");
			sb.append(this.LocalAttrId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("Value:");
			if (this.Value == null) {
				sb.append("null");
			} else {
				sb.append(this.Value);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (Value != null) {
				Value.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendAttributeMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendAttributeMessage_argsStandardScheme getScheme() {
				return new SendAttributeMessage_argsStandardScheme();
			}
		}

		private static class SendAttributeMessage_argsStandardScheme extends StandardScheme<SendAttributeMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendAttributeMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // LOCAL_ATTR_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalAttrId = iprot.readI32();
							struct.setLocalAttrIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // VALUE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.Value = new DataElementStruct();
							struct.Value.read(iprot);
							struct.setValueIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendAttributeMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(LOCAL_ATTR_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalAttrId);
				oprot.writeFieldEnd();
				if (struct.Value != null) {
					oprot.writeFieldBegin(VALUE_FIELD_DESC);
					struct.Value.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendAttributeMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendAttributeMessage_argsTupleScheme getScheme() {
				return new SendAttributeMessage_argsTupleScheme();
			}
		}

		private static class SendAttributeMessage_argsTupleScheme extends TupleScheme<SendAttributeMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendAttributeMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				if (struct.isSetLocalAttrId()) {
					optionals.set(1);
				}
				if (struct.isSetValue()) {
					optionals.set(2);
				}
				if (struct.isSetPriority()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
				if (struct.isSetLocalAttrId()) {
					oprot.writeI32(struct.LocalAttrId);
				}
				if (struct.isSetValue()) {
					struct.Value.write(oprot);
				}
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendAttributeMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.LocalAttrId = iprot.readI32();
					struct.setLocalAttrIdIsSet(true);
				}
				if (incoming.get(2)) {
					struct.Value = new DataElementStruct();
					struct.Value.read(iprot);
					struct.setValueIsSet(true);
				}
				if (incoming.get(3)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}
		}

	}

	public static class SendAttributeMessage_result implements org.apache.thrift.TBase<SendAttributeMessage_result, SendAttributeMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendAttributeMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAttributeMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendAttributeMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendAttributeMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAttributeMessage_result.class, metaDataMap);
		}

		public SendAttributeMessage_result() {
		}

		public SendAttributeMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendAttributeMessage_result(SendAttributeMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendAttributeMessage_result deepCopy() {
			return new SendAttributeMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendAttributeMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendAttributeMessage_result)
				return this.equals((SendAttributeMessage_result) that);
			return false;
		}

		public boolean equals(SendAttributeMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendAttributeMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendAttributeMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendAttributeMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendAttributeMessage_resultStandardScheme getScheme() {
				return new SendAttributeMessage_resultStandardScheme();
			}
		}

		private static class SendAttributeMessage_resultStandardScheme extends StandardScheme<SendAttributeMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendAttributeMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendAttributeMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendAttributeMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendAttributeMessage_resultTupleScheme getScheme() {
				return new SendAttributeMessage_resultTupleScheme();
			}
		}

		private static class SendAttributeMessage_resultTupleScheme extends TupleScheme<SendAttributeMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendAttributeMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendAttributeMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendSettingMessage_args implements org.apache.thrift.TBase<SendSettingMessage_args, SendSettingMessage_args._Fields>, java.io.Serializable,
		Cloneable, Comparable<SendSettingMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendSettingMessage_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SETTING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SettingId",
			org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("Value",
			org.apache.thrift.protocol.TType.STRUCT, (short) 3);
		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority",
			org.apache.thrift.protocol.TType.I32, (short) 4);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendSettingMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendSettingMessage_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required
		public int SettingId; // required
		public DataElementStruct Value; // required
		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId"), SETTING_ID((short) 2, "SettingId"), VALUE((short) 3, "Value"), PRIORITY((short) 4, "priority");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				case 2: // SETTING_ID
					return SETTING_ID;
				case 3: // VALUE
					return VALUE;
				case 4: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private static final int __SETTINGID_ISSET_ID = 1;
		private static final int __PRIORITY_ISSET_ID = 2;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SETTING_ID, new org.apache.thrift.meta_data.FieldMetaData("SettingId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("Value", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataElementStruct.class)));
			tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendSettingMessage_args.class, metaDataMap);
		}

		public SendSettingMessage_args() {
		}

		public SendSettingMessage_args(int LocalEpId, int SettingId, DataElementStruct Value, int priority) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			this.SettingId = SettingId;
			setSettingIdIsSet(true);
			this.Value = Value;
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendSettingMessage_args(SendSettingMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
			this.SettingId = other.SettingId;
			if (other.isSetValue()) {
				this.Value = new DataElementStruct(other.Value);
			}
			this.priority = other.priority;
		}

		public SendSettingMessage_args deepCopy() {
			return new SendSettingMessage_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
			setSettingIdIsSet(false);
			this.SettingId = 0;
			this.Value = null;
			setPriorityIsSet(false);
			this.priority = 0;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public SendSettingMessage_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public int getSettingId() {
			return this.SettingId;
		}

		public SendSettingMessage_args setSettingId(int SettingId) {
			this.SettingId = SettingId;
			setSettingIdIsSet(true);
			return this;
		}

		public void unsetSettingId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTINGID_ISSET_ID);
		}

		/**
		 * Returns true if field SettingId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSettingId() {
			return EncodingUtils.testBit(__isset_bitfield, __SETTINGID_ISSET_ID);
		}

		public void setSettingIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTINGID_ISSET_ID, value);
		}

		public DataElementStruct getValue() {
			return this.Value;
		}

		public SendSettingMessage_args setValue(DataElementStruct Value) {
			this.Value = Value;
			return this;
		}

		public void unsetValue() {
			this.Value = null;
		}

		/**
		 * Returns true if field Value is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetValue() {
			return this.Value != null;
		}

		public void setValueIsSet(boolean value) {
			if (!value) {
				this.Value = null;
			}
		}

		public int getPriority() {
			return this.priority;
		}

		public SendSettingMessage_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			case SETTING_ID:
				if (value == null) {
					unsetSettingId();
				} else {
					setSettingId((Integer) value);
				}
				break;

			case VALUE:
				if (value == null) {
					unsetValue();
				} else {
					setValue((DataElementStruct) value);
				}
				break;

			case PRIORITY:
				if (value == null) {
					unsetPriority();
				} else {
					setPriority((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			case SETTING_ID:
				return getSettingId();

			case VALUE:
				return getValue();

			case PRIORITY:
				return getPriority();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			case SETTING_ID:
				return isSetSettingId();
			case VALUE:
				return isSetValue();
			case PRIORITY:
				return isSetPriority();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendSettingMessage_args)
				return this.equals((SendSettingMessage_args) that);
			return false;
		}

		public boolean equals(SendSettingMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			boolean this_present_SettingId = true;
			boolean that_present_SettingId = true;
			if (this_present_SettingId || that_present_SettingId) {
				if (!(this_present_SettingId && that_present_SettingId))
					return false;
				if (this.SettingId != that.SettingId)
					return false;
			}

			boolean this_present_Value = true && this.isSetValue();
			boolean that_present_Value = true && that.isSetValue();
			if (this_present_Value || that_present_Value) {
				if (!(this_present_Value && that_present_Value))
					return false;
				if (!this.Value.equals(that.Value))
					return false;
			}

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			boolean present_SettingId = true;
			list.add(present_SettingId);
			if (present_SettingId)
				list.add(SettingId);

			boolean present_Value = true && (isSetValue());
			list.add(present_Value);
			if (present_Value)
				list.add(Value);

			boolean present_priority = true;
			list.add(present_priority);
			if (present_priority)
				list.add(priority);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendSettingMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSettingId()).compareTo(other.isSetSettingId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSettingId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SettingId, other.SettingId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetValue()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Value, other.Value);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendSettingMessage_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("SettingId:");
			sb.append(this.SettingId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("Value:");
			if (this.Value == null) {
				sb.append("null");
			} else {
				sb.append(this.Value);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (Value != null) {
				Value.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendSettingMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendSettingMessage_argsStandardScheme getScheme() {
				return new SendSettingMessage_argsStandardScheme();
			}
		}

		private static class SendSettingMessage_argsStandardScheme extends StandardScheme<SendSettingMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendSettingMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SETTING_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.SettingId = iprot.readI32();
							struct.setSettingIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // VALUE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.Value = new DataElementStruct();
							struct.Value.read(iprot);
							struct.setValueIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendSettingMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(SETTING_ID_FIELD_DESC);
				oprot.writeI32(struct.SettingId);
				oprot.writeFieldEnd();
				if (struct.Value != null) {
					oprot.writeFieldBegin(VALUE_FIELD_DESC);
					struct.Value.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendSettingMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendSettingMessage_argsTupleScheme getScheme() {
				return new SendSettingMessage_argsTupleScheme();
			}
		}

		private static class SendSettingMessage_argsTupleScheme extends TupleScheme<SendSettingMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendSettingMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				if (struct.isSetSettingId()) {
					optionals.set(1);
				}
				if (struct.isSetValue()) {
					optionals.set(2);
				}
				if (struct.isSetPriority()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
				if (struct.isSetSettingId()) {
					oprot.writeI32(struct.SettingId);
				}
				if (struct.isSetValue()) {
					struct.Value.write(oprot);
				}
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendSettingMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.SettingId = iprot.readI32();
					struct.setSettingIdIsSet(true);
				}
				if (incoming.get(2)) {
					struct.Value = new DataElementStruct();
					struct.Value.read(iprot);
					struct.setValueIsSet(true);
				}
				if (incoming.get(3)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}
		}

	}

	public static class SendSettingMessage_result implements org.apache.thrift.TBase<SendSettingMessage_result, SendSettingMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendSettingMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendSettingMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendSettingMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendSettingMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendSettingMessage_result.class, metaDataMap);
		}

		public SendSettingMessage_result() {
		}

		public SendSettingMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendSettingMessage_result(SendSettingMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendSettingMessage_result deepCopy() {
			return new SendSettingMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendSettingMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendSettingMessage_result)
				return this.equals((SendSettingMessage_result) that);
			return false;
		}

		public boolean equals(SendSettingMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendSettingMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendSettingMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendSettingMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendSettingMessage_resultStandardScheme getScheme() {
				return new SendSettingMessage_resultStandardScheme();
			}
		}

		private static class SendSettingMessage_resultStandardScheme extends StandardScheme<SendSettingMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendSettingMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendSettingMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendSettingMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendSettingMessage_resultTupleScheme getScheme() {
				return new SendSettingMessage_resultTupleScheme();
			}
		}

		private static class SendSettingMessage_resultTupleScheme extends TupleScheme<SendSettingMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendSettingMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendSettingMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class InitEndpointMessage_args implements org.apache.thrift.TBase<InitEndpointMessage_args, InitEndpointMessage_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<InitEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitEndpointMessage_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new InitEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new InitEndpointMessage_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitEndpointMessage_args.class, metaDataMap);
		}

		public InitEndpointMessage_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public InitEndpointMessage_args(InitEndpointMessage_args other) {
		}

		public InitEndpointMessage_args deepCopy() {
			return new InitEndpointMessage_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof InitEndpointMessage_args)
				return this.equals((InitEndpointMessage_args) that);
			return false;
		}

		public boolean equals(InitEndpointMessage_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(InitEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("InitEndpointMessage_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class InitEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public InitEndpointMessage_argsStandardScheme getScheme() {
				return new InitEndpointMessage_argsStandardScheme();
			}
		}

		private static class InitEndpointMessage_argsStandardScheme extends StandardScheme<InitEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, InitEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, InitEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class InitEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public InitEndpointMessage_argsTupleScheme getScheme() {
				return new InitEndpointMessage_argsTupleScheme();
			}
		}

		private static class InitEndpointMessage_argsTupleScheme extends TupleScheme<InitEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, InitEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, InitEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class InitEndpointMessage_result implements org.apache.thrift.TBase<InitEndpointMessage_result, InitEndpointMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<InitEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new InitEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new InitEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitEndpointMessage_result.class, metaDataMap);
		}

		public InitEndpointMessage_result() {
		}

		public InitEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public InitEndpointMessage_result(InitEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public InitEndpointMessage_result deepCopy() {
			return new InitEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public InitEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof InitEndpointMessage_result)
				return this.equals((InitEndpointMessage_result) that);
			return false;
		}

		public boolean equals(InitEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(InitEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("InitEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class InitEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public InitEndpointMessage_resultStandardScheme getScheme() {
				return new InitEndpointMessage_resultStandardScheme();
			}
		}

		private static class InitEndpointMessage_resultStandardScheme extends StandardScheme<InitEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, InitEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, InitEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class InitEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public InitEndpointMessage_resultTupleScheme getScheme() {
				return new InitEndpointMessage_resultTupleScheme();
			}
		}

		private static class InitEndpointMessage_resultTupleScheme extends TupleScheme<InitEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, InitEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, InitEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class InitSettingEndpointMessage_args
		implements org.apache.thrift.TBase<InitSettingEndpointMessage_args, InitSettingEndpointMessage_args._Fields>, java.io.Serializable, Cloneable,
		Comparable<InitSettingEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitSettingEndpointMessage_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new InitSettingEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new InitSettingEndpointMessage_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitSettingEndpointMessage_args.class, metaDataMap);
		}

		public InitSettingEndpointMessage_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public InitSettingEndpointMessage_args(InitSettingEndpointMessage_args other) {
		}

		public InitSettingEndpointMessage_args deepCopy() {
			return new InitSettingEndpointMessage_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof InitSettingEndpointMessage_args)
				return this.equals((InitSettingEndpointMessage_args) that);
			return false;
		}

		public boolean equals(InitSettingEndpointMessage_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(InitSettingEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("InitSettingEndpointMessage_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class InitSettingEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public InitSettingEndpointMessage_argsStandardScheme getScheme() {
				return new InitSettingEndpointMessage_argsStandardScheme();
			}
		}

		private static class InitSettingEndpointMessage_argsStandardScheme extends StandardScheme<InitSettingEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, InitSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, InitSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class InitSettingEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public InitSettingEndpointMessage_argsTupleScheme getScheme() {
				return new InitSettingEndpointMessage_argsTupleScheme();
			}
		}

		private static class InitSettingEndpointMessage_argsTupleScheme extends TupleScheme<InitSettingEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, InitSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, InitSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class InitSettingEndpointMessage_result
		implements org.apache.thrift.TBase<InitSettingEndpointMessage_result, InitSettingEndpointMessage_result._Fields>, java.io.Serializable, Cloneable,
		Comparable<InitSettingEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitSettingEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new InitSettingEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new InitSettingEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitSettingEndpointMessage_result.class, metaDataMap);
		}

		public InitSettingEndpointMessage_result() {
		}

		public InitSettingEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public InitSettingEndpointMessage_result(InitSettingEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public InitSettingEndpointMessage_result deepCopy() {
			return new InitSettingEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public InitSettingEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof InitSettingEndpointMessage_result)
				return this.equals((InitSettingEndpointMessage_result) that);
			return false;
		}

		public boolean equals(InitSettingEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(InitSettingEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("InitSettingEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class InitSettingEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public InitSettingEndpointMessage_resultStandardScheme getScheme() {
				return new InitSettingEndpointMessage_resultStandardScheme();
			}
		}

		private static class InitSettingEndpointMessage_resultStandardScheme extends StandardScheme<InitSettingEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, InitSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, InitSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class InitSettingEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public InitSettingEndpointMessage_resultTupleScheme getScheme() {
				return new InitSettingEndpointMessage_resultTupleScheme();
			}
		}

		private static class InitSettingEndpointMessage_resultTupleScheme extends TupleScheme<InitSettingEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, InitSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, InitSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class UpdateEndpointMessage_args implements org.apache.thrift.TBase<UpdateEndpointMessage_args, UpdateEndpointMessage_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<UpdateEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEndpointMessage_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField ATTRIBUTE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("AttributeInfo",
			org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new UpdateEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new UpdateEndpointMessage_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required
		public List<AttributeStruct> AttributeInfo; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId"), ATTRIBUTE_INFO((short) 2, "AttributeInfo");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				case 2: // ATTRIBUTE_INFO
					return ATTRIBUTE_INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.ATTRIBUTE_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("AttributeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttributeStruct.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEndpointMessage_args.class, metaDataMap);
		}

		public UpdateEndpointMessage_args() {
		}

		public UpdateEndpointMessage_args(int LocalEpId, List<AttributeStruct> AttributeInfo) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			this.AttributeInfo = AttributeInfo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public UpdateEndpointMessage_args(UpdateEndpointMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
			if (other.isSetAttributeInfo()) {
				List<AttributeStruct> __this__AttributeInfo = new ArrayList<AttributeStruct>(other.AttributeInfo.size());
				for (AttributeStruct other_element : other.AttributeInfo) {
					__this__AttributeInfo.add(new AttributeStruct(other_element));
				}
				this.AttributeInfo = __this__AttributeInfo;
			}
		}

		public UpdateEndpointMessage_args deepCopy() {
			return new UpdateEndpointMessage_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
			this.AttributeInfo = null;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public UpdateEndpointMessage_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public int getAttributeInfoSize() {
			return (this.AttributeInfo == null) ? 0 : this.AttributeInfo.size();
		}

		public java.util.Iterator<AttributeStruct> getAttributeInfoIterator() {
			return (this.AttributeInfo == null) ? null : this.AttributeInfo.iterator();
		}

		public void addToAttributeInfo(AttributeStruct elem) {
			if (this.AttributeInfo == null) {
				this.AttributeInfo = new ArrayList<AttributeStruct>();
			}
			this.AttributeInfo.add(elem);
		}

		public List<AttributeStruct> getAttributeInfo() {
			return this.AttributeInfo;
		}

		public UpdateEndpointMessage_args setAttributeInfo(List<AttributeStruct> AttributeInfo) {
			this.AttributeInfo = AttributeInfo;
			return this;
		}

		public void unsetAttributeInfo() {
			this.AttributeInfo = null;
		}

		/**
		 * Returns true if field AttributeInfo is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetAttributeInfo() {
			return this.AttributeInfo != null;
		}

		public void setAttributeInfoIsSet(boolean value) {
			if (!value) {
				this.AttributeInfo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			case ATTRIBUTE_INFO:
				if (value == null) {
					unsetAttributeInfo();
				} else {
					setAttributeInfo((List<AttributeStruct>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			case ATTRIBUTE_INFO:
				return getAttributeInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			case ATTRIBUTE_INFO:
				return isSetAttributeInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof UpdateEndpointMessage_args)
				return this.equals((UpdateEndpointMessage_args) that);
			return false;
		}

		public boolean equals(UpdateEndpointMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			boolean this_present_AttributeInfo = true && this.isSetAttributeInfo();
			boolean that_present_AttributeInfo = true && that.isSetAttributeInfo();
			if (this_present_AttributeInfo || that_present_AttributeInfo) {
				if (!(this_present_AttributeInfo && that_present_AttributeInfo))
					return false;
				if (!this.AttributeInfo.equals(that.AttributeInfo))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			boolean present_AttributeInfo = true && (isSetAttributeInfo());
			list.add(present_AttributeInfo);
			if (present_AttributeInfo)
				list.add(AttributeInfo);

			return list.hashCode();
		}

		@Override
		public int compareTo(UpdateEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetAttributeInfo()).compareTo(other.isSetAttributeInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAttributeInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AttributeInfo, other.AttributeInfo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("UpdateEndpointMessage_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("AttributeInfo:");
			if (this.AttributeInfo == null) {
				sb.append("null");
			} else {
				sb.append(this.AttributeInfo);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class UpdateEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public UpdateEndpointMessage_argsStandardScheme getScheme() {
				return new UpdateEndpointMessage_argsStandardScheme();
			}
		}

		private static class UpdateEndpointMessage_argsStandardScheme extends StandardScheme<UpdateEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ATTRIBUTE_INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.AttributeInfo = new ArrayList<AttributeStruct>(_list0.size);
								AttributeStruct _elem1;
								for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
									_elem1 = new AttributeStruct();
									_elem1.read(iprot);
									struct.AttributeInfo.add(_elem1);
								}
								iprot.readListEnd();
							}
							struct.setAttributeInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				if (struct.AttributeInfo != null) {
					oprot.writeFieldBegin(ATTRIBUTE_INFO_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AttributeInfo.size()));
						for (AttributeStruct _iter3 : struct.AttributeInfo) {
							_iter3.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class UpdateEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public UpdateEndpointMessage_argsTupleScheme getScheme() {
				return new UpdateEndpointMessage_argsTupleScheme();
			}
		}

		private static class UpdateEndpointMessage_argsTupleScheme extends TupleScheme<UpdateEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				if (struct.isSetAttributeInfo()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
				if (struct.isSetAttributeInfo()) {
					{
						oprot.writeI32(struct.AttributeInfo.size());
						for (AttributeStruct _iter4 : struct.AttributeInfo) {
							_iter4.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.AttributeInfo = new ArrayList<AttributeStruct>(_list5.size);
						AttributeStruct _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
							_elem6 = new AttributeStruct();
							_elem6.read(iprot);
							struct.AttributeInfo.add(_elem6);
						}
					}
					struct.setAttributeInfoIsSet(true);
				}
			}
		}

	}

	public static class UpdateEndpointMessage_result implements org.apache.thrift.TBase<UpdateEndpointMessage_result, UpdateEndpointMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<UpdateEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new UpdateEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new UpdateEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEndpointMessage_result.class, metaDataMap);
		}

		public UpdateEndpointMessage_result() {
		}

		public UpdateEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public UpdateEndpointMessage_result(UpdateEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public UpdateEndpointMessage_result deepCopy() {
			return new UpdateEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public UpdateEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof UpdateEndpointMessage_result)
				return this.equals((UpdateEndpointMessage_result) that);
			return false;
		}

		public boolean equals(UpdateEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(UpdateEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("UpdateEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class UpdateEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public UpdateEndpointMessage_resultStandardScheme getScheme() {
				return new UpdateEndpointMessage_resultStandardScheme();
			}
		}

		private static class UpdateEndpointMessage_resultStandardScheme extends StandardScheme<UpdateEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class UpdateEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public UpdateEndpointMessage_resultTupleScheme getScheme() {
				return new UpdateEndpointMessage_resultTupleScheme();
			}
		}

		private static class UpdateEndpointMessage_resultTupleScheme extends TupleScheme<UpdateEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class UpdateSettingEndpointMessage_args
		implements org.apache.thrift.TBase<UpdateSettingEndpointMessage_args, UpdateSettingEndpointMessage_args._Fields>, java.io.Serializable, Cloneable,
		Comparable<UpdateSettingEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateSettingEndpointMessage_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SETTING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("SettingInfo",
			org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new UpdateSettingEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new UpdateSettingEndpointMessage_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required
		public List<SettingStruct> SettingInfo; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId"), SETTING_INFO((short) 2, "SettingInfo");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				case 2: // SETTING_INFO
					return SETTING_INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SETTING_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("SettingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(
					org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingStruct.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateSettingEndpointMessage_args.class, metaDataMap);
		}

		public UpdateSettingEndpointMessage_args() {
		}

		public UpdateSettingEndpointMessage_args(int LocalEpId, List<SettingStruct> SettingInfo) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			this.SettingInfo = SettingInfo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public UpdateSettingEndpointMessage_args(UpdateSettingEndpointMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
			if (other.isSetSettingInfo()) {
				List<SettingStruct> __this__SettingInfo = new ArrayList<SettingStruct>(other.SettingInfo.size());
				for (SettingStruct other_element : other.SettingInfo) {
					__this__SettingInfo.add(new SettingStruct(other_element));
				}
				this.SettingInfo = __this__SettingInfo;
			}
		}

		public UpdateSettingEndpointMessage_args deepCopy() {
			return new UpdateSettingEndpointMessage_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
			this.SettingInfo = null;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public UpdateSettingEndpointMessage_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public int getSettingInfoSize() {
			return (this.SettingInfo == null) ? 0 : this.SettingInfo.size();
		}

		public java.util.Iterator<SettingStruct> getSettingInfoIterator() {
			return (this.SettingInfo == null) ? null : this.SettingInfo.iterator();
		}

		public void addToSettingInfo(SettingStruct elem) {
			if (this.SettingInfo == null) {
				this.SettingInfo = new ArrayList<SettingStruct>();
			}
			this.SettingInfo.add(elem);
		}

		public List<SettingStruct> getSettingInfo() {
			return this.SettingInfo;
		}

		public UpdateSettingEndpointMessage_args setSettingInfo(List<SettingStruct> SettingInfo) {
			this.SettingInfo = SettingInfo;
			return this;
		}

		public void unsetSettingInfo() {
			this.SettingInfo = null;
		}

		/**
		 * Returns true if field SettingInfo is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSettingInfo() {
			return this.SettingInfo != null;
		}

		public void setSettingInfoIsSet(boolean value) {
			if (!value) {
				this.SettingInfo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			case SETTING_INFO:
				if (value == null) {
					unsetSettingInfo();
				} else {
					setSettingInfo((List<SettingStruct>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			case SETTING_INFO:
				return getSettingInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			case SETTING_INFO:
				return isSetSettingInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof UpdateSettingEndpointMessage_args)
				return this.equals((UpdateSettingEndpointMessage_args) that);
			return false;
		}

		public boolean equals(UpdateSettingEndpointMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			boolean this_present_SettingInfo = true && this.isSetSettingInfo();
			boolean that_present_SettingInfo = true && that.isSetSettingInfo();
			if (this_present_SettingInfo || that_present_SettingInfo) {
				if (!(this_present_SettingInfo && that_present_SettingInfo))
					return false;
				if (!this.SettingInfo.equals(that.SettingInfo))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			boolean present_SettingInfo = true && (isSetSettingInfo());
			list.add(present_SettingInfo);
			if (present_SettingInfo)
				list.add(SettingInfo);

			return list.hashCode();
		}

		@Override
		public int compareTo(UpdateSettingEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSettingInfo()).compareTo(other.isSetSettingInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSettingInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SettingInfo, other.SettingInfo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("UpdateSettingEndpointMessage_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("SettingInfo:");
			if (this.SettingInfo == null) {
				sb.append("null");
			} else {
				sb.append(this.SettingInfo);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class UpdateSettingEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public UpdateSettingEndpointMessage_argsStandardScheme getScheme() {
				return new UpdateSettingEndpointMessage_argsStandardScheme();
			}
		}

		private static class UpdateSettingEndpointMessage_argsStandardScheme extends StandardScheme<UpdateSettingEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SETTING_INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
								struct.SettingInfo = new ArrayList<SettingStruct>(_list8.size);
								SettingStruct _elem9;
								for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
									_elem9 = new SettingStruct();
									_elem9.read(iprot);
									struct.SettingInfo.add(_elem9);
								}
								iprot.readListEnd();
							}
							struct.setSettingInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				if (struct.SettingInfo != null) {
					oprot.writeFieldBegin(SETTING_INFO_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SettingInfo.size()));
						for (SettingStruct _iter11 : struct.SettingInfo) {
							_iter11.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class UpdateSettingEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public UpdateSettingEndpointMessage_argsTupleScheme getScheme() {
				return new UpdateSettingEndpointMessage_argsTupleScheme();
			}
		}

		private static class UpdateSettingEndpointMessage_argsTupleScheme extends TupleScheme<UpdateSettingEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, UpdateSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				if (struct.isSetSettingInfo()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
				if (struct.isSetSettingInfo()) {
					{
						oprot.writeI32(struct.SettingInfo.size());
						for (SettingStruct _iter12 : struct.SettingInfo) {
							_iter12.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, UpdateSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.SettingInfo = new ArrayList<SettingStruct>(_list13.size);
						SettingStruct _elem14;
						for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
							_elem14 = new SettingStruct();
							_elem14.read(iprot);
							struct.SettingInfo.add(_elem14);
						}
					}
					struct.setSettingInfoIsSet(true);
				}
			}
		}

	}

	public static class UpdateSettingEndpointMessage_result
		implements org.apache.thrift.TBase<UpdateSettingEndpointMessage_result, UpdateSettingEndpointMessage_result._Fields>, java.io.Serializable, Cloneable,
		Comparable<UpdateSettingEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateSettingEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new UpdateSettingEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new UpdateSettingEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateSettingEndpointMessage_result.class, metaDataMap);
		}

		public UpdateSettingEndpointMessage_result() {
		}

		public UpdateSettingEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public UpdateSettingEndpointMessage_result(UpdateSettingEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public UpdateSettingEndpointMessage_result deepCopy() {
			return new UpdateSettingEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public UpdateSettingEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof UpdateSettingEndpointMessage_result)
				return this.equals((UpdateSettingEndpointMessage_result) that);
			return false;
		}

		public boolean equals(UpdateSettingEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(UpdateSettingEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("UpdateSettingEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class UpdateSettingEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public UpdateSettingEndpointMessage_resultStandardScheme getScheme() {
				return new UpdateSettingEndpointMessage_resultStandardScheme();
			}
		}

		private static class UpdateSettingEndpointMessage_resultStandardScheme extends StandardScheme<UpdateSettingEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class UpdateSettingEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public UpdateSettingEndpointMessage_resultTupleScheme getScheme() {
				return new UpdateSettingEndpointMessage_resultTupleScheme();
			}
		}

		private static class UpdateSettingEndpointMessage_resultTupleScheme extends TupleScheme<UpdateSettingEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, UpdateSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, UpdateSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendEndpointMessage_args implements org.apache.thrift.TBase<SendEndpointMessage_args, SendEndpointMessage_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendEndpointMessage_args");

		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority",
			org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendEndpointMessage_argsTupleSchemeFactory());
		}

		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PRIORITY((short) 1, "priority");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __PRIORITY_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendEndpointMessage_args.class, metaDataMap);
		}

		public SendEndpointMessage_args() {
		}

		public SendEndpointMessage_args(int priority) {
			this();
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendEndpointMessage_args(SendEndpointMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.priority = other.priority;
		}

		public SendEndpointMessage_args deepCopy() {
			return new SendEndpointMessage_args(this);
		}

		@Override
		public void clear() {
			setPriorityIsSet(false);
			this.priority = 0;
		}

		public int getPriority() {
			return this.priority;
		}

		public SendEndpointMessage_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PRIORITY:
				if (value == null) {
					unsetPriority();
				} else {
					setPriority((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PRIORITY:
				return getPriority();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PRIORITY:
				return isSetPriority();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendEndpointMessage_args)
				return this.equals((SendEndpointMessage_args) that);
			return false;
		}

		public boolean equals(SendEndpointMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_priority = true;
			list.add(present_priority);
			if (present_priority)
				list.add(priority);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendEndpointMessage_args(");
			boolean first = true;

			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendEndpointMessage_argsStandardScheme getScheme() {
				return new SendEndpointMessage_argsStandardScheme();
			}
		}

		private static class SendEndpointMessage_argsStandardScheme extends StandardScheme<SendEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendEndpointMessage_argsTupleScheme getScheme() {
				return new SendEndpointMessage_argsTupleScheme();
			}
		}

		private static class SendEndpointMessage_argsTupleScheme extends TupleScheme<SendEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPriority()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}
		}

	}

	public static class SendEndpointMessage_result implements org.apache.thrift.TBase<SendEndpointMessage_result, SendEndpointMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendEndpointMessage_result.class, metaDataMap);
		}

		public SendEndpointMessage_result() {
		}

		public SendEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendEndpointMessage_result(SendEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendEndpointMessage_result deepCopy() {
			return new SendEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendEndpointMessage_result)
				return this.equals((SendEndpointMessage_result) that);
			return false;
		}

		public boolean equals(SendEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendEndpointMessage_resultStandardScheme getScheme() {
				return new SendEndpointMessage_resultStandardScheme();
			}
		}

		private static class SendEndpointMessage_resultStandardScheme extends StandardScheme<SendEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendEndpointMessage_resultTupleScheme getScheme() {
				return new SendEndpointMessage_resultTupleScheme();
			}
		}

		private static class SendEndpointMessage_resultTupleScheme extends TupleScheme<SendEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendSettingEndpointMessage_args
		implements org.apache.thrift.TBase<SendSettingEndpointMessage_args, SendSettingEndpointMessage_args._Fields>, java.io.Serializable, Cloneable,
		Comparable<SendSettingEndpointMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendSettingEndpointMessage_args");

		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority",
			org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendSettingEndpointMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendSettingEndpointMessage_argsTupleSchemeFactory());
		}

		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PRIORITY((short) 1, "priority");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __PRIORITY_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendSettingEndpointMessage_args.class, metaDataMap);
		}

		public SendSettingEndpointMessage_args() {
		}

		public SendSettingEndpointMessage_args(int priority) {
			this();
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendSettingEndpointMessage_args(SendSettingEndpointMessage_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.priority = other.priority;
		}

		public SendSettingEndpointMessage_args deepCopy() {
			return new SendSettingEndpointMessage_args(this);
		}

		@Override
		public void clear() {
			setPriorityIsSet(false);
			this.priority = 0;
		}

		public int getPriority() {
			return this.priority;
		}

		public SendSettingEndpointMessage_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PRIORITY:
				if (value == null) {
					unsetPriority();
				} else {
					setPriority((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PRIORITY:
				return getPriority();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PRIORITY:
				return isSetPriority();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendSettingEndpointMessage_args)
				return this.equals((SendSettingEndpointMessage_args) that);
			return false;
		}

		public boolean equals(SendSettingEndpointMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_priority = true;
			list.add(present_priority);
			if (present_priority)
				list.add(priority);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendSettingEndpointMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendSettingEndpointMessage_args(");
			boolean first = true;

			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendSettingEndpointMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendSettingEndpointMessage_argsStandardScheme getScheme() {
				return new SendSettingEndpointMessage_argsStandardScheme();
			}
		}

		private static class SendSettingEndpointMessage_argsStandardScheme extends StandardScheme<SendSettingEndpointMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendSettingEndpointMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendSettingEndpointMessage_argsTupleScheme getScheme() {
				return new SendSettingEndpointMessage_argsTupleScheme();
			}
		}

		private static class SendSettingEndpointMessage_argsTupleScheme extends TupleScheme<SendSettingEndpointMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPriority()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendSettingEndpointMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}
		}

	}

	public static class SendSettingEndpointMessage_result
		implements org.apache.thrift.TBase<SendSettingEndpointMessage_result, SendSettingEndpointMessage_result._Fields>, java.io.Serializable, Cloneable,
		Comparable<SendSettingEndpointMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendSettingEndpointMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendSettingEndpointMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendSettingEndpointMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendSettingEndpointMessage_result.class, metaDataMap);
		}

		public SendSettingEndpointMessage_result() {
		}

		public SendSettingEndpointMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendSettingEndpointMessage_result(SendSettingEndpointMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendSettingEndpointMessage_result deepCopy() {
			return new SendSettingEndpointMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendSettingEndpointMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendSettingEndpointMessage_result)
				return this.equals((SendSettingEndpointMessage_result) that);
			return false;
		}

		public boolean equals(SendSettingEndpointMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendSettingEndpointMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendSettingEndpointMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendSettingEndpointMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendSettingEndpointMessage_resultStandardScheme getScheme() {
				return new SendSettingEndpointMessage_resultStandardScheme();
			}
		}

		private static class SendSettingEndpointMessage_resultStandardScheme extends StandardScheme<SendSettingEndpointMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendSettingEndpointMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendSettingEndpointMessage_resultTupleScheme getScheme() {
				return new SendSettingEndpointMessage_resultTupleScheme();
			}
		}

		private static class SendSettingEndpointMessage_resultTupleScheme extends TupleScheme<SendSettingEndpointMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendSettingEndpointMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class AddDynamicEndpoint_args implements org.apache.thrift.TBase<AddDynamicEndpoint_args, AddDynamicEndpoint_args._Fields>, java.io.Serializable,
		Cloneable, Comparable<AddDynamicEndpoint_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddDynamicEndpoint_args");

		private static final org.apache.thrift.protocol.TField MULTI_EP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("MultiEpInfo",
			org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new AddDynamicEndpoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new AddDynamicEndpoint_argsTupleSchemeFactory());
		}

		public List<MultiEpCreateStruct> MultiEpInfo; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			MULTI_EP_INFO((short) 1, "MultiEpInfo");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // MULTI_EP_INFO
					return MULTI_EP_INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.MULTI_EP_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("MultiEpInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiEpCreateStruct.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddDynamicEndpoint_args.class, metaDataMap);
		}

		public AddDynamicEndpoint_args() {
		}

		public AddDynamicEndpoint_args(List<MultiEpCreateStruct> MultiEpInfo) {
			this();
			this.MultiEpInfo = MultiEpInfo;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public AddDynamicEndpoint_args(AddDynamicEndpoint_args other) {
			if (other.isSetMultiEpInfo()) {
				List<MultiEpCreateStruct> __this__MultiEpInfo = new ArrayList<MultiEpCreateStruct>(other.MultiEpInfo.size());
				for (MultiEpCreateStruct other_element : other.MultiEpInfo) {
					__this__MultiEpInfo.add(new MultiEpCreateStruct(other_element));
				}
				this.MultiEpInfo = __this__MultiEpInfo;
			}
		}

		public AddDynamicEndpoint_args deepCopy() {
			return new AddDynamicEndpoint_args(this);
		}

		@Override
		public void clear() {
			this.MultiEpInfo = null;
		}

		public int getMultiEpInfoSize() {
			return (this.MultiEpInfo == null) ? 0 : this.MultiEpInfo.size();
		}

		public java.util.Iterator<MultiEpCreateStruct> getMultiEpInfoIterator() {
			return (this.MultiEpInfo == null) ? null : this.MultiEpInfo.iterator();
		}

		public void addToMultiEpInfo(MultiEpCreateStruct elem) {
			if (this.MultiEpInfo == null) {
				this.MultiEpInfo = new ArrayList<MultiEpCreateStruct>();
			}
			this.MultiEpInfo.add(elem);
		}

		public List<MultiEpCreateStruct> getMultiEpInfo() {
			return this.MultiEpInfo;
		}

		public AddDynamicEndpoint_args setMultiEpInfo(List<MultiEpCreateStruct> MultiEpInfo) {
			this.MultiEpInfo = MultiEpInfo;
			return this;
		}

		public void unsetMultiEpInfo() {
			this.MultiEpInfo = null;
		}

		/**
		 * Returns true if field MultiEpInfo is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetMultiEpInfo() {
			return this.MultiEpInfo != null;
		}

		public void setMultiEpInfoIsSet(boolean value) {
			if (!value) {
				this.MultiEpInfo = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case MULTI_EP_INFO:
				if (value == null) {
					unsetMultiEpInfo();
				} else {
					setMultiEpInfo((List<MultiEpCreateStruct>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case MULTI_EP_INFO:
				return getMultiEpInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case MULTI_EP_INFO:
				return isSetMultiEpInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof AddDynamicEndpoint_args)
				return this.equals((AddDynamicEndpoint_args) that);
			return false;
		}

		public boolean equals(AddDynamicEndpoint_args that) {
			if (that == null)
				return false;

			boolean this_present_MultiEpInfo = true && this.isSetMultiEpInfo();
			boolean that_present_MultiEpInfo = true && that.isSetMultiEpInfo();
			if (this_present_MultiEpInfo || that_present_MultiEpInfo) {
				if (!(this_present_MultiEpInfo && that_present_MultiEpInfo))
					return false;
				if (!this.MultiEpInfo.equals(that.MultiEpInfo))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_MultiEpInfo = true && (isSetMultiEpInfo());
			list.add(present_MultiEpInfo);
			if (present_MultiEpInfo)
				list.add(MultiEpInfo);

			return list.hashCode();
		}

		@Override
		public int compareTo(AddDynamicEndpoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetMultiEpInfo()).compareTo(other.isSetMultiEpInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMultiEpInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MultiEpInfo, other.MultiEpInfo);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("AddDynamicEndpoint_args(");
			boolean first = true;

			sb.append("MultiEpInfo:");
			if (this.MultiEpInfo == null) {
				sb.append("null");
			} else {
				sb.append(this.MultiEpInfo);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class AddDynamicEndpoint_argsStandardSchemeFactory implements SchemeFactory {
			public AddDynamicEndpoint_argsStandardScheme getScheme() {
				return new AddDynamicEndpoint_argsStandardScheme();
			}
		}

		private static class AddDynamicEndpoint_argsStandardScheme extends StandardScheme<AddDynamicEndpoint_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, AddDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // MULTI_EP_INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
								struct.MultiEpInfo = new ArrayList<MultiEpCreateStruct>(_list16.size);
								MultiEpCreateStruct _elem17;
								for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
									_elem17 = new MultiEpCreateStruct();
									_elem17.read(iprot);
									struct.MultiEpInfo.add(_elem17);
								}
								iprot.readListEnd();
							}
							struct.setMultiEpInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, AddDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.MultiEpInfo != null) {
					oprot.writeFieldBegin(MULTI_EP_INFO_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MultiEpInfo.size()));
						for (MultiEpCreateStruct _iter19 : struct.MultiEpInfo) {
							_iter19.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class AddDynamicEndpoint_argsTupleSchemeFactory implements SchemeFactory {
			public AddDynamicEndpoint_argsTupleScheme getScheme() {
				return new AddDynamicEndpoint_argsTupleScheme();
			}
		}

		private static class AddDynamicEndpoint_argsTupleScheme extends TupleScheme<AddDynamicEndpoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, AddDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetMultiEpInfo()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetMultiEpInfo()) {
					{
						oprot.writeI32(struct.MultiEpInfo.size());
						for (MultiEpCreateStruct _iter20 : struct.MultiEpInfo) {
							_iter20.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, AddDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.MultiEpInfo = new ArrayList<MultiEpCreateStruct>(_list21.size);
						MultiEpCreateStruct _elem22;
						for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
							_elem22 = new MultiEpCreateStruct();
							_elem22.read(iprot);
							struct.MultiEpInfo.add(_elem22);
						}
					}
					struct.setMultiEpInfoIsSet(true);
				}
			}
		}

	}

	public static class AddDynamicEndpoint_result implements org.apache.thrift.TBase<AddDynamicEndpoint_result, AddDynamicEndpoint_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<AddDynamicEndpoint_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddDynamicEndpoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new AddDynamicEndpoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new AddDynamicEndpoint_resultTupleSchemeFactory());
		}

		public EpCreateStruct success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpCreateStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddDynamicEndpoint_result.class, metaDataMap);
		}

		public AddDynamicEndpoint_result() {
		}

		public AddDynamicEndpoint_result(EpCreateStruct success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public AddDynamicEndpoint_result(AddDynamicEndpoint_result other) {
			if (other.isSetSuccess()) {
				this.success = new EpCreateStruct(other.success);
			}
		}

		public AddDynamicEndpoint_result deepCopy() {
			return new AddDynamicEndpoint_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public EpCreateStruct getSuccess() {
			return this.success;
		}

		public AddDynamicEndpoint_result setSuccess(EpCreateStruct success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((EpCreateStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof AddDynamicEndpoint_result)
				return this.equals((AddDynamicEndpoint_result) that);
			return false;
		}

		public boolean equals(AddDynamicEndpoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(AddDynamicEndpoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("AddDynamicEndpoint_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class AddDynamicEndpoint_resultStandardSchemeFactory implements SchemeFactory {
			public AddDynamicEndpoint_resultStandardScheme getScheme() {
				return new AddDynamicEndpoint_resultStandardScheme();
			}
		}

		private static class AddDynamicEndpoint_resultStandardScheme extends StandardScheme<AddDynamicEndpoint_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, AddDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new EpCreateStruct();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, AddDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class AddDynamicEndpoint_resultTupleSchemeFactory implements SchemeFactory {
			public AddDynamicEndpoint_resultTupleScheme getScheme() {
				return new AddDynamicEndpoint_resultTupleScheme();
			}
		}

		private static class AddDynamicEndpoint_resultTupleScheme extends TupleScheme<AddDynamicEndpoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, AddDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, AddDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new EpCreateStruct();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class DeleteDynamicEndpoint_args implements org.apache.thrift.TBase<DeleteDynamicEndpoint_args, DeleteDynamicEndpoint_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<DeleteDynamicEndpoint_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDynamicEndpoint_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new DeleteDynamicEndpoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new DeleteDynamicEndpoint_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDynamicEndpoint_args.class, metaDataMap);
		}

		public DeleteDynamicEndpoint_args() {
		}

		public DeleteDynamicEndpoint_args(int LocalEpId) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public DeleteDynamicEndpoint_args(DeleteDynamicEndpoint_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
		}

		public DeleteDynamicEndpoint_args deepCopy() {
			return new DeleteDynamicEndpoint_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public DeleteDynamicEndpoint_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof DeleteDynamicEndpoint_args)
				return this.equals((DeleteDynamicEndpoint_args) that);
			return false;
		}

		public boolean equals(DeleteDynamicEndpoint_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			return list.hashCode();
		}

		@Override
		public int compareTo(DeleteDynamicEndpoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("DeleteDynamicEndpoint_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class DeleteDynamicEndpoint_argsStandardSchemeFactory implements SchemeFactory {
			public DeleteDynamicEndpoint_argsStandardScheme getScheme() {
				return new DeleteDynamicEndpoint_argsStandardScheme();
			}
		}

		private static class DeleteDynamicEndpoint_argsStandardScheme extends StandardScheme<DeleteDynamicEndpoint_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class DeleteDynamicEndpoint_argsTupleSchemeFactory implements SchemeFactory {
			public DeleteDynamicEndpoint_argsTupleScheme getScheme() {
				return new DeleteDynamicEndpoint_argsTupleScheme();
			}
		}

		private static class DeleteDynamicEndpoint_argsTupleScheme extends TupleScheme<DeleteDynamicEndpoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDynamicEndpoint_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
			}
		}

	}

	public static class DeleteDynamicEndpoint_result implements org.apache.thrift.TBase<DeleteDynamicEndpoint_result, DeleteDynamicEndpoint_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<DeleteDynamicEndpoint_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDynamicEndpoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new DeleteDynamicEndpoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new DeleteDynamicEndpoint_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDynamicEndpoint_result.class, metaDataMap);
		}

		public DeleteDynamicEndpoint_result() {
		}

		public DeleteDynamicEndpoint_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public DeleteDynamicEndpoint_result(DeleteDynamicEndpoint_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public DeleteDynamicEndpoint_result deepCopy() {
			return new DeleteDynamicEndpoint_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public DeleteDynamicEndpoint_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof DeleteDynamicEndpoint_result)
				return this.equals((DeleteDynamicEndpoint_result) that);
			return false;
		}

		public boolean equals(DeleteDynamicEndpoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(DeleteDynamicEndpoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("DeleteDynamicEndpoint_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class DeleteDynamicEndpoint_resultStandardSchemeFactory implements SchemeFactory {
			public DeleteDynamicEndpoint_resultStandardScheme getScheme() {
				return new DeleteDynamicEndpoint_resultStandardScheme();
			}
		}

		private static class DeleteDynamicEndpoint_resultStandardScheme extends StandardScheme<DeleteDynamicEndpoint_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class DeleteDynamicEndpoint_resultTupleSchemeFactory implements SchemeFactory {
			public DeleteDynamicEndpoint_resultTupleScheme getScheme() {
				return new DeleteDynamicEndpoint_resultTupleScheme();
			}
		}

		private static class DeleteDynamicEndpoint_resultTupleScheme extends TupleScheme<DeleteDynamicEndpoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDynamicEndpoint_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendAlertMessage_args
		implements org.apache.thrift.TBase<SendAlertMessage_args, SendAlertMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendAlertMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAlertMessage_args");

		private static final org.apache.thrift.protocol.TField ALERT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("AlertParams",
			org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendAlertMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendAlertMessage_argsTupleSchemeFactory());
		}

		public AlertParamsStruct AlertParams; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ALERT_PARAMS((short) 1, "AlertParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ALERT_PARAMS
					return ALERT_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.ALERT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("AlertParams", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlertParamsStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAlertMessage_args.class, metaDataMap);
		}

		public SendAlertMessage_args() {
		}

		public SendAlertMessage_args(AlertParamsStruct AlertParams) {
			this();
			this.AlertParams = AlertParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendAlertMessage_args(SendAlertMessage_args other) {
			if (other.isSetAlertParams()) {
				this.AlertParams = new AlertParamsStruct(other.AlertParams);
			}
		}

		public SendAlertMessage_args deepCopy() {
			return new SendAlertMessage_args(this);
		}

		@Override
		public void clear() {
			this.AlertParams = null;
		}

		public AlertParamsStruct getAlertParams() {
			return this.AlertParams;
		}

		public SendAlertMessage_args setAlertParams(AlertParamsStruct AlertParams) {
			this.AlertParams = AlertParams;
			return this;
		}

		public void unsetAlertParams() {
			this.AlertParams = null;
		}

		/**
		 * Returns true if field AlertParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetAlertParams() {
			return this.AlertParams != null;
		}

		public void setAlertParamsIsSet(boolean value) {
			if (!value) {
				this.AlertParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ALERT_PARAMS:
				if (value == null) {
					unsetAlertParams();
				} else {
					setAlertParams((AlertParamsStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ALERT_PARAMS:
				return getAlertParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ALERT_PARAMS:
				return isSetAlertParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendAlertMessage_args)
				return this.equals((SendAlertMessage_args) that);
			return false;
		}

		public boolean equals(SendAlertMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_AlertParams = true && this.isSetAlertParams();
			boolean that_present_AlertParams = true && that.isSetAlertParams();
			if (this_present_AlertParams || that_present_AlertParams) {
				if (!(this_present_AlertParams && that_present_AlertParams))
					return false;
				if (!this.AlertParams.equals(that.AlertParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_AlertParams = true && (isSetAlertParams());
			list.add(present_AlertParams);
			if (present_AlertParams)
				list.add(AlertParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendAlertMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetAlertParams()).compareTo(other.isSetAlertParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAlertParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AlertParams, other.AlertParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendAlertMessage_args(");
			boolean first = true;

			sb.append("AlertParams:");
			if (this.AlertParams == null) {
				sb.append("null");
			} else {
				sb.append(this.AlertParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (AlertParams != null) {
				AlertParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendAlertMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendAlertMessage_argsStandardScheme getScheme() {
				return new SendAlertMessage_argsStandardScheme();
			}
		}

		private static class SendAlertMessage_argsStandardScheme extends StandardScheme<SendAlertMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendAlertMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ALERT_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.AlertParams = new AlertParamsStruct();
							struct.AlertParams.read(iprot);
							struct.setAlertParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendAlertMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.AlertParams != null) {
					oprot.writeFieldBegin(ALERT_PARAMS_FIELD_DESC);
					struct.AlertParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendAlertMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendAlertMessage_argsTupleScheme getScheme() {
				return new SendAlertMessage_argsTupleScheme();
			}
		}

		private static class SendAlertMessage_argsTupleScheme extends TupleScheme<SendAlertMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendAlertMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetAlertParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetAlertParams()) {
					struct.AlertParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendAlertMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.AlertParams = new AlertParamsStruct();
					struct.AlertParams.read(iprot);
					struct.setAlertParamsIsSet(true);
				}
			}
		}

	}

	public static class SendAlertMessage_result implements org.apache.thrift.TBase<SendAlertMessage_result, SendAlertMessage_result._Fields>, java.io.Serializable,
		Cloneable, Comparable<SendAlertMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAlertMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendAlertMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendAlertMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAlertMessage_result.class, metaDataMap);
		}

		public SendAlertMessage_result() {
		}

		public SendAlertMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendAlertMessage_result(SendAlertMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendAlertMessage_result deepCopy() {
			return new SendAlertMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendAlertMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendAlertMessage_result)
				return this.equals((SendAlertMessage_result) that);
			return false;
		}

		public boolean equals(SendAlertMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendAlertMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendAlertMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendAlertMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendAlertMessage_resultStandardScheme getScheme() {
				return new SendAlertMessage_resultStandardScheme();
			}
		}

		private static class SendAlertMessage_resultStandardScheme extends StandardScheme<SendAlertMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendAlertMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendAlertMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendAlertMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendAlertMessage_resultTupleScheme getScheme() {
				return new SendAlertMessage_resultTupleScheme();
			}
		}

		private static class SendAlertMessage_resultTupleScheme extends TupleScheme<SendAlertMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendAlertMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendAlertMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendReceiptMessage_args implements org.apache.thrift.TBase<SendReceiptMessage_args, SendReceiptMessage_args._Fields>, java.io.Serializable,
		Cloneable, Comparable<SendReceiptMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendReceiptMessage_args");

		private static final org.apache.thrift.protocol.TField RECEIPT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("ReceiptParams",
			org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendReceiptMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendReceiptMessage_argsTupleSchemeFactory());
		}

		public ReceiptParamsStruct ReceiptParams; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			RECEIPT_PARAMS((short) 1, "ReceiptParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // RECEIPT_PARAMS
					return RECEIPT_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.RECEIPT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("ReceiptParams", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReceiptParamsStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendReceiptMessage_args.class, metaDataMap);
		}

		public SendReceiptMessage_args() {
		}

		public SendReceiptMessage_args(ReceiptParamsStruct ReceiptParams) {
			this();
			this.ReceiptParams = ReceiptParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendReceiptMessage_args(SendReceiptMessage_args other) {
			if (other.isSetReceiptParams()) {
				this.ReceiptParams = new ReceiptParamsStruct(other.ReceiptParams);
			}
		}

		public SendReceiptMessage_args deepCopy() {
			return new SendReceiptMessage_args(this);
		}

		@Override
		public void clear() {
			this.ReceiptParams = null;
		}

		public ReceiptParamsStruct getReceiptParams() {
			return this.ReceiptParams;
		}

		public SendReceiptMessage_args setReceiptParams(ReceiptParamsStruct ReceiptParams) {
			this.ReceiptParams = ReceiptParams;
			return this;
		}

		public void unsetReceiptParams() {
			this.ReceiptParams = null;
		}

		/**
		 * Returns true if field ReceiptParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReceiptParams() {
			return this.ReceiptParams != null;
		}

		public void setReceiptParamsIsSet(boolean value) {
			if (!value) {
				this.ReceiptParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case RECEIPT_PARAMS:
				if (value == null) {
					unsetReceiptParams();
				} else {
					setReceiptParams((ReceiptParamsStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case RECEIPT_PARAMS:
				return getReceiptParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case RECEIPT_PARAMS:
				return isSetReceiptParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendReceiptMessage_args)
				return this.equals((SendReceiptMessage_args) that);
			return false;
		}

		public boolean equals(SendReceiptMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_ReceiptParams = true && this.isSetReceiptParams();
			boolean that_present_ReceiptParams = true && that.isSetReceiptParams();
			if (this_present_ReceiptParams || that_present_ReceiptParams) {
				if (!(this_present_ReceiptParams && that_present_ReceiptParams))
					return false;
				if (!this.ReceiptParams.equals(that.ReceiptParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_ReceiptParams = true && (isSetReceiptParams());
			list.add(present_ReceiptParams);
			if (present_ReceiptParams)
				list.add(ReceiptParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendReceiptMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetReceiptParams()).compareTo(other.isSetReceiptParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReceiptParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReceiptParams, other.ReceiptParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendReceiptMessage_args(");
			boolean first = true;

			sb.append("ReceiptParams:");
			if (this.ReceiptParams == null) {
				sb.append("null");
			} else {
				sb.append(this.ReceiptParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (ReceiptParams != null) {
				ReceiptParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendReceiptMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendReceiptMessage_argsStandardScheme getScheme() {
				return new SendReceiptMessage_argsStandardScheme();
			}
		}

		private static class SendReceiptMessage_argsStandardScheme extends StandardScheme<SendReceiptMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendReceiptMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // RECEIPT_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.ReceiptParams = new ReceiptParamsStruct();
							struct.ReceiptParams.read(iprot);
							struct.setReceiptParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendReceiptMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.ReceiptParams != null) {
					oprot.writeFieldBegin(RECEIPT_PARAMS_FIELD_DESC);
					struct.ReceiptParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendReceiptMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendReceiptMessage_argsTupleScheme getScheme() {
				return new SendReceiptMessage_argsTupleScheme();
			}
		}

		private static class SendReceiptMessage_argsTupleScheme extends TupleScheme<SendReceiptMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendReceiptMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetReceiptParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetReceiptParams()) {
					struct.ReceiptParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendReceiptMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.ReceiptParams = new ReceiptParamsStruct();
					struct.ReceiptParams.read(iprot);
					struct.setReceiptParamsIsSet(true);
				}
			}
		}

	}

	public static class SendReceiptMessage_result implements org.apache.thrift.TBase<SendReceiptMessage_result, SendReceiptMessage_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<SendReceiptMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendReceiptMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendReceiptMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendReceiptMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendReceiptMessage_result.class, metaDataMap);
		}

		public SendReceiptMessage_result() {
		}

		public SendReceiptMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendReceiptMessage_result(SendReceiptMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendReceiptMessage_result deepCopy() {
			return new SendReceiptMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendReceiptMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendReceiptMessage_result)
				return this.equals((SendReceiptMessage_result) that);
			return false;
		}

		public boolean equals(SendReceiptMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendReceiptMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendReceiptMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendReceiptMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendReceiptMessage_resultStandardScheme getScheme() {
				return new SendReceiptMessage_resultStandardScheme();
			}
		}

		private static class SendReceiptMessage_resultStandardScheme extends StandardScheme<SendReceiptMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendReceiptMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendReceiptMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendReceiptMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendReceiptMessage_resultTupleScheme getScheme() {
				return new SendReceiptMessage_resultTupleScheme();
			}
		}

		private static class SendReceiptMessage_resultTupleScheme extends TupleScheme<SendReceiptMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendReceiptMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendReceiptMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SendLogMessage_args
		implements org.apache.thrift.TBase<SendLogMessage_args, SendLogMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendLogMessage_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendLogMessage_args");

		private static final org.apache.thrift.protocol.TField LOG_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("LogParams",
			org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendLogMessage_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendLogMessage_argsTupleSchemeFactory());
		}

		public LogParamsStruct LogParams; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOG_PARAMS((short) 1, "LogParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOG_PARAMS
					return LOG_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOG_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("LogParams", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogParamsStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendLogMessage_args.class, metaDataMap);
		}

		public SendLogMessage_args() {
		}

		public SendLogMessage_args(LogParamsStruct LogParams) {
			this();
			this.LogParams = LogParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendLogMessage_args(SendLogMessage_args other) {
			if (other.isSetLogParams()) {
				this.LogParams = new LogParamsStruct(other.LogParams);
			}
		}

		public SendLogMessage_args deepCopy() {
			return new SendLogMessage_args(this);
		}

		@Override
		public void clear() {
			this.LogParams = null;
		}

		public LogParamsStruct getLogParams() {
			return this.LogParams;
		}

		public SendLogMessage_args setLogParams(LogParamsStruct LogParams) {
			this.LogParams = LogParams;
			return this;
		}

		public void unsetLogParams() {
			this.LogParams = null;
		}

		/**
		 * Returns true if field LogParams is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLogParams() {
			return this.LogParams != null;
		}

		public void setLogParamsIsSet(boolean value) {
			if (!value) {
				this.LogParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOG_PARAMS:
				if (value == null) {
					unsetLogParams();
				} else {
					setLogParams((LogParamsStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOG_PARAMS:
				return getLogParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOG_PARAMS:
				return isSetLogParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendLogMessage_args)
				return this.equals((SendLogMessage_args) that);
			return false;
		}

		public boolean equals(SendLogMessage_args that) {
			if (that == null)
				return false;

			boolean this_present_LogParams = true && this.isSetLogParams();
			boolean that_present_LogParams = true && that.isSetLogParams();
			if (this_present_LogParams || that_present_LogParams) {
				if (!(this_present_LogParams && that_present_LogParams))
					return false;
				if (!this.LogParams.equals(that.LogParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LogParams = true && (isSetLogParams());
			list.add(present_LogParams);
			if (present_LogParams)
				list.add(LogParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(SendLogMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLogParams()).compareTo(other.isSetLogParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLogParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogParams, other.LogParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendLogMessage_args(");
			boolean first = true;

			sb.append("LogParams:");
			if (this.LogParams == null) {
				sb.append("null");
			} else {
				sb.append(this.LogParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (LogParams != null) {
				LogParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendLogMessage_argsStandardSchemeFactory implements SchemeFactory {
			public SendLogMessage_argsStandardScheme getScheme() {
				return new SendLogMessage_argsStandardScheme();
			}
		}

		private static class SendLogMessage_argsStandardScheme extends StandardScheme<SendLogMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendLogMessage_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOG_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.LogParams = new LogParamsStruct();
							struct.LogParams.read(iprot);
							struct.setLogParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendLogMessage_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.LogParams != null) {
					oprot.writeFieldBegin(LOG_PARAMS_FIELD_DESC);
					struct.LogParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendLogMessage_argsTupleSchemeFactory implements SchemeFactory {
			public SendLogMessage_argsTupleScheme getScheme() {
				return new SendLogMessage_argsTupleScheme();
			}
		}

		private static class SendLogMessage_argsTupleScheme extends TupleScheme<SendLogMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendLogMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLogParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetLogParams()) {
					struct.LogParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendLogMessage_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.LogParams = new LogParamsStruct();
					struct.LogParams.read(iprot);
					struct.setLogParamsIsSet(true);
				}
			}
		}

	}

	public static class SendLogMessage_result
		implements org.apache.thrift.TBase<SendLogMessage_result, SendLogMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<SendLogMessage_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendLogMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SendLogMessage_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SendLogMessage_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendLogMessage_result.class, metaDataMap);
		}

		public SendLogMessage_result() {
		}

		public SendLogMessage_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SendLogMessage_result(SendLogMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SendLogMessage_result deepCopy() {
			return new SendLogMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SendLogMessage_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SendLogMessage_result)
				return this.equals((SendLogMessage_result) that);
			return false;
		}

		public boolean equals(SendLogMessage_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SendLogMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SendLogMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SendLogMessage_resultStandardSchemeFactory implements SchemeFactory {
			public SendLogMessage_resultStandardScheme getScheme() {
				return new SendLogMessage_resultStandardScheme();
			}
		}

		private static class SendLogMessage_resultStandardScheme extends StandardScheme<SendLogMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SendLogMessage_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SendLogMessage_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SendLogMessage_resultTupleSchemeFactory implements SchemeFactory {
			public SendLogMessage_resultTupleScheme getScheme() {
				return new SendLogMessage_resultTupleScheme();
			}
		}

		private static class SendLogMessage_resultTupleScheme extends TupleScheme<SendLogMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SendLogMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SendLogMessage_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class ClearActivationData_args implements org.apache.thrift.TBase<ClearActivationData_args, ClearActivationData_args._Fields>,
		java.io.Serializable, Cloneable, Comparable<ClearActivationData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearActivationData_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ClearActivationData_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ClearActivationData_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearActivationData_args.class, metaDataMap);
		}

		public ClearActivationData_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ClearActivationData_args(ClearActivationData_args other) {
		}

		public ClearActivationData_args deepCopy() {
			return new ClearActivationData_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ClearActivationData_args)
				return this.equals((ClearActivationData_args) that);
			return false;
		}

		public boolean equals(ClearActivationData_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(ClearActivationData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ClearActivationData_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ClearActivationData_argsStandardSchemeFactory implements SchemeFactory {
			public ClearActivationData_argsStandardScheme getScheme() {
				return new ClearActivationData_argsStandardScheme();
			}
		}

		private static class ClearActivationData_argsStandardScheme extends StandardScheme<ClearActivationData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ClearActivationData_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ClearActivationData_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ClearActivationData_argsTupleSchemeFactory implements SchemeFactory {
			public ClearActivationData_argsTupleScheme getScheme() {
				return new ClearActivationData_argsTupleScheme();
			}
		}

		private static class ClearActivationData_argsTupleScheme extends TupleScheme<ClearActivationData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ClearActivationData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ClearActivationData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class ClearActivationData_result implements org.apache.thrift.TBase<ClearActivationData_result, ClearActivationData_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<ClearActivationData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearActivationData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ClearActivationData_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ClearActivationData_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearActivationData_result.class, metaDataMap);
		}

		public ClearActivationData_result() {
		}

		public ClearActivationData_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ClearActivationData_result(ClearActivationData_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public ClearActivationData_result deepCopy() {
			return new ClearActivationData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public ClearActivationData_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ClearActivationData_result)
				return this.equals((ClearActivationData_result) that);
			return false;
		}

		public boolean equals(ClearActivationData_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(ClearActivationData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ClearActivationData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ClearActivationData_resultStandardSchemeFactory implements SchemeFactory {
			public ClearActivationData_resultStandardScheme getScheme() {
				return new ClearActivationData_resultStandardScheme();
			}
		}

		private static class ClearActivationData_resultStandardScheme extends StandardScheme<ClearActivationData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ClearActivationData_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ClearActivationData_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ClearActivationData_resultTupleSchemeFactory implements SchemeFactory {
			public ClearActivationData_resultTupleScheme getScheme() {
				return new ClearActivationData_resultTupleScheme();
			}
		}

		private static class ClearActivationData_resultTupleScheme extends TupleScheme<ClearActivationData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ClearActivationData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ClearActivationData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class ClearProvisionData_args implements org.apache.thrift.TBase<ClearProvisionData_args, ClearProvisionData_args._Fields>, java.io.Serializable,
		Cloneable, Comparable<ClearProvisionData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearProvisionData_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ClearProvisionData_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ClearProvisionData_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearProvisionData_args.class, metaDataMap);
		}

		public ClearProvisionData_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ClearProvisionData_args(ClearProvisionData_args other) {
		}

		public ClearProvisionData_args deepCopy() {
			return new ClearProvisionData_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ClearProvisionData_args)
				return this.equals((ClearProvisionData_args) that);
			return false;
		}

		public boolean equals(ClearProvisionData_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(ClearProvisionData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ClearProvisionData_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ClearProvisionData_argsStandardSchemeFactory implements SchemeFactory {
			public ClearProvisionData_argsStandardScheme getScheme() {
				return new ClearProvisionData_argsStandardScheme();
			}
		}

		private static class ClearProvisionData_argsStandardScheme extends StandardScheme<ClearProvisionData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ClearProvisionData_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ClearProvisionData_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ClearProvisionData_argsTupleSchemeFactory implements SchemeFactory {
			public ClearProvisionData_argsTupleScheme getScheme() {
				return new ClearProvisionData_argsTupleScheme();
			}
		}

		private static class ClearProvisionData_argsTupleScheme extends TupleScheme<ClearProvisionData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ClearProvisionData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ClearProvisionData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class ClearProvisionData_result implements org.apache.thrift.TBase<ClearProvisionData_result, ClearProvisionData_result._Fields>,
		java.io.Serializable, Cloneable, Comparable<ClearProvisionData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearProvisionData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ClearProvisionData_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ClearProvisionData_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearProvisionData_result.class, metaDataMap);
		}

		public ClearProvisionData_result() {
		}

		public ClearProvisionData_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ClearProvisionData_result(ClearProvisionData_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public ClearProvisionData_result deepCopy() {
			return new ClearProvisionData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public ClearProvisionData_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ClearProvisionData_result)
				return this.equals((ClearProvisionData_result) that);
			return false;
		}

		public boolean equals(ClearProvisionData_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(ClearProvisionData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ClearProvisionData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ClearProvisionData_resultStandardSchemeFactory implements SchemeFactory {
			public ClearProvisionData_resultStandardScheme getScheme() {
				return new ClearProvisionData_resultStandardScheme();
			}
		}

		private static class ClearProvisionData_resultStandardScheme extends StandardScheme<ClearProvisionData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ClearProvisionData_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ClearProvisionData_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ClearProvisionData_resultTupleSchemeFactory implements SchemeFactory {
			public ClearProvisionData_resultTupleScheme getScheme() {
				return new ClearProvisionData_resultTupleScheme();
			}
		}

		private static class ClearProvisionData_resultTupleScheme extends TupleScheme<ClearProvisionData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ClearProvisionData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ClearProvisionData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetEndpointList_args
		implements org.apache.thrift.TBase<GetEndpointList_args, GetEndpointList_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEndpointList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEndpointList_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetEndpointList_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetEndpointList_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEndpointList_args.class, metaDataMap);
		}

		public GetEndpointList_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetEndpointList_args(GetEndpointList_args other) {
		}

		public GetEndpointList_args deepCopy() {
			return new GetEndpointList_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetEndpointList_args)
				return this.equals((GetEndpointList_args) that);
			return false;
		}

		public boolean equals(GetEndpointList_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(GetEndpointList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetEndpointList_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetEndpointList_argsStandardSchemeFactory implements SchemeFactory {
			public GetEndpointList_argsStandardScheme getScheme() {
				return new GetEndpointList_argsStandardScheme();
			}
		}

		private static class GetEndpointList_argsStandardScheme extends StandardScheme<GetEndpointList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetEndpointList_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetEndpointList_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetEndpointList_argsTupleSchemeFactory implements SchemeFactory {
			public GetEndpointList_argsTupleScheme getScheme() {
				return new GetEndpointList_argsTupleScheme();
			}
		}

		private static class GetEndpointList_argsTupleScheme extends TupleScheme<GetEndpointList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetEndpointList_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetEndpointList_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class GetEndpointList_result implements org.apache.thrift.TBase<GetEndpointList_result, GetEndpointList_result._Fields>, java.io.Serializable,
		Cloneable, Comparable<GetEndpointList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEndpointList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetEndpointList_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetEndpointList_resultTupleSchemeFactory());
		}

		public List<Integer> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
				new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(
					org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEndpointList_result.class, metaDataMap);
		}

		public GetEndpointList_result() {
		}

		public GetEndpointList_result(List<Integer> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetEndpointList_result(GetEndpointList_result other) {
			if (other.isSetSuccess()) {
				List<Integer> __this__success = new ArrayList<Integer>(other.success);
				this.success = __this__success;
			}
		}

		public GetEndpointList_result deepCopy() {
			return new GetEndpointList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<Integer> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(int elem) {
			if (this.success == null) {
				this.success = new ArrayList<Integer>();
			}
			this.success.add(elem);
		}

		public List<Integer> getSuccess() {
			return this.success;
		}

		public GetEndpointList_result setSuccess(List<Integer> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<Integer>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetEndpointList_result)
				return this.equals((GetEndpointList_result) that);
			return false;
		}

		public boolean equals(GetEndpointList_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetEndpointList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetEndpointList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetEndpointList_resultStandardSchemeFactory implements SchemeFactory {
			public GetEndpointList_resultStandardScheme getScheme() {
				return new GetEndpointList_resultStandardScheme();
			}
		}

		private static class GetEndpointList_resultStandardScheme extends StandardScheme<GetEndpointList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetEndpointList_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
								struct.success = new ArrayList<Integer>(_list24.size);
								int _elem25;
								for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
									_elem25 = iprot.readI32();
									struct.success.add(_elem25);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetEndpointList_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
						for (int _iter27 : struct.success) {
							oprot.writeI32(_iter27);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetEndpointList_resultTupleSchemeFactory implements SchemeFactory {
			public GetEndpointList_resultTupleScheme getScheme() {
				return new GetEndpointList_resultTupleScheme();
			}
		}

		private static class GetEndpointList_resultTupleScheme extends TupleScheme<GetEndpointList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetEndpointList_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (int _iter28 : struct.success) {
							oprot.writeI32(_iter28);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetEndpointList_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
						struct.success = new ArrayList<Integer>(_list29.size);
						int _elem30;
						for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
							_elem30 = iprot.readI32();
							struct.success.add(_elem30);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetEndpointInfo_args
		implements org.apache.thrift.TBase<GetEndpointInfo_args, GetEndpointInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEndpointInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEndpointInfo_args");

		private static final org.apache.thrift.protocol.TField LOCAL_EP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocalEpId",
			org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetEndpointInfo_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetEndpointInfo_argsTupleSchemeFactory());
		}

		public int LocalEpId; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCAL_EP_ID((short) 1, "LocalEpId");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCAL_EP_ID
					return LOCAL_EP_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOCALEPID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCAL_EP_ID, new org.apache.thrift.meta_data.FieldMetaData("LocalEpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEndpointInfo_args.class, metaDataMap);
		}

		public GetEndpointInfo_args() {
		}

		public GetEndpointInfo_args(int LocalEpId) {
			this();
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetEndpointInfo_args(GetEndpointInfo_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.LocalEpId = other.LocalEpId;
		}

		public GetEndpointInfo_args deepCopy() {
			return new GetEndpointInfo_args(this);
		}

		@Override
		public void clear() {
			setLocalEpIdIsSet(false);
			this.LocalEpId = 0;
		}

		public int getLocalEpId() {
			return this.LocalEpId;
		}

		public GetEndpointInfo_args setLocalEpId(int LocalEpId) {
			this.LocalEpId = LocalEpId;
			setLocalEpIdIsSet(true);
			return this;
		}

		public void unsetLocalEpId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		/**
		 * Returns true if field LocalEpId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLocalEpId() {
			return EncodingUtils.testBit(__isset_bitfield, __LOCALEPID_ISSET_ID);
		}

		public void setLocalEpIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALEPID_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCAL_EP_ID:
				if (value == null) {
					unsetLocalEpId();
				} else {
					setLocalEpId((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCAL_EP_ID:
				return getLocalEpId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCAL_EP_ID:
				return isSetLocalEpId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetEndpointInfo_args)
				return this.equals((GetEndpointInfo_args) that);
			return false;
		}

		public boolean equals(GetEndpointInfo_args that) {
			if (that == null)
				return false;

			boolean this_present_LocalEpId = true;
			boolean that_present_LocalEpId = true;
			if (this_present_LocalEpId || that_present_LocalEpId) {
				if (!(this_present_LocalEpId && that_present_LocalEpId))
					return false;
				if (this.LocalEpId != that.LocalEpId)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_LocalEpId = true;
			list.add(present_LocalEpId);
			if (present_LocalEpId)
				list.add(LocalEpId);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetEndpointInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocalEpId()).compareTo(other.isSetLocalEpId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocalEpId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalEpId, other.LocalEpId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetEndpointInfo_args(");
			boolean first = true;

			sb.append("LocalEpId:");
			sb.append(this.LocalEpId);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetEndpointInfo_argsStandardSchemeFactory implements SchemeFactory {
			public GetEndpointInfo_argsStandardScheme getScheme() {
				return new GetEndpointInfo_argsStandardScheme();
			}
		}

		private static class GetEndpointInfo_argsStandardScheme extends StandardScheme<GetEndpointInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetEndpointInfo_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCAL_EP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.LocalEpId = iprot.readI32();
							struct.setLocalEpIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetEndpointInfo_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOCAL_EP_ID_FIELD_DESC);
				oprot.writeI32(struct.LocalEpId);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetEndpointInfo_argsTupleSchemeFactory implements SchemeFactory {
			public GetEndpointInfo_argsTupleScheme getScheme() {
				return new GetEndpointInfo_argsTupleScheme();
			}
		}

		private static class GetEndpointInfo_argsTupleScheme extends TupleScheme<GetEndpointInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetEndpointInfo_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocalEpId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetLocalEpId()) {
					oprot.writeI32(struct.LocalEpId);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetEndpointInfo_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.LocalEpId = iprot.readI32();
					struct.setLocalEpIdIsSet(true);
				}
			}
		}

	}

	public static class GetEndpointInfo_result implements org.apache.thrift.TBase<GetEndpointInfo_result, GetEndpointInfo_result._Fields>, java.io.Serializable,
		Cloneable, Comparable<GetEndpointInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEndpointInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetEndpointInfo_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetEndpointInfo_resultTupleSchemeFactory());
		}

		public EndpointInfoStruct success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndpointInfoStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEndpointInfo_result.class, metaDataMap);
		}

		public GetEndpointInfo_result() {
		}

		public GetEndpointInfo_result(EndpointInfoStruct success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetEndpointInfo_result(GetEndpointInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new EndpointInfoStruct(other.success);
			}
		}

		public GetEndpointInfo_result deepCopy() {
			return new GetEndpointInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public EndpointInfoStruct getSuccess() {
			return this.success;
		}

		public GetEndpointInfo_result setSuccess(EndpointInfoStruct success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((EndpointInfoStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetEndpointInfo_result)
				return this.equals((GetEndpointInfo_result) that);
			return false;
		}

		public boolean equals(GetEndpointInfo_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetEndpointInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetEndpointInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetEndpointInfo_resultStandardSchemeFactory implements SchemeFactory {
			public GetEndpointInfo_resultStandardScheme getScheme() {
				return new GetEndpointInfo_resultStandardScheme();
			}
		}

		private static class GetEndpointInfo_resultStandardScheme extends StandardScheme<GetEndpointInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetEndpointInfo_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new EndpointInfoStruct();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetEndpointInfo_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetEndpointInfo_resultTupleSchemeFactory implements SchemeFactory {
			public GetEndpointInfo_resultTupleScheme getScheme() {
				return new GetEndpointInfo_resultTupleScheme();
			}
		}

		private static class GetEndpointInfo_resultTupleScheme extends TupleScheme<GetEndpointInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetEndpointInfo_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetEndpointInfo_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new EndpointInfoStruct();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SetLogLevel_args
		implements org.apache.thrift.TBase<SetLogLevel_args, SetLogLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetLogLevel_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetLogLevel_args");

		private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("log_level",
			org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField LOG_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("log_control",
			org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SetLogLevel_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SetLogLevel_argsTupleSchemeFactory());
		}

		public LogLevelTypeStruct log_level; // required
		public int log_control; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOG_LEVEL((short) 1, "log_level"), LOG_CONTROL((short) 2, "log_control");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOG_LEVEL
					return LOG_LEVEL;
				case 2: // LOG_CONTROL
					return LOG_CONTROL;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOG_CONTROL_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("log_level", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogLevelTypeStruct.class)));
			tmpMap.put(_Fields.LOG_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("log_control", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetLogLevel_args.class, metaDataMap);
		}

		public SetLogLevel_args() {
		}

		public SetLogLevel_args(LogLevelTypeStruct log_level, int log_control) {
			this();
			this.log_level = log_level;
			this.log_control = log_control;
			setLog_controlIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SetLogLevel_args(SetLogLevel_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetLog_level()) {
				this.log_level = new LogLevelTypeStruct(other.log_level);
			}
			this.log_control = other.log_control;
		}

		public SetLogLevel_args deepCopy() {
			return new SetLogLevel_args(this);
		}

		@Override
		public void clear() {
			this.log_level = null;
			setLog_controlIsSet(false);
			this.log_control = 0;
		}

		public LogLevelTypeStruct getLog_level() {
			return this.log_level;
		}

		public SetLogLevel_args setLog_level(LogLevelTypeStruct log_level) {
			this.log_level = log_level;
			return this;
		}

		public void unsetLog_level() {
			this.log_level = null;
		}

		/**
		 * Returns true if field log_level is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLog_level() {
			return this.log_level != null;
		}

		public void setLog_levelIsSet(boolean value) {
			if (!value) {
				this.log_level = null;
			}
		}

		public int getLog_control() {
			return this.log_control;
		}

		public SetLogLevel_args setLog_control(int log_control) {
			this.log_control = log_control;
			setLog_controlIsSet(true);
			return this;
		}

		public void unsetLog_control() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOG_CONTROL_ISSET_ID);
		}

		/**
		 * Returns true if field log_control is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLog_control() {
			return EncodingUtils.testBit(__isset_bitfield, __LOG_CONTROL_ISSET_ID);
		}

		public void setLog_controlIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOG_CONTROL_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOG_LEVEL:
				if (value == null) {
					unsetLog_level();
				} else {
					setLog_level((LogLevelTypeStruct) value);
				}
				break;

			case LOG_CONTROL:
				if (value == null) {
					unsetLog_control();
				} else {
					setLog_control((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOG_LEVEL:
				return getLog_level();

			case LOG_CONTROL:
				return getLog_control();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOG_LEVEL:
				return isSetLog_level();
			case LOG_CONTROL:
				return isSetLog_control();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SetLogLevel_args)
				return this.equals((SetLogLevel_args) that);
			return false;
		}

		public boolean equals(SetLogLevel_args that) {
			if (that == null)
				return false;

			boolean this_present_log_level = true && this.isSetLog_level();
			boolean that_present_log_level = true && that.isSetLog_level();
			if (this_present_log_level || that_present_log_level) {
				if (!(this_present_log_level && that_present_log_level))
					return false;
				if (!this.log_level.equals(that.log_level))
					return false;
			}

			boolean this_present_log_control = true;
			boolean that_present_log_control = true;
			if (this_present_log_control || that_present_log_control) {
				if (!(this_present_log_control && that_present_log_control))
					return false;
				if (this.log_control != that.log_control)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_log_level = true && (isSetLog_level());
			list.add(present_log_level);
			if (present_log_level)
				list.add(log_level);

			boolean present_log_control = true;
			list.add(present_log_control);
			if (present_log_control)
				list.add(log_control);

			return list.hashCode();
		}

		@Override
		public int compareTo(SetLogLevel_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLog_level()).compareTo(other.isSetLog_level());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLog_level()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_level, other.log_level);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetLog_control()).compareTo(other.isSetLog_control());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLog_control()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_control, other.log_control);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SetLogLevel_args(");
			boolean first = true;

			sb.append("log_level:");
			if (this.log_level == null) {
				sb.append("null");
			} else {
				sb.append(this.log_level);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("log_control:");
			sb.append(this.log_control);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (log_level != null) {
				log_level.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SetLogLevel_argsStandardSchemeFactory implements SchemeFactory {
			public SetLogLevel_argsStandardScheme getScheme() {
				return new SetLogLevel_argsStandardScheme();
			}
		}

		private static class SetLogLevel_argsStandardScheme extends StandardScheme<SetLogLevel_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SetLogLevel_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOG_LEVEL
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.log_level = new LogLevelTypeStruct();
							struct.log_level.read(iprot);
							struct.setLog_levelIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // LOG_CONTROL
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.log_control = iprot.readI32();
							struct.setLog_controlIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SetLogLevel_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.log_level != null) {
					oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
					struct.log_level.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(LOG_CONTROL_FIELD_DESC);
				oprot.writeI32(struct.log_control);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SetLogLevel_argsTupleSchemeFactory implements SchemeFactory {
			public SetLogLevel_argsTupleScheme getScheme() {
				return new SetLogLevel_argsTupleScheme();
			}
		}

		private static class SetLogLevel_argsTupleScheme extends TupleScheme<SetLogLevel_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SetLogLevel_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLog_level()) {
					optionals.set(0);
				}
				if (struct.isSetLog_control()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetLog_level()) {
					struct.log_level.write(oprot);
				}
				if (struct.isSetLog_control()) {
					oprot.writeI32(struct.log_control);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SetLogLevel_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.log_level = new LogLevelTypeStruct();
					struct.log_level.read(iprot);
					struct.setLog_levelIsSet(true);
				}
				if (incoming.get(1)) {
					struct.log_control = iprot.readI32();
					struct.setLog_controlIsSet(true);
				}
			}
		}

	}

	public static class SetLogLevel_result
		implements org.apache.thrift.TBase<SetLogLevel_result, SetLogLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetLogLevel_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetLogLevel_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SetLogLevel_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SetLogLevel_resultTupleSchemeFactory());
		}

		/**
		 * 
		 * @see Result
		 */
		public Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 * 
			 * @see Result
			 */
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetLogLevel_result.class, metaDataMap);
		}

		public SetLogLevel_result() {
		}

		public SetLogLevel_result(Result success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SetLogLevel_result(SetLogLevel_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public SetLogLevel_result deepCopy() {
			return new SetLogLevel_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		/**
		 * 
		 * @see Result
		 */
		public Result getSuccess() {
			return this.success;
		}

		/**
		 * 
		 * @see Result
		 */
		public SetLogLevel_result setSuccess(Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Result) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SetLogLevel_result)
				return this.equals((SetLogLevel_result) that);
			return false;
		}

		public boolean equals(SetLogLevel_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(SetLogLevel_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SetLogLevel_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SetLogLevel_resultStandardSchemeFactory implements SchemeFactory {
			public SetLogLevel_resultStandardScheme getScheme() {
				return new SetLogLevel_resultStandardScheme();
			}
		}

		private static class SetLogLevel_resultStandardScheme extends StandardScheme<SetLogLevel_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SetLogLevel_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = Result.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SetLogLevel_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SetLogLevel_resultTupleSchemeFactory implements SchemeFactory {
			public SetLogLevel_resultTupleScheme getScheme() {
				return new SetLogLevel_resultTupleScheme();
			}
		}

		private static class SetLogLevel_resultTupleScheme extends TupleScheme<SetLogLevel_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SetLogLevel_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SetLogLevel_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = Result.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class eAppReady_args
		implements org.apache.thrift.TBase<eAppReady_args, eAppReady_args._Fields>, java.io.Serializable, Cloneable, Comparable<eAppReady_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eAppReady_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new eAppReady_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new eAppReady_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eAppReady_args.class, metaDataMap);
		}

		public eAppReady_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public eAppReady_args(eAppReady_args other) {
		}

		public eAppReady_args deepCopy() {
			return new eAppReady_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof eAppReady_args)
				return this.equals((eAppReady_args) that);
			return false;
		}

		public boolean equals(eAppReady_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(eAppReady_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("eAppReady_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class eAppReady_argsStandardSchemeFactory implements SchemeFactory {
			public eAppReady_argsStandardScheme getScheme() {
				return new eAppReady_argsStandardScheme();
			}
		}

		private static class eAppReady_argsStandardScheme extends StandardScheme<eAppReady_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, eAppReady_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, eAppReady_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class eAppReady_argsTupleSchemeFactory implements SchemeFactory {
			public eAppReady_argsTupleScheme getScheme() {
				return new eAppReady_argsTupleScheme();
			}
		}

		private static class eAppReady_argsTupleScheme extends TupleScheme<eAppReady_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, eAppReady_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, eAppReady_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class eAppReady_result
		implements org.apache.thrift.TBase<eAppReady_result, eAppReady_result._Fields>, java.io.Serializable, Cloneable, Comparable<eAppReady_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eAppReady_result");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new eAppReady_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new eAppReady_resultTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eAppReady_result.class, metaDataMap);
		}

		public eAppReady_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public eAppReady_result(eAppReady_result other) {
		}

		public eAppReady_result deepCopy() {
			return new eAppReady_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof eAppReady_result)
				return this.equals((eAppReady_result) that);
			return false;
		}

		public boolean equals(eAppReady_result that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(eAppReady_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("eAppReady_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class eAppReady_resultStandardSchemeFactory implements SchemeFactory {
			public eAppReady_resultStandardScheme getScheme() {
				return new eAppReady_resultStandardScheme();
			}
		}

		private static class eAppReady_resultStandardScheme extends StandardScheme<eAppReady_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, eAppReady_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, eAppReady_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class eAppReady_resultTupleSchemeFactory implements SchemeFactory {
			public eAppReady_resultTupleScheme getScheme() {
				return new eAppReady_resultTupleScheme();
			}
		}

		private static class eAppReady_resultTupleScheme extends TupleScheme<eAppReady_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, eAppReady_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, eAppReady_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class getEvents_args
		implements org.apache.thrift.TBase<getEvents_args, getEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getEvents_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getEvents_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_args.class, metaDataMap);
		}

		public getEvents_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getEvents_args(getEvents_args other) {
		}

		public getEvents_args deepCopy() {
			return new getEvents_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getEvents_args)
				return this.equals((getEvents_args) that);
			return false;
		}

		public boolean equals(getEvents_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(getEvents_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getEvents_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getEvents_argsStandardSchemeFactory implements SchemeFactory {
			public getEvents_argsStandardScheme getScheme() {
				return new getEvents_argsStandardScheme();
			}
		}

		private static class getEvents_argsStandardScheme extends StandardScheme<getEvents_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getEvents_argsTupleSchemeFactory implements SchemeFactory {
			public getEvents_argsTupleScheme getScheme() {
				return new getEvents_argsTupleScheme();
			}
		}

		private static class getEvents_argsTupleScheme extends TupleScheme<getEvents_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class getEvents_result
		implements org.apache.thrift.TBase<getEvents_result, getEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
			org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getEvents_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getEvents_resultTupleSchemeFactory());
		}

		public ReturnStruct success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnStruct.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_result.class, metaDataMap);
		}

		public getEvents_result() {
		}

		public getEvents_result(ReturnStruct success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getEvents_result(getEvents_result other) {
			if (other.isSetSuccess()) {
				this.success = new ReturnStruct(other.success);
			}
		}

		public getEvents_result deepCopy() {
			return new getEvents_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ReturnStruct getSuccess() {
			return this.success;
		}

		public getEvents_result setSuccess(ReturnStruct success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ReturnStruct) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getEvents_result)
				return this.equals((getEvents_result) that);
			return false;
		}

		public boolean equals(getEvents_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getEvents_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getEvents_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getEvents_resultStandardSchemeFactory implements SchemeFactory {
			public getEvents_resultStandardScheme getScheme() {
				return new getEvents_resultStandardScheme();
			}
		}

		private static class getEvents_resultStandardScheme extends StandardScheme<getEvents_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ReturnStruct();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getEvents_resultTupleSchemeFactory implements SchemeFactory {
			public getEvents_resultTupleScheme getScheme() {
				return new getEvents_resultTupleScheme();
			}
		}

		private static class getEvents_resultTupleScheme extends TupleScheme<getEvents_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ReturnStruct();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
