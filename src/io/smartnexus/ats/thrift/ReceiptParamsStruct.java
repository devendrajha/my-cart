package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Data structure associated with receipts
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class ReceiptParamsStruct implements org.apache.thrift.TBase<ReceiptParamsStruct, ReceiptParamsStruct._Fields>,
		java.io.Serializable, Cloneable, Comparable<ReceiptParamsStruct> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ReceiptParamsStruct");

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Status", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Cookie", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Message", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Type", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Timestamp", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ReceiptParamsStructStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ReceiptParamsStructTupleSchemeFactory());
	}

	/**
	 * Receipt Status/Result
	 * 
	 * @see ReceiptStatus
	 */
	public ReceiptStatus Status; // required
	/**
	 * Message ID associated with receipt
	 */
	public String Cookie; // required
	/**
	 * Additional (optional) information
	 */
	public String Message; // required
	/**
	 * Receipt Type
	 * 
	 * @see ReceiptType
	 */
	public ReceiptType Type; // required
	/**
	 * Timestamp (optional) *
	 */
	public String Timestamp; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * Receipt Status/Result
		 * 
		 * @see ReceiptStatus
		 */
		STATUS((short) 1, "Status"),
		/**
		 * Message ID associated with receipt
		 */
		COOKIE((short) 2, "Cookie"),
		/**
		 * Additional (optional) information
		 */
		MESSAGE((short) 3, "Message"),
		/**
		 * Receipt Type
		 * 
		 * @see ReceiptType
		 */
		TYPE((short) 4, "Type"),
		/**
		 * Timestamp (optional) *
		 */
		TIMESTAMP((short) 5, "Timestamp");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // STATUS
				return STATUS;
			case 2: // COOKIE
				return COOKIE;
			case 3: // MESSAGE
				return MESSAGE;
			case 4: // TYPE
				return TYPE;
			case 5: // TIMESTAMP
				return TIMESTAMP;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("Status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
								ReceiptStatus.class)));
		tmpMap.put(_Fields.COOKIE,
				new org.apache.thrift.meta_data.FieldMetaData("Cookie", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("Message",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
								ReceiptType.class)));
		tmpMap.put(_Fields.TIMESTAMP,
				new org.apache.thrift.meta_data.FieldMetaData("Timestamp",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiptParamsStruct.class, metaDataMap);
	}

	public ReceiptParamsStruct() {
	}

	public ReceiptParamsStruct(ReceiptStatus Status, String Cookie, String Message, ReceiptType Type,
			String Timestamp) {
		this();
		this.Status = Status;
		this.Cookie = Cookie;
		this.Message = Message;
		this.Type = Type;
		this.Timestamp = Timestamp;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ReceiptParamsStruct(ReceiptParamsStruct other) {
		if (other.isSetStatus()) {
			this.Status = other.Status;
		}
		if (other.isSetCookie()) {
			this.Cookie = other.Cookie;
		}
		if (other.isSetMessage()) {
			this.Message = other.Message;
		}
		if (other.isSetType()) {
			this.Type = other.Type;
		}
		if (other.isSetTimestamp()) {
			this.Timestamp = other.Timestamp;
		}
	}

	public ReceiptParamsStruct deepCopy() {
		return new ReceiptParamsStruct(this);
	}

	@Override
	public void clear() {
		this.Status = null;
		this.Cookie = null;
		this.Message = null;
		this.Type = null;
		this.Timestamp = null;
	}

	/**
	 * Receipt Status/Result
	 * 
	 * @see ReceiptStatus
	 */
	public ReceiptStatus getStatus() {
		return this.Status;
	}

	/**
	 * Receipt Status/Result
	 * 
	 * @see ReceiptStatus
	 */
	public ReceiptParamsStruct setStatus(ReceiptStatus Status) {
		this.Status = Status;
		return this;
	}

	public void unsetStatus() {
		this.Status = null;
	}

	/**
	 * Returns true if field Status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return this.Status != null;
	}

	public void setStatusIsSet(boolean value) {
		if (!value) {
			this.Status = null;
		}
	}

	/**
	 * Message ID associated with receipt
	 */
	public String getCookie() {
		return this.Cookie;
	}

	/**
	 * Message ID associated with receipt
	 */
	public ReceiptParamsStruct setCookie(String Cookie) {
		this.Cookie = Cookie;
		return this;
	}

	public void unsetCookie() {
		this.Cookie = null;
	}

	/**
	 * Returns true if field Cookie is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCookie() {
		return this.Cookie != null;
	}

	public void setCookieIsSet(boolean value) {
		if (!value) {
			this.Cookie = null;
		}
	}

	/**
	 * Additional (optional) information
	 */
	public String getMessage() {
		return this.Message;
	}

	/**
	 * Additional (optional) information
	 */
	public ReceiptParamsStruct setMessage(String Message) {
		this.Message = Message;
		return this;
	}

	public void unsetMessage() {
		this.Message = null;
	}

	/**
	 * Returns true if field Message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.Message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.Message = null;
		}
	}

	/**
	 * Receipt Type
	 * 
	 * @see ReceiptType
	 */
	public ReceiptType getType() {
		return this.Type;
	}

	/**
	 * Receipt Type
	 * 
	 * @see ReceiptType
	 */
	public ReceiptParamsStruct setType(ReceiptType Type) {
		this.Type = Type;
		return this;
	}

	public void unsetType() {
		this.Type = null;
	}

	/**
	 * Returns true if field Type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return this.Type != null;
	}

	public void setTypeIsSet(boolean value) {
		if (!value) {
			this.Type = null;
		}
	}

	/**
	 * Timestamp (optional) *
	 */
	public String getTimestamp() {
		return this.Timestamp;
	}

	/**
	 * Timestamp (optional) *
	 */
	public ReceiptParamsStruct setTimestamp(String Timestamp) {
		this.Timestamp = Timestamp;
		return this;
	}

	public void unsetTimestamp() {
		this.Timestamp = null;
	}

	/**
	 * Returns true if field Timestamp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTimestamp() {
		return this.Timestamp != null;
	}

	public void setTimestampIsSet(boolean value) {
		if (!value) {
			this.Timestamp = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((ReceiptStatus) value);
			}
			break;

		case COOKIE:
			if (value == null) {
				unsetCookie();
			} else {
				setCookie((String) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((ReceiptType) value);
			}
			break;

		case TIMESTAMP:
			if (value == null) {
				unsetTimestamp();
			} else {
				setTimestamp((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case STATUS:
			return getStatus();

		case COOKIE:
			return getCookie();

		case MESSAGE:
			return getMessage();

		case TYPE:
			return getType();

		case TIMESTAMP:
			return getTimestamp();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case STATUS:
			return isSetStatus();
		case COOKIE:
			return isSetCookie();
		case MESSAGE:
			return isSetMessage();
		case TYPE:
			return isSetType();
		case TIMESTAMP:
			return isSetTimestamp();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ReceiptParamsStruct)
			return this.equals((ReceiptParamsStruct) that);
		return false;
	}

	public boolean equals(ReceiptParamsStruct that) {
		if (that == null)
			return false;

		boolean this_present_Status = true && this.isSetStatus();
		boolean that_present_Status = true && that.isSetStatus();
		if (this_present_Status || that_present_Status) {
			if (!(this_present_Status && that_present_Status))
				return false;
			if (!this.Status.equals(that.Status))
				return false;
		}

		boolean this_present_Cookie = true && this.isSetCookie();
		boolean that_present_Cookie = true && that.isSetCookie();
		if (this_present_Cookie || that_present_Cookie) {
			if (!(this_present_Cookie && that_present_Cookie))
				return false;
			if (!this.Cookie.equals(that.Cookie))
				return false;
		}

		boolean this_present_Message = true && this.isSetMessage();
		boolean that_present_Message = true && that.isSetMessage();
		if (this_present_Message || that_present_Message) {
			if (!(this_present_Message && that_present_Message))
				return false;
			if (!this.Message.equals(that.Message))
				return false;
		}

		boolean this_present_Type = true && this.isSetType();
		boolean that_present_Type = true && that.isSetType();
		if (this_present_Type || that_present_Type) {
			if (!(this_present_Type && that_present_Type))
				return false;
			if (!this.Type.equals(that.Type))
				return false;
		}

		boolean this_present_Timestamp = true && this.isSetTimestamp();
		boolean that_present_Timestamp = true && that.isSetTimestamp();
		if (this_present_Timestamp || that_present_Timestamp) {
			if (!(this_present_Timestamp && that_present_Timestamp))
				return false;
			if (!this.Timestamp.equals(that.Timestamp))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_Status = true && (isSetStatus());
		list.add(present_Status);
		if (present_Status)
			list.add(Status.getValue());

		boolean present_Cookie = true && (isSetCookie());
		list.add(present_Cookie);
		if (present_Cookie)
			list.add(Cookie);

		boolean present_Message = true && (isSetMessage());
		list.add(present_Message);
		if (present_Message)
			list.add(Message);

		boolean present_Type = true && (isSetType());
		list.add(present_Type);
		if (present_Type)
			list.add(Type.getValue());

		boolean present_Timestamp = true && (isSetTimestamp());
		list.add(present_Timestamp);
		if (present_Timestamp)
			list.add(Timestamp);

		return list.hashCode();
	}

	@Override
	public int compareTo(ReceiptParamsStruct other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Status, other.Status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCookie()).compareTo(other.isSetCookie());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCookie()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Cookie, other.Cookie);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Message, other.Message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimestamp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Timestamp, other.Timestamp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ReceiptParamsStruct(");
		boolean first = true;

		sb.append("Status:");
		if (this.Status == null) {
			sb.append("null");
		} else {
			sb.append(this.Status);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Cookie:");
		if (this.Cookie == null) {
			sb.append("null");
		} else {
			sb.append(this.Cookie);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Message:");
		if (this.Message == null) {
			sb.append("null");
		} else {
			sb.append(this.Message);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Type:");
		if (this.Type == null) {
			sb.append("null");
		} else {
			sb.append(this.Type);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Timestamp:");
		if (this.Timestamp == null) {
			sb.append("null");
		} else {
			sb.append(this.Timestamp);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ReceiptParamsStructStandardSchemeFactory implements SchemeFactory {
		public ReceiptParamsStructStandardScheme getScheme() {
			return new ReceiptParamsStructStandardScheme();
		}
	}

	private static class ReceiptParamsStructStandardScheme extends StandardScheme<ReceiptParamsStruct> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiptParamsStruct struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.Status = ReceiptStatus.findByValue(iprot.readI32());
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // COOKIE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Cookie = iprot.readString();
						struct.setCookieIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.Type = ReceiptType.findByValue(iprot.readI32());
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // TIMESTAMP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Timestamp = iprot.readString();
						struct.setTimestampIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiptParamsStruct struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.Status != null) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				oprot.writeI32(struct.Status.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.Cookie != null) {
				oprot.writeFieldBegin(COOKIE_FIELD_DESC);
				oprot.writeString(struct.Cookie);
				oprot.writeFieldEnd();
			}
			if (struct.Message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.Message);
				oprot.writeFieldEnd();
			}
			if (struct.Type != null) {
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.Type.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.Timestamp != null) {
				oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
				oprot.writeString(struct.Timestamp);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ReceiptParamsStructTupleSchemeFactory implements SchemeFactory {
		public ReceiptParamsStructTupleScheme getScheme() {
			return new ReceiptParamsStructTupleScheme();
		}
	}

	private static class ReceiptParamsStructTupleScheme extends TupleScheme<ReceiptParamsStruct> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ReceiptParamsStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetStatus()) {
				optionals.set(0);
			}
			if (struct.isSetCookie()) {
				optionals.set(1);
			}
			if (struct.isSetMessage()) {
				optionals.set(2);
			}
			if (struct.isSetType()) {
				optionals.set(3);
			}
			if (struct.isSetTimestamp()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.Status.getValue());
			}
			if (struct.isSetCookie()) {
				oprot.writeString(struct.Cookie);
			}
			if (struct.isSetMessage()) {
				oprot.writeString(struct.Message);
			}
			if (struct.isSetType()) {
				oprot.writeI32(struct.Type.getValue());
			}
			if (struct.isSetTimestamp()) {
				oprot.writeString(struct.Timestamp);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ReceiptParamsStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.Status = ReceiptStatus.findByValue(iprot.readI32());
				struct.setStatusIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Cookie = iprot.readString();
				struct.setCookieIsSet(true);
			}
			if (incoming.get(2)) {
				struct.Message = iprot.readString();
				struct.setMessageIsSet(true);
			}
			if (incoming.get(3)) {
				struct.Type = ReceiptType.findByValue(iprot.readI32());
				struct.setTypeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.Timestamp = iprot.readString();
				struct.setTimestampIsSet(true);
			}
		}
	}

}
