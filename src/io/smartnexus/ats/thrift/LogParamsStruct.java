package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Data structure providing log message parameters
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class LogParamsStruct implements org.apache.thrift.TBase<LogParamsStruct, LogParamsStruct._Fields>,
		java.io.Serializable, Cloneable, Comparable<LogParamsStruct> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"LogParamsStruct");

	private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"LogId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Source", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Level", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Label", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Group", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("Log",
			org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new LogParamsStructStandardSchemeFactory());
		schemes.put(TupleScheme.class, new LogParamsStructTupleSchemeFactory());
	}

	/**
	 * Identifies the log category
	 */
	public int LogId; // required
	/**
	 * Source of the log string
	 */
	public String Source; // required
	/**
	 * The log level of the output
	 */
	public String Level; // required
	/**
	 * Tag that can be applied to the log output
	 */
	public String Label; // required
	/**
	 * The log group of the output
	 */
	public String Group; // required
	/**
	 * The log output as a string
	 */
	public String Log; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * Identifies the log category
		 */
		LOG_ID((short) 1, "LogId"),
		/**
		 * Source of the log string
		 */
		SOURCE((short) 2, "Source"),
		/**
		 * The log level of the output
		 */
		LEVEL((short) 3, "Level"),
		/**
		 * Tag that can be applied to the log output
		 */
		LABEL((short) 4, "Label"),
		/**
		 * The log group of the output
		 */
		GROUP((short) 5, "Group"),
		/**
		 * The log output as a string
		 */
		LOG((short) 6, "Log");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // LOG_ID
				return LOG_ID;
			case 2: // SOURCE
				return SOURCE;
			case 3: // LEVEL
				return LEVEL;
			case 4: // LABEL
				return LABEL;
			case 5: // GROUP
				return GROUP;
			case 6: // LOG
				return LOG;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __LOGID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.LOG_ID,
				new org.apache.thrift.meta_data.FieldMetaData("LogId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SOURCE,
				new org.apache.thrift.meta_data.FieldMetaData("Source", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("Level", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("Label", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GROUP,
				new org.apache.thrift.meta_data.FieldMetaData("Group", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LOG,
				new org.apache.thrift.meta_data.FieldMetaData("Log", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogParamsStruct.class, metaDataMap);
	}

	public LogParamsStruct() {
	}

	public LogParamsStruct(int LogId, String Source, String Level, String Label, String Group, String Log) {
		this();
		this.LogId = LogId;
		setLogIdIsSet(true);
		this.Source = Source;
		this.Level = Level;
		this.Label = Label;
		this.Group = Group;
		this.Log = Log;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public LogParamsStruct(LogParamsStruct other) {
		__isset_bitfield = other.__isset_bitfield;
		this.LogId = other.LogId;
		if (other.isSetSource()) {
			this.Source = other.Source;
		}
		if (other.isSetLevel()) {
			this.Level = other.Level;
		}
		if (other.isSetLabel()) {
			this.Label = other.Label;
		}
		if (other.isSetGroup()) {
			this.Group = other.Group;
		}
		if (other.isSetLog()) {
			this.Log = other.Log;
		}
	}

	public LogParamsStruct deepCopy() {
		return new LogParamsStruct(this);
	}

	@Override
	public void clear() {
		setLogIdIsSet(false);
		this.LogId = 0;
		this.Source = null;
		this.Level = null;
		this.Label = null;
		this.Group = null;
		this.Log = null;
	}

	/**
	 * Identifies the log category
	 */
	public int getLogId() {
		return this.LogId;
	}

	/**
	 * Identifies the log category
	 */
	public LogParamsStruct setLogId(int LogId) {
		this.LogId = LogId;
		setLogIdIsSet(true);
		return this;
	}

	public void unsetLogId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGID_ISSET_ID);
	}

	/**
	 * Returns true if field LogId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLogId() {
		return EncodingUtils.testBit(__isset_bitfield, __LOGID_ISSET_ID);
	}

	public void setLogIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGID_ISSET_ID, value);
	}

	/**
	 * Source of the log string
	 */
	public String getSource() {
		return this.Source;
	}

	/**
	 * Source of the log string
	 */
	public LogParamsStruct setSource(String Source) {
		this.Source = Source;
		return this;
	}

	public void unsetSource() {
		this.Source = null;
	}

	/**
	 * Returns true if field Source is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSource() {
		return this.Source != null;
	}

	public void setSourceIsSet(boolean value) {
		if (!value) {
			this.Source = null;
		}
	}

	/**
	 * The log level of the output
	 */
	public String getLevel() {
		return this.Level;
	}

	/**
	 * The log level of the output
	 */
	public LogParamsStruct setLevel(String Level) {
		this.Level = Level;
		return this;
	}

	public void unsetLevel() {
		this.Level = null;
	}

	/**
	 * Returns true if field Level is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLevel() {
		return this.Level != null;
	}

	public void setLevelIsSet(boolean value) {
		if (!value) {
			this.Level = null;
		}
	}

	/**
	 * Tag that can be applied to the log output
	 */
	public String getLabel() {
		return this.Label;
	}

	/**
	 * Tag that can be applied to the log output
	 */
	public LogParamsStruct setLabel(String Label) {
		this.Label = Label;
		return this;
	}

	public void unsetLabel() {
		this.Label = null;
	}

	/**
	 * Returns true if field Label is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLabel() {
		return this.Label != null;
	}

	public void setLabelIsSet(boolean value) {
		if (!value) {
			this.Label = null;
		}
	}

	/**
	 * The log group of the output
	 */
	public String getGroup() {
		return this.Group;
	}

	/**
	 * The log group of the output
	 */
	public LogParamsStruct setGroup(String Group) {
		this.Group = Group;
		return this;
	}

	public void unsetGroup() {
		this.Group = null;
	}

	/**
	 * Returns true if field Group is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGroup() {
		return this.Group != null;
	}

	public void setGroupIsSet(boolean value) {
		if (!value) {
			this.Group = null;
		}
	}

	/**
	 * The log output as a string
	 */
	public String getLog() {
		return this.Log;
	}

	/**
	 * The log output as a string
	 */
	public LogParamsStruct setLog(String Log) {
		this.Log = Log;
		return this;
	}

	public void unsetLog() {
		this.Log = null;
	}

	/**
	 * Returns true if field Log is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLog() {
		return this.Log != null;
	}

	public void setLogIsSet(boolean value) {
		if (!value) {
			this.Log = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case LOG_ID:
			if (value == null) {
				unsetLogId();
			} else {
				setLogId((Integer) value);
			}
			break;

		case SOURCE:
			if (value == null) {
				unsetSource();
			} else {
				setSource((String) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			} else {
				setLevel((String) value);
			}
			break;

		case LABEL:
			if (value == null) {
				unsetLabel();
			} else {
				setLabel((String) value);
			}
			break;

		case GROUP:
			if (value == null) {
				unsetGroup();
			} else {
				setGroup((String) value);
			}
			break;

		case LOG:
			if (value == null) {
				unsetLog();
			} else {
				setLog((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case LOG_ID:
			return getLogId();

		case SOURCE:
			return getSource();

		case LEVEL:
			return getLevel();

		case LABEL:
			return getLabel();

		case GROUP:
			return getGroup();

		case LOG:
			return getLog();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case LOG_ID:
			return isSetLogId();
		case SOURCE:
			return isSetSource();
		case LEVEL:
			return isSetLevel();
		case LABEL:
			return isSetLabel();
		case GROUP:
			return isSetGroup();
		case LOG:
			return isSetLog();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof LogParamsStruct)
			return this.equals((LogParamsStruct) that);
		return false;
	}

	public boolean equals(LogParamsStruct that) {
		if (that == null)
			return false;

		boolean this_present_LogId = true;
		boolean that_present_LogId = true;
		if (this_present_LogId || that_present_LogId) {
			if (!(this_present_LogId && that_present_LogId))
				return false;
			if (this.LogId != that.LogId)
				return false;
		}

		boolean this_present_Source = true && this.isSetSource();
		boolean that_present_Source = true && that.isSetSource();
		if (this_present_Source || that_present_Source) {
			if (!(this_present_Source && that_present_Source))
				return false;
			if (!this.Source.equals(that.Source))
				return false;
		}

		boolean this_present_Level = true && this.isSetLevel();
		boolean that_present_Level = true && that.isSetLevel();
		if (this_present_Level || that_present_Level) {
			if (!(this_present_Level && that_present_Level))
				return false;
			if (!this.Level.equals(that.Level))
				return false;
		}

		boolean this_present_Label = true && this.isSetLabel();
		boolean that_present_Label = true && that.isSetLabel();
		if (this_present_Label || that_present_Label) {
			if (!(this_present_Label && that_present_Label))
				return false;
			if (!this.Label.equals(that.Label))
				return false;
		}

		boolean this_present_Group = true && this.isSetGroup();
		boolean that_present_Group = true && that.isSetGroup();
		if (this_present_Group || that_present_Group) {
			if (!(this_present_Group && that_present_Group))
				return false;
			if (!this.Group.equals(that.Group))
				return false;
		}

		boolean this_present_Log = true && this.isSetLog();
		boolean that_present_Log = true && that.isSetLog();
		if (this_present_Log || that_present_Log) {
			if (!(this_present_Log && that_present_Log))
				return false;
			if (!this.Log.equals(that.Log))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_LogId = true;
		list.add(present_LogId);
		if (present_LogId)
			list.add(LogId);

		boolean present_Source = true && (isSetSource());
		list.add(present_Source);
		if (present_Source)
			list.add(Source);

		boolean present_Level = true && (isSetLevel());
		list.add(present_Level);
		if (present_Level)
			list.add(Level);

		boolean present_Label = true && (isSetLabel());
		list.add(present_Label);
		if (present_Label)
			list.add(Label);

		boolean present_Group = true && (isSetGroup());
		list.add(present_Group);
		if (present_Group)
			list.add(Group);

		boolean present_Log = true && (isSetLog());
		list.add(present_Log);
		if (present_Log)
			list.add(Log);

		return list.hashCode();
	}

	@Override
	public int compareTo(LogParamsStruct other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetLogId()).compareTo(other.isSetLogId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLogId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogId, other.LogId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Source, other.Source);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Level, other.Level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Label, other.Label);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGroup()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Group, other.Group);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLog()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Log, other.Log);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("LogParamsStruct(");
		boolean first = true;

		sb.append("LogId:");
		sb.append(this.LogId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Source:");
		if (this.Source == null) {
			sb.append("null");
		} else {
			sb.append(this.Source);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Level:");
		if (this.Level == null) {
			sb.append("null");
		} else {
			sb.append(this.Level);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Label:");
		if (this.Label == null) {
			sb.append("null");
		} else {
			sb.append(this.Label);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Group:");
		if (this.Group == null) {
			sb.append("null");
		} else {
			sb.append(this.Group);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Log:");
		if (this.Log == null) {
			sb.append("null");
		} else {
			sb.append(this.Log);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class LogParamsStructStandardSchemeFactory implements SchemeFactory {
		public LogParamsStructStandardScheme getScheme() {
			return new LogParamsStructStandardScheme();
		}
	}

	private static class LogParamsStructStandardScheme extends StandardScheme<LogParamsStruct> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, LogParamsStruct struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // LOG_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.LogId = iprot.readI32();
						struct.setLogIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Source = iprot.readString();
						struct.setSourceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Level = iprot.readString();
						struct.setLevelIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Label = iprot.readString();
						struct.setLabelIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // GROUP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Group = iprot.readString();
						struct.setGroupIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // LOG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Log = iprot.readString();
						struct.setLogIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, LogParamsStruct struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
			oprot.writeI32(struct.LogId);
			oprot.writeFieldEnd();
			if (struct.Source != null) {
				oprot.writeFieldBegin(SOURCE_FIELD_DESC);
				oprot.writeString(struct.Source);
				oprot.writeFieldEnd();
			}
			if (struct.Level != null) {
				oprot.writeFieldBegin(LEVEL_FIELD_DESC);
				oprot.writeString(struct.Level);
				oprot.writeFieldEnd();
			}
			if (struct.Label != null) {
				oprot.writeFieldBegin(LABEL_FIELD_DESC);
				oprot.writeString(struct.Label);
				oprot.writeFieldEnd();
			}
			if (struct.Group != null) {
				oprot.writeFieldBegin(GROUP_FIELD_DESC);
				oprot.writeString(struct.Group);
				oprot.writeFieldEnd();
			}
			if (struct.Log != null) {
				oprot.writeFieldBegin(LOG_FIELD_DESC);
				oprot.writeString(struct.Log);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class LogParamsStructTupleSchemeFactory implements SchemeFactory {
		public LogParamsStructTupleScheme getScheme() {
			return new LogParamsStructTupleScheme();
		}
	}

	private static class LogParamsStructTupleScheme extends TupleScheme<LogParamsStruct> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, LogParamsStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetLogId()) {
				optionals.set(0);
			}
			if (struct.isSetSource()) {
				optionals.set(1);
			}
			if (struct.isSetLevel()) {
				optionals.set(2);
			}
			if (struct.isSetLabel()) {
				optionals.set(3);
			}
			if (struct.isSetGroup()) {
				optionals.set(4);
			}
			if (struct.isSetLog()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetLogId()) {
				oprot.writeI32(struct.LogId);
			}
			if (struct.isSetSource()) {
				oprot.writeString(struct.Source);
			}
			if (struct.isSetLevel()) {
				oprot.writeString(struct.Level);
			}
			if (struct.isSetLabel()) {
				oprot.writeString(struct.Label);
			}
			if (struct.isSetGroup()) {
				oprot.writeString(struct.Group);
			}
			if (struct.isSetLog()) {
				oprot.writeString(struct.Log);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, LogParamsStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.LogId = iprot.readI32();
				struct.setLogIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Source = iprot.readString();
				struct.setSourceIsSet(true);
			}
			if (incoming.get(2)) {
				struct.Level = iprot.readString();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(3)) {
				struct.Label = iprot.readString();
				struct.setLabelIsSet(true);
			}
			if (incoming.get(4)) {
				struct.Group = iprot.readString();
				struct.setGroupIsSet(true);
			}
			if (incoming.get(5)) {
				struct.Log = iprot.readString();
				struct.setLogIsSet(true);
			}
		}
	}

}
