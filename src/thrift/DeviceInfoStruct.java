package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Information describing the platform the Agent is running on
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class DeviceInfoStruct implements org.apache.thrift.TBase<DeviceInfoStruct, DeviceInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<DeviceInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceInfoStruct");

  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("MAC", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("OS", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OSVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("OSVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("ApiVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("Batch", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RMA_FIELD_DESC = new org.apache.thrift.protocol.TField("RMA", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RMA_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("RmaDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HW_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("HwVersion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUILDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("Builddate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("SN", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SW_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("SwVersion", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SwName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("HwName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("Status", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("DeviceId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CUSTOMER_UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("CustomerUniqueId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PLATFORM_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("PlatformArch", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField AGENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("AgentType", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceInfoStructTupleSchemeFactory());
  }

  /**
   * MAC address
   */
  public String MAC; // required
  /**
   * Operating system
   */
  public String OS; // required
  /**
   * Operating system version
   */
  public String OSVersion; // required
  /**
   * Cloud Platfrom  API version
   */
  public String ApiVersion; // required
  /**
   * Hardware batch identifier
   */
  public String Batch; // required
  /**
   * Return merchandise authorization
   */
  public String RMA; // required
  /**
   * RMA date
   */
  public String RmaDate; // required
  /**
   * Hardware version
   */
  public String HwVersion; // required
  /**
   * Hardware build date
   */
  public String Builddate; // required
  /**
   * Serial number
   */
  public String SN; // required
  /**
   * Software version
   */
  public String SwVersion; // required
  /**
   * Software name
   */
  public String SwName; // required
  /**
   * Hardware name
   */
  public String HwName; // required
  /**
   * Device operational status
   */
  public String Status; // required
  /**
   * Device identifier/name used for MQTT connection
   */
  public String DeviceId; // required
  /**
   * Unique identifier for customer (typically 6 characeters)
   */
  public String CustomerUniqueId; // required
  /**
   * Description of platform architecture (e.g. x86, MIPS, etc)
   */
  public String PlatformArch; // required
  /**
   * Description of Agent type (e.g. Linux, RTOS, etc)
   */
  public String AgentType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * MAC address
     */
    MAC((short)1, "MAC"),
    /**
     * Operating system
     */
    OS((short)2, "OS"),
    /**
     * Operating system version
     */
    OSVERSION((short)3, "OSVersion"),
    /**
     * Cloud Platfrom  API version
     */
    API_VERSION((short)4, "ApiVersion"),
    /**
     * Hardware batch identifier
     */
    BATCH((short)5, "Batch"),
    /**
     * Return merchandise authorization
     */
    RMA((short)6, "RMA"),
    /**
     * RMA date
     */
    RMA_DATE((short)7, "RmaDate"),
    /**
     * Hardware version
     */
    HW_VERSION((short)8, "HwVersion"),
    /**
     * Hardware build date
     */
    BUILDDATE((short)9, "Builddate"),
    /**
     * Serial number
     */
    SN((short)10, "SN"),
    /**
     * Software version
     */
    SW_VERSION((short)11, "SwVersion"),
    /**
     * Software name
     */
    SW_NAME((short)12, "SwName"),
    /**
     * Hardware name
     */
    HW_NAME((short)13, "HwName"),
    /**
     * Device operational status
     */
    STATUS((short)14, "Status"),
    /**
     * Device identifier/name used for MQTT connection
     */
    DEVICE_ID((short)15, "DeviceId"),
    /**
     * Unique identifier for customer (typically 6 characeters)
     */
    CUSTOMER_UNIQUE_ID((short)16, "CustomerUniqueId"),
    /**
     * Description of platform architecture (e.g. x86, MIPS, etc)
     */
    PLATFORM_ARCH((short)17, "PlatformArch"),
    /**
     * Description of Agent type (e.g. Linux, RTOS, etc)
     */
    AGENT_TYPE((short)18, "AgentType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAC
          return MAC;
        case 2: // OS
          return OS;
        case 3: // OSVERSION
          return OSVERSION;
        case 4: // API_VERSION
          return API_VERSION;
        case 5: // BATCH
          return BATCH;
        case 6: // RMA
          return RMA;
        case 7: // RMA_DATE
          return RMA_DATE;
        case 8: // HW_VERSION
          return HW_VERSION;
        case 9: // BUILDDATE
          return BUILDDATE;
        case 10: // SN
          return SN;
        case 11: // SW_VERSION
          return SW_VERSION;
        case 12: // SW_NAME
          return SW_NAME;
        case 13: // HW_NAME
          return HW_NAME;
        case 14: // STATUS
          return STATUS;
        case 15: // DEVICE_ID
          return DEVICE_ID;
        case 16: // CUSTOMER_UNIQUE_ID
          return CUSTOMER_UNIQUE_ID;
        case 17: // PLATFORM_ARCH
          return PLATFORM_ARCH;
        case 18: // AGENT_TYPE
          return AGENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("MAC", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("OS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OSVERSION, new org.apache.thrift.meta_data.FieldMetaData("OSVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("ApiVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH, new org.apache.thrift.meta_data.FieldMetaData("Batch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RMA, new org.apache.thrift.meta_data.FieldMetaData("RMA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RMA_DATE, new org.apache.thrift.meta_data.FieldMetaData("RmaDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HW_VERSION, new org.apache.thrift.meta_data.FieldMetaData("HwVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUILDDATE, new org.apache.thrift.meta_data.FieldMetaData("Builddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("SN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SW_VERSION, new org.apache.thrift.meta_data.FieldMetaData("SwVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SW_NAME, new org.apache.thrift.meta_data.FieldMetaData("SwName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HW_NAME, new org.apache.thrift.meta_data.FieldMetaData("HwName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("Status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("DeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("CustomerUniqueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM_ARCH, new org.apache.thrift.meta_data.FieldMetaData("PlatformArch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("AgentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceInfoStruct.class, metaDataMap);
  }

  public DeviceInfoStruct() {
  }

  public DeviceInfoStruct(
    String MAC,
    String OS,
    String OSVersion,
    String ApiVersion,
    String Batch,
    String RMA,
    String RmaDate,
    String HwVersion,
    String Builddate,
    String SN,
    String SwVersion,
    String SwName,
    String HwName,
    String Status,
    String DeviceId,
    String CustomerUniqueId,
    String PlatformArch,
    String AgentType)
  {
    this();
    this.MAC = MAC;
    this.OS = OS;
    this.OSVersion = OSVersion;
    this.ApiVersion = ApiVersion;
    this.Batch = Batch;
    this.RMA = RMA;
    this.RmaDate = RmaDate;
    this.HwVersion = HwVersion;
    this.Builddate = Builddate;
    this.SN = SN;
    this.SwVersion = SwVersion;
    this.SwName = SwName;
    this.HwName = HwName;
    this.Status = Status;
    this.DeviceId = DeviceId;
    this.CustomerUniqueId = CustomerUniqueId;
    this.PlatformArch = PlatformArch;
    this.AgentType = AgentType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceInfoStruct(DeviceInfoStruct other) {
    if (other.isSetMAC()) {
      this.MAC = other.MAC;
    }
    if (other.isSetOS()) {
      this.OS = other.OS;
    }
    if (other.isSetOSVersion()) {
      this.OSVersion = other.OSVersion;
    }
    if (other.isSetApiVersion()) {
      this.ApiVersion = other.ApiVersion;
    }
    if (other.isSetBatch()) {
      this.Batch = other.Batch;
    }
    if (other.isSetRMA()) {
      this.RMA = other.RMA;
    }
    if (other.isSetRmaDate()) {
      this.RmaDate = other.RmaDate;
    }
    if (other.isSetHwVersion()) {
      this.HwVersion = other.HwVersion;
    }
    if (other.isSetBuilddate()) {
      this.Builddate = other.Builddate;
    }
    if (other.isSetSN()) {
      this.SN = other.SN;
    }
    if (other.isSetSwVersion()) {
      this.SwVersion = other.SwVersion;
    }
    if (other.isSetSwName()) {
      this.SwName = other.SwName;
    }
    if (other.isSetHwName()) {
      this.HwName = other.HwName;
    }
    if (other.isSetStatus()) {
      this.Status = other.Status;
    }
    if (other.isSetDeviceId()) {
      this.DeviceId = other.DeviceId;
    }
    if (other.isSetCustomerUniqueId()) {
      this.CustomerUniqueId = other.CustomerUniqueId;
    }
    if (other.isSetPlatformArch()) {
      this.PlatformArch = other.PlatformArch;
    }
    if (other.isSetAgentType()) {
      this.AgentType = other.AgentType;
    }
  }

  public DeviceInfoStruct deepCopy() {
    return new DeviceInfoStruct(this);
  }

  @Override
  public void clear() {
    this.MAC = null;
    this.OS = null;
    this.OSVersion = null;
    this.ApiVersion = null;
    this.Batch = null;
    this.RMA = null;
    this.RmaDate = null;
    this.HwVersion = null;
    this.Builddate = null;
    this.SN = null;
    this.SwVersion = null;
    this.SwName = null;
    this.HwName = null;
    this.Status = null;
    this.DeviceId = null;
    this.CustomerUniqueId = null;
    this.PlatformArch = null;
    this.AgentType = null;
  }

  /**
   * MAC address
   */
  public String getMAC() {
    return this.MAC;
  }

  /**
   * MAC address
   */
  public DeviceInfoStruct setMAC(String MAC) {
    this.MAC = MAC;
    return this;
  }

  public void unsetMAC() {
    this.MAC = null;
  }

  /** Returns true if field MAC is set (has been assigned a value) and false otherwise */
  public boolean isSetMAC() {
    return this.MAC != null;
  }

  public void setMACIsSet(boolean value) {
    if (!value) {
      this.MAC = null;
    }
  }

  /**
   * Operating system
   */
  public String getOS() {
    return this.OS;
  }

  /**
   * Operating system
   */
  public DeviceInfoStruct setOS(String OS) {
    this.OS = OS;
    return this;
  }

  public void unsetOS() {
    this.OS = null;
  }

  /** Returns true if field OS is set (has been assigned a value) and false otherwise */
  public boolean isSetOS() {
    return this.OS != null;
  }

  public void setOSIsSet(boolean value) {
    if (!value) {
      this.OS = null;
    }
  }

  /**
   * Operating system version
   */
  public String getOSVersion() {
    return this.OSVersion;
  }

  /**
   * Operating system version
   */
  public DeviceInfoStruct setOSVersion(String OSVersion) {
    this.OSVersion = OSVersion;
    return this;
  }

  public void unsetOSVersion() {
    this.OSVersion = null;
  }

  /** Returns true if field OSVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOSVersion() {
    return this.OSVersion != null;
  }

  public void setOSVersionIsSet(boolean value) {
    if (!value) {
      this.OSVersion = null;
    }
  }

  /**
   * Cloud Platfrom  API version
   */
  public String getApiVersion() {
    return this.ApiVersion;
  }

  /**
   * Cloud Platfrom  API version
   */
  public DeviceInfoStruct setApiVersion(String ApiVersion) {
    this.ApiVersion = ApiVersion;
    return this;
  }

  public void unsetApiVersion() {
    this.ApiVersion = null;
  }

  /** Returns true if field ApiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetApiVersion() {
    return this.ApiVersion != null;
  }

  public void setApiVersionIsSet(boolean value) {
    if (!value) {
      this.ApiVersion = null;
    }
  }

  /**
   * Hardware batch identifier
   */
  public String getBatch() {
    return this.Batch;
  }

  /**
   * Hardware batch identifier
   */
  public DeviceInfoStruct setBatch(String Batch) {
    this.Batch = Batch;
    return this;
  }

  public void unsetBatch() {
    this.Batch = null;
  }

  /** Returns true if field Batch is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch() {
    return this.Batch != null;
  }

  public void setBatchIsSet(boolean value) {
    if (!value) {
      this.Batch = null;
    }
  }

  /**
   * Return merchandise authorization
   */
  public String getRMA() {
    return this.RMA;
  }

  /**
   * Return merchandise authorization
   */
  public DeviceInfoStruct setRMA(String RMA) {
    this.RMA = RMA;
    return this;
  }

  public void unsetRMA() {
    this.RMA = null;
  }

  /** Returns true if field RMA is set (has been assigned a value) and false otherwise */
  public boolean isSetRMA() {
    return this.RMA != null;
  }

  public void setRMAIsSet(boolean value) {
    if (!value) {
      this.RMA = null;
    }
  }

  /**
   * RMA date
   */
  public String getRmaDate() {
    return this.RmaDate;
  }

  /**
   * RMA date
   */
  public DeviceInfoStruct setRmaDate(String RmaDate) {
    this.RmaDate = RmaDate;
    return this;
  }

  public void unsetRmaDate() {
    this.RmaDate = null;
  }

  /** Returns true if field RmaDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRmaDate() {
    return this.RmaDate != null;
  }

  public void setRmaDateIsSet(boolean value) {
    if (!value) {
      this.RmaDate = null;
    }
  }

  /**
   * Hardware version
   */
  public String getHwVersion() {
    return this.HwVersion;
  }

  /**
   * Hardware version
   */
  public DeviceInfoStruct setHwVersion(String HwVersion) {
    this.HwVersion = HwVersion;
    return this;
  }

  public void unsetHwVersion() {
    this.HwVersion = null;
  }

  /** Returns true if field HwVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHwVersion() {
    return this.HwVersion != null;
  }

  public void setHwVersionIsSet(boolean value) {
    if (!value) {
      this.HwVersion = null;
    }
  }

  /**
   * Hardware build date
   */
  public String getBuilddate() {
    return this.Builddate;
  }

  /**
   * Hardware build date
   */
  public DeviceInfoStruct setBuilddate(String Builddate) {
    this.Builddate = Builddate;
    return this;
  }

  public void unsetBuilddate() {
    this.Builddate = null;
  }

  /** Returns true if field Builddate is set (has been assigned a value) and false otherwise */
  public boolean isSetBuilddate() {
    return this.Builddate != null;
  }

  public void setBuilddateIsSet(boolean value) {
    if (!value) {
      this.Builddate = null;
    }
  }

  /**
   * Serial number
   */
  public String getSN() {
    return this.SN;
  }

  /**
   * Serial number
   */
  public DeviceInfoStruct setSN(String SN) {
    this.SN = SN;
    return this;
  }

  public void unsetSN() {
    this.SN = null;
  }

  /** Returns true if field SN is set (has been assigned a value) and false otherwise */
  public boolean isSetSN() {
    return this.SN != null;
  }

  public void setSNIsSet(boolean value) {
    if (!value) {
      this.SN = null;
    }
  }

  /**
   * Software version
   */
  public String getSwVersion() {
    return this.SwVersion;
  }

  /**
   * Software version
   */
  public DeviceInfoStruct setSwVersion(String SwVersion) {
    this.SwVersion = SwVersion;
    return this;
  }

  public void unsetSwVersion() {
    this.SwVersion = null;
  }

  /** Returns true if field SwVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSwVersion() {
    return this.SwVersion != null;
  }

  public void setSwVersionIsSet(boolean value) {
    if (!value) {
      this.SwVersion = null;
    }
  }

  /**
   * Software name
   */
  public String getSwName() {
    return this.SwName;
  }

  /**
   * Software name
   */
  public DeviceInfoStruct setSwName(String SwName) {
    this.SwName = SwName;
    return this;
  }

  public void unsetSwName() {
    this.SwName = null;
  }

  /** Returns true if field SwName is set (has been assigned a value) and false otherwise */
  public boolean isSetSwName() {
    return this.SwName != null;
  }

  public void setSwNameIsSet(boolean value) {
    if (!value) {
      this.SwName = null;
    }
  }

  /**
   * Hardware name
   */
  public String getHwName() {
    return this.HwName;
  }

  /**
   * Hardware name
   */
  public DeviceInfoStruct setHwName(String HwName) {
    this.HwName = HwName;
    return this;
  }

  public void unsetHwName() {
    this.HwName = null;
  }

  /** Returns true if field HwName is set (has been assigned a value) and false otherwise */
  public boolean isSetHwName() {
    return this.HwName != null;
  }

  public void setHwNameIsSet(boolean value) {
    if (!value) {
      this.HwName = null;
    }
  }

  /**
   * Device operational status
   */
  public String getStatus() {
    return this.Status;
  }

  /**
   * Device operational status
   */
  public DeviceInfoStruct setStatus(String Status) {
    this.Status = Status;
    return this;
  }

  public void unsetStatus() {
    this.Status = null;
  }

  /** Returns true if field Status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.Status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.Status = null;
    }
  }

  /**
   * Device identifier/name used for MQTT connection
   */
  public String getDeviceId() {
    return this.DeviceId;
  }

  /**
   * Device identifier/name used for MQTT connection
   */
  public DeviceInfoStruct setDeviceId(String DeviceId) {
    this.DeviceId = DeviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.DeviceId = null;
  }

  /** Returns true if field DeviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.DeviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.DeviceId = null;
    }
  }

  /**
   * Unique identifier for customer (typically 6 characeters)
   */
  public String getCustomerUniqueId() {
    return this.CustomerUniqueId;
  }

  /**
   * Unique identifier for customer (typically 6 characeters)
   */
  public DeviceInfoStruct setCustomerUniqueId(String CustomerUniqueId) {
    this.CustomerUniqueId = CustomerUniqueId;
    return this;
  }

  public void unsetCustomerUniqueId() {
    this.CustomerUniqueId = null;
  }

  /** Returns true if field CustomerUniqueId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerUniqueId() {
    return this.CustomerUniqueId != null;
  }

  public void setCustomerUniqueIdIsSet(boolean value) {
    if (!value) {
      this.CustomerUniqueId = null;
    }
  }

  /**
   * Description of platform architecture (e.g. x86, MIPS, etc)
   */
  public String getPlatformArch() {
    return this.PlatformArch;
  }

  /**
   * Description of platform architecture (e.g. x86, MIPS, etc)
   */
  public DeviceInfoStruct setPlatformArch(String PlatformArch) {
    this.PlatformArch = PlatformArch;
    return this;
  }

  public void unsetPlatformArch() {
    this.PlatformArch = null;
  }

  /** Returns true if field PlatformArch is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformArch() {
    return this.PlatformArch != null;
  }

  public void setPlatformArchIsSet(boolean value) {
    if (!value) {
      this.PlatformArch = null;
    }
  }

  /**
   * Description of Agent type (e.g. Linux, RTOS, etc)
   */
  public String getAgentType() {
    return this.AgentType;
  }

  /**
   * Description of Agent type (e.g. Linux, RTOS, etc)
   */
  public DeviceInfoStruct setAgentType(String AgentType) {
    this.AgentType = AgentType;
    return this;
  }

  public void unsetAgentType() {
    this.AgentType = null;
  }

  /** Returns true if field AgentType is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentType() {
    return this.AgentType != null;
  }

  public void setAgentTypeIsSet(boolean value) {
    if (!value) {
      this.AgentType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAC:
      if (value == null) {
        unsetMAC();
      } else {
        setMAC((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOS();
      } else {
        setOS((String)value);
      }
      break;

    case OSVERSION:
      if (value == null) {
        unsetOSVersion();
      } else {
        setOSVersion((String)value);
      }
      break;

    case API_VERSION:
      if (value == null) {
        unsetApiVersion();
      } else {
        setApiVersion((String)value);
      }
      break;

    case BATCH:
      if (value == null) {
        unsetBatch();
      } else {
        setBatch((String)value);
      }
      break;

    case RMA:
      if (value == null) {
        unsetRMA();
      } else {
        setRMA((String)value);
      }
      break;

    case RMA_DATE:
      if (value == null) {
        unsetRmaDate();
      } else {
        setRmaDate((String)value);
      }
      break;

    case HW_VERSION:
      if (value == null) {
        unsetHwVersion();
      } else {
        setHwVersion((String)value);
      }
      break;

    case BUILDDATE:
      if (value == null) {
        unsetBuilddate();
      } else {
        setBuilddate((String)value);
      }
      break;

    case SN:
      if (value == null) {
        unsetSN();
      } else {
        setSN((String)value);
      }
      break;

    case SW_VERSION:
      if (value == null) {
        unsetSwVersion();
      } else {
        setSwVersion((String)value);
      }
      break;

    case SW_NAME:
      if (value == null) {
        unsetSwName();
      } else {
        setSwName((String)value);
      }
      break;

    case HW_NAME:
      if (value == null) {
        unsetHwName();
      } else {
        setHwName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case CUSTOMER_UNIQUE_ID:
      if (value == null) {
        unsetCustomerUniqueId();
      } else {
        setCustomerUniqueId((String)value);
      }
      break;

    case PLATFORM_ARCH:
      if (value == null) {
        unsetPlatformArch();
      } else {
        setPlatformArch((String)value);
      }
      break;

    case AGENT_TYPE:
      if (value == null) {
        unsetAgentType();
      } else {
        setAgentType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAC:
      return getMAC();

    case OS:
      return getOS();

    case OSVERSION:
      return getOSVersion();

    case API_VERSION:
      return getApiVersion();

    case BATCH:
      return getBatch();

    case RMA:
      return getRMA();

    case RMA_DATE:
      return getRmaDate();

    case HW_VERSION:
      return getHwVersion();

    case BUILDDATE:
      return getBuilddate();

    case SN:
      return getSN();

    case SW_VERSION:
      return getSwVersion();

    case SW_NAME:
      return getSwName();

    case HW_NAME:
      return getHwName();

    case STATUS:
      return getStatus();

    case DEVICE_ID:
      return getDeviceId();

    case CUSTOMER_UNIQUE_ID:
      return getCustomerUniqueId();

    case PLATFORM_ARCH:
      return getPlatformArch();

    case AGENT_TYPE:
      return getAgentType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAC:
      return isSetMAC();
    case OS:
      return isSetOS();
    case OSVERSION:
      return isSetOSVersion();
    case API_VERSION:
      return isSetApiVersion();
    case BATCH:
      return isSetBatch();
    case RMA:
      return isSetRMA();
    case RMA_DATE:
      return isSetRmaDate();
    case HW_VERSION:
      return isSetHwVersion();
    case BUILDDATE:
      return isSetBuilddate();
    case SN:
      return isSetSN();
    case SW_VERSION:
      return isSetSwVersion();
    case SW_NAME:
      return isSetSwName();
    case HW_NAME:
      return isSetHwName();
    case STATUS:
      return isSetStatus();
    case DEVICE_ID:
      return isSetDeviceId();
    case CUSTOMER_UNIQUE_ID:
      return isSetCustomerUniqueId();
    case PLATFORM_ARCH:
      return isSetPlatformArch();
    case AGENT_TYPE:
      return isSetAgentType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceInfoStruct)
      return this.equals((DeviceInfoStruct)that);
    return false;
  }

  public boolean equals(DeviceInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_MAC = true && this.isSetMAC();
    boolean that_present_MAC = true && that.isSetMAC();
    if (this_present_MAC || that_present_MAC) {
      if (!(this_present_MAC && that_present_MAC))
        return false;
      if (!this.MAC.equals(that.MAC))
        return false;
    }

    boolean this_present_OS = true && this.isSetOS();
    boolean that_present_OS = true && that.isSetOS();
    if (this_present_OS || that_present_OS) {
      if (!(this_present_OS && that_present_OS))
        return false;
      if (!this.OS.equals(that.OS))
        return false;
    }

    boolean this_present_OSVersion = true && this.isSetOSVersion();
    boolean that_present_OSVersion = true && that.isSetOSVersion();
    if (this_present_OSVersion || that_present_OSVersion) {
      if (!(this_present_OSVersion && that_present_OSVersion))
        return false;
      if (!this.OSVersion.equals(that.OSVersion))
        return false;
    }

    boolean this_present_ApiVersion = true && this.isSetApiVersion();
    boolean that_present_ApiVersion = true && that.isSetApiVersion();
    if (this_present_ApiVersion || that_present_ApiVersion) {
      if (!(this_present_ApiVersion && that_present_ApiVersion))
        return false;
      if (!this.ApiVersion.equals(that.ApiVersion))
        return false;
    }

    boolean this_present_Batch = true && this.isSetBatch();
    boolean that_present_Batch = true && that.isSetBatch();
    if (this_present_Batch || that_present_Batch) {
      if (!(this_present_Batch && that_present_Batch))
        return false;
      if (!this.Batch.equals(that.Batch))
        return false;
    }

    boolean this_present_RMA = true && this.isSetRMA();
    boolean that_present_RMA = true && that.isSetRMA();
    if (this_present_RMA || that_present_RMA) {
      if (!(this_present_RMA && that_present_RMA))
        return false;
      if (!this.RMA.equals(that.RMA))
        return false;
    }

    boolean this_present_RmaDate = true && this.isSetRmaDate();
    boolean that_present_RmaDate = true && that.isSetRmaDate();
    if (this_present_RmaDate || that_present_RmaDate) {
      if (!(this_present_RmaDate && that_present_RmaDate))
        return false;
      if (!this.RmaDate.equals(that.RmaDate))
        return false;
    }

    boolean this_present_HwVersion = true && this.isSetHwVersion();
    boolean that_present_HwVersion = true && that.isSetHwVersion();
    if (this_present_HwVersion || that_present_HwVersion) {
      if (!(this_present_HwVersion && that_present_HwVersion))
        return false;
      if (!this.HwVersion.equals(that.HwVersion))
        return false;
    }

    boolean this_present_Builddate = true && this.isSetBuilddate();
    boolean that_present_Builddate = true && that.isSetBuilddate();
    if (this_present_Builddate || that_present_Builddate) {
      if (!(this_present_Builddate && that_present_Builddate))
        return false;
      if (!this.Builddate.equals(that.Builddate))
        return false;
    }

    boolean this_present_SN = true && this.isSetSN();
    boolean that_present_SN = true && that.isSetSN();
    if (this_present_SN || that_present_SN) {
      if (!(this_present_SN && that_present_SN))
        return false;
      if (!this.SN.equals(that.SN))
        return false;
    }

    boolean this_present_SwVersion = true && this.isSetSwVersion();
    boolean that_present_SwVersion = true && that.isSetSwVersion();
    if (this_present_SwVersion || that_present_SwVersion) {
      if (!(this_present_SwVersion && that_present_SwVersion))
        return false;
      if (!this.SwVersion.equals(that.SwVersion))
        return false;
    }

    boolean this_present_SwName = true && this.isSetSwName();
    boolean that_present_SwName = true && that.isSetSwName();
    if (this_present_SwName || that_present_SwName) {
      if (!(this_present_SwName && that_present_SwName))
        return false;
      if (!this.SwName.equals(that.SwName))
        return false;
    }

    boolean this_present_HwName = true && this.isSetHwName();
    boolean that_present_HwName = true && that.isSetHwName();
    if (this_present_HwName || that_present_HwName) {
      if (!(this_present_HwName && that_present_HwName))
        return false;
      if (!this.HwName.equals(that.HwName))
        return false;
    }

    boolean this_present_Status = true && this.isSetStatus();
    boolean that_present_Status = true && that.isSetStatus();
    if (this_present_Status || that_present_Status) {
      if (!(this_present_Status && that_present_Status))
        return false;
      if (!this.Status.equals(that.Status))
        return false;
    }

    boolean this_present_DeviceId = true && this.isSetDeviceId();
    boolean that_present_DeviceId = true && that.isSetDeviceId();
    if (this_present_DeviceId || that_present_DeviceId) {
      if (!(this_present_DeviceId && that_present_DeviceId))
        return false;
      if (!this.DeviceId.equals(that.DeviceId))
        return false;
    }

    boolean this_present_CustomerUniqueId = true && this.isSetCustomerUniqueId();
    boolean that_present_CustomerUniqueId = true && that.isSetCustomerUniqueId();
    if (this_present_CustomerUniqueId || that_present_CustomerUniqueId) {
      if (!(this_present_CustomerUniqueId && that_present_CustomerUniqueId))
        return false;
      if (!this.CustomerUniqueId.equals(that.CustomerUniqueId))
        return false;
    }

    boolean this_present_PlatformArch = true && this.isSetPlatformArch();
    boolean that_present_PlatformArch = true && that.isSetPlatformArch();
    if (this_present_PlatformArch || that_present_PlatformArch) {
      if (!(this_present_PlatformArch && that_present_PlatformArch))
        return false;
      if (!this.PlatformArch.equals(that.PlatformArch))
        return false;
    }

    boolean this_present_AgentType = true && this.isSetAgentType();
    boolean that_present_AgentType = true && that.isSetAgentType();
    if (this_present_AgentType || that_present_AgentType) {
      if (!(this_present_AgentType && that_present_AgentType))
        return false;
      if (!this.AgentType.equals(that.AgentType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_MAC = true && (isSetMAC());
    list.add(present_MAC);
    if (present_MAC)
      list.add(MAC);

    boolean present_OS = true && (isSetOS());
    list.add(present_OS);
    if (present_OS)
      list.add(OS);

    boolean present_OSVersion = true && (isSetOSVersion());
    list.add(present_OSVersion);
    if (present_OSVersion)
      list.add(OSVersion);

    boolean present_ApiVersion = true && (isSetApiVersion());
    list.add(present_ApiVersion);
    if (present_ApiVersion)
      list.add(ApiVersion);

    boolean present_Batch = true && (isSetBatch());
    list.add(present_Batch);
    if (present_Batch)
      list.add(Batch);

    boolean present_RMA = true && (isSetRMA());
    list.add(present_RMA);
    if (present_RMA)
      list.add(RMA);

    boolean present_RmaDate = true && (isSetRmaDate());
    list.add(present_RmaDate);
    if (present_RmaDate)
      list.add(RmaDate);

    boolean present_HwVersion = true && (isSetHwVersion());
    list.add(present_HwVersion);
    if (present_HwVersion)
      list.add(HwVersion);

    boolean present_Builddate = true && (isSetBuilddate());
    list.add(present_Builddate);
    if (present_Builddate)
      list.add(Builddate);

    boolean present_SN = true && (isSetSN());
    list.add(present_SN);
    if (present_SN)
      list.add(SN);

    boolean present_SwVersion = true && (isSetSwVersion());
    list.add(present_SwVersion);
    if (present_SwVersion)
      list.add(SwVersion);

    boolean present_SwName = true && (isSetSwName());
    list.add(present_SwName);
    if (present_SwName)
      list.add(SwName);

    boolean present_HwName = true && (isSetHwName());
    list.add(present_HwName);
    if (present_HwName)
      list.add(HwName);

    boolean present_Status = true && (isSetStatus());
    list.add(present_Status);
    if (present_Status)
      list.add(Status);

    boolean present_DeviceId = true && (isSetDeviceId());
    list.add(present_DeviceId);
    if (present_DeviceId)
      list.add(DeviceId);

    boolean present_CustomerUniqueId = true && (isSetCustomerUniqueId());
    list.add(present_CustomerUniqueId);
    if (present_CustomerUniqueId)
      list.add(CustomerUniqueId);

    boolean present_PlatformArch = true && (isSetPlatformArch());
    list.add(present_PlatformArch);
    if (present_PlatformArch)
      list.add(PlatformArch);

    boolean present_AgentType = true && (isSetAgentType());
    list.add(present_AgentType);
    if (present_AgentType)
      list.add(AgentType);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeviceInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMAC()).compareTo(other.isSetMAC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAC, other.MAC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOS()).compareTo(other.isSetOS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OS, other.OS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOSVersion()).compareTo(other.isSetOSVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOSVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OSVersion, other.OSVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiVersion()).compareTo(other.isSetApiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApiVersion, other.ApiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch()).compareTo(other.isSetBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Batch, other.Batch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRMA()).compareTo(other.isSetRMA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRMA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RMA, other.RMA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRmaDate()).compareTo(other.isSetRmaDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRmaDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RmaDate, other.RmaDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHwVersion()).compareTo(other.isSetHwVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHwVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HwVersion, other.HwVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuilddate()).compareTo(other.isSetBuilddate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuilddate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Builddate, other.Builddate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSN()).compareTo(other.isSetSN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SN, other.SN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwVersion()).compareTo(other.isSetSwVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SwVersion, other.SwVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwName()).compareTo(other.isSetSwName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SwName, other.SwName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHwName()).compareTo(other.isSetHwName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHwName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HwName, other.HwName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Status, other.Status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DeviceId, other.DeviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerUniqueId()).compareTo(other.isSetCustomerUniqueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerUniqueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CustomerUniqueId, other.CustomerUniqueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformArch()).compareTo(other.isSetPlatformArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PlatformArch, other.PlatformArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentType()).compareTo(other.isSetAgentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AgentType, other.AgentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceInfoStruct(");
    boolean first = true;

    sb.append("MAC:");
    if (this.MAC == null) {
      sb.append("null");
    } else {
      sb.append(this.MAC);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OS:");
    if (this.OS == null) {
      sb.append("null");
    } else {
      sb.append(this.OS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OSVersion:");
    if (this.OSVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.OSVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ApiVersion:");
    if (this.ApiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.ApiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Batch:");
    if (this.Batch == null) {
      sb.append("null");
    } else {
      sb.append(this.Batch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RMA:");
    if (this.RMA == null) {
      sb.append("null");
    } else {
      sb.append(this.RMA);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RmaDate:");
    if (this.RmaDate == null) {
      sb.append("null");
    } else {
      sb.append(this.RmaDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HwVersion:");
    if (this.HwVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.HwVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Builddate:");
    if (this.Builddate == null) {
      sb.append("null");
    } else {
      sb.append(this.Builddate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SN:");
    if (this.SN == null) {
      sb.append("null");
    } else {
      sb.append(this.SN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SwVersion:");
    if (this.SwVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.SwVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SwName:");
    if (this.SwName == null) {
      sb.append("null");
    } else {
      sb.append(this.SwName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HwName:");
    if (this.HwName == null) {
      sb.append("null");
    } else {
      sb.append(this.HwName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Status:");
    if (this.Status == null) {
      sb.append("null");
    } else {
      sb.append(this.Status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DeviceId:");
    if (this.DeviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.DeviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CustomerUniqueId:");
    if (this.CustomerUniqueId == null) {
      sb.append("null");
    } else {
      sb.append(this.CustomerUniqueId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PlatformArch:");
    if (this.PlatformArch == null) {
      sb.append("null");
    } else {
      sb.append(this.PlatformArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AgentType:");
    if (this.AgentType == null) {
      sb.append("null");
    } else {
      sb.append(this.AgentType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceInfoStructStandardSchemeFactory implements SchemeFactory {
    public DeviceInfoStructStandardScheme getScheme() {
      return new DeviceInfoStructStandardScheme();
    }
  }

  private static class DeviceInfoStructStandardScheme extends StandardScheme<DeviceInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MAC = iprot.readString();
              struct.setMACIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OS = iprot.readString();
              struct.setOSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OSVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OSVersion = iprot.readString();
              struct.setOSVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // API_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ApiVersion = iprot.readString();
              struct.setApiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Batch = iprot.readString();
              struct.setBatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RMA = iprot.readString();
              struct.setRMAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RMA_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RmaDate = iprot.readString();
              struct.setRmaDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HW_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.HwVersion = iprot.readString();
              struct.setHwVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUILDDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Builddate = iprot.readString();
              struct.setBuilddateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SN = iprot.readString();
              struct.setSNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SW_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SwVersion = iprot.readString();
              struct.setSwVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SwName = iprot.readString();
              struct.setSwNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.HwName = iprot.readString();
              struct.setHwNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DeviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUSTOMER_UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CustomerUniqueId = iprot.readString();
              struct.setCustomerUniqueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PLATFORM_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PlatformArch = iprot.readString();
              struct.setPlatformArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AGENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AgentType = iprot.readString();
              struct.setAgentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.MAC != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.MAC);
        oprot.writeFieldEnd();
      }
      if (struct.OS != null) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeString(struct.OS);
        oprot.writeFieldEnd();
      }
      if (struct.OSVersion != null) {
        oprot.writeFieldBegin(OSVERSION_FIELD_DESC);
        oprot.writeString(struct.OSVersion);
        oprot.writeFieldEnd();
      }
      if (struct.ApiVersion != null) {
        oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
        oprot.writeString(struct.ApiVersion);
        oprot.writeFieldEnd();
      }
      if (struct.Batch != null) {
        oprot.writeFieldBegin(BATCH_FIELD_DESC);
        oprot.writeString(struct.Batch);
        oprot.writeFieldEnd();
      }
      if (struct.RMA != null) {
        oprot.writeFieldBegin(RMA_FIELD_DESC);
        oprot.writeString(struct.RMA);
        oprot.writeFieldEnd();
      }
      if (struct.RmaDate != null) {
        oprot.writeFieldBegin(RMA_DATE_FIELD_DESC);
        oprot.writeString(struct.RmaDate);
        oprot.writeFieldEnd();
      }
      if (struct.HwVersion != null) {
        oprot.writeFieldBegin(HW_VERSION_FIELD_DESC);
        oprot.writeString(struct.HwVersion);
        oprot.writeFieldEnd();
      }
      if (struct.Builddate != null) {
        oprot.writeFieldBegin(BUILDDATE_FIELD_DESC);
        oprot.writeString(struct.Builddate);
        oprot.writeFieldEnd();
      }
      if (struct.SN != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.SN);
        oprot.writeFieldEnd();
      }
      if (struct.SwVersion != null) {
        oprot.writeFieldBegin(SW_VERSION_FIELD_DESC);
        oprot.writeString(struct.SwVersion);
        oprot.writeFieldEnd();
      }
      if (struct.SwName != null) {
        oprot.writeFieldBegin(SW_NAME_FIELD_DESC);
        oprot.writeString(struct.SwName);
        oprot.writeFieldEnd();
      }
      if (struct.HwName != null) {
        oprot.writeFieldBegin(HW_NAME_FIELD_DESC);
        oprot.writeString(struct.HwName);
        oprot.writeFieldEnd();
      }
      if (struct.Status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.Status);
        oprot.writeFieldEnd();
      }
      if (struct.DeviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.DeviceId);
        oprot.writeFieldEnd();
      }
      if (struct.CustomerUniqueId != null) {
        oprot.writeFieldBegin(CUSTOMER_UNIQUE_ID_FIELD_DESC);
        oprot.writeString(struct.CustomerUniqueId);
        oprot.writeFieldEnd();
      }
      if (struct.PlatformArch != null) {
        oprot.writeFieldBegin(PLATFORM_ARCH_FIELD_DESC);
        oprot.writeString(struct.PlatformArch);
        oprot.writeFieldEnd();
      }
      if (struct.AgentType != null) {
        oprot.writeFieldBegin(AGENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.AgentType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceInfoStructTupleSchemeFactory implements SchemeFactory {
    public DeviceInfoStructTupleScheme getScheme() {
      return new DeviceInfoStructTupleScheme();
    }
  }

  private static class DeviceInfoStructTupleScheme extends TupleScheme<DeviceInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMAC()) {
        optionals.set(0);
      }
      if (struct.isSetOS()) {
        optionals.set(1);
      }
      if (struct.isSetOSVersion()) {
        optionals.set(2);
      }
      if (struct.isSetApiVersion()) {
        optionals.set(3);
      }
      if (struct.isSetBatch()) {
        optionals.set(4);
      }
      if (struct.isSetRMA()) {
        optionals.set(5);
      }
      if (struct.isSetRmaDate()) {
        optionals.set(6);
      }
      if (struct.isSetHwVersion()) {
        optionals.set(7);
      }
      if (struct.isSetBuilddate()) {
        optionals.set(8);
      }
      if (struct.isSetSN()) {
        optionals.set(9);
      }
      if (struct.isSetSwVersion()) {
        optionals.set(10);
      }
      if (struct.isSetSwName()) {
        optionals.set(11);
      }
      if (struct.isSetHwName()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(14);
      }
      if (struct.isSetCustomerUniqueId()) {
        optionals.set(15);
      }
      if (struct.isSetPlatformArch()) {
        optionals.set(16);
      }
      if (struct.isSetAgentType()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetMAC()) {
        oprot.writeString(struct.MAC);
      }
      if (struct.isSetOS()) {
        oprot.writeString(struct.OS);
      }
      if (struct.isSetOSVersion()) {
        oprot.writeString(struct.OSVersion);
      }
      if (struct.isSetApiVersion()) {
        oprot.writeString(struct.ApiVersion);
      }
      if (struct.isSetBatch()) {
        oprot.writeString(struct.Batch);
      }
      if (struct.isSetRMA()) {
        oprot.writeString(struct.RMA);
      }
      if (struct.isSetRmaDate()) {
        oprot.writeString(struct.RmaDate);
      }
      if (struct.isSetHwVersion()) {
        oprot.writeString(struct.HwVersion);
      }
      if (struct.isSetBuilddate()) {
        oprot.writeString(struct.Builddate);
      }
      if (struct.isSetSN()) {
        oprot.writeString(struct.SN);
      }
      if (struct.isSetSwVersion()) {
        oprot.writeString(struct.SwVersion);
      }
      if (struct.isSetSwName()) {
        oprot.writeString(struct.SwName);
      }
      if (struct.isSetHwName()) {
        oprot.writeString(struct.HwName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.Status);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.DeviceId);
      }
      if (struct.isSetCustomerUniqueId()) {
        oprot.writeString(struct.CustomerUniqueId);
      }
      if (struct.isSetPlatformArch()) {
        oprot.writeString(struct.PlatformArch);
      }
      if (struct.isSetAgentType()) {
        oprot.writeString(struct.AgentType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.MAC = iprot.readString();
        struct.setMACIsSet(true);
      }
      if (incoming.get(1)) {
        struct.OS = iprot.readString();
        struct.setOSIsSet(true);
      }
      if (incoming.get(2)) {
        struct.OSVersion = iprot.readString();
        struct.setOSVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ApiVersion = iprot.readString();
        struct.setApiVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Batch = iprot.readString();
        struct.setBatchIsSet(true);
      }
      if (incoming.get(5)) {
        struct.RMA = iprot.readString();
        struct.setRMAIsSet(true);
      }
      if (incoming.get(6)) {
        struct.RmaDate = iprot.readString();
        struct.setRmaDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.HwVersion = iprot.readString();
        struct.setHwVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.Builddate = iprot.readString();
        struct.setBuilddateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.SN = iprot.readString();
        struct.setSNIsSet(true);
      }
      if (incoming.get(10)) {
        struct.SwVersion = iprot.readString();
        struct.setSwVersionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.SwName = iprot.readString();
        struct.setSwNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.HwName = iprot.readString();
        struct.setHwNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.Status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.DeviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.CustomerUniqueId = iprot.readString();
        struct.setCustomerUniqueIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.PlatformArch = iprot.readString();
        struct.setPlatformArchIsSet(true);
      }
      if (incoming.get(17)) {
        struct.AgentType = iprot.readString();
        struct.setAgentTypeIsSet(true);
      }
    }
  }

}

