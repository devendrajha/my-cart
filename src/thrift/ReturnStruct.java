package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Data structure containing 'return path' information from Agent, which
 * includes asynchronous events and received messages.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class ReturnStruct implements org.apache.thrift.TBase<ReturnStruct, ReturnStruct._Fields>, java.io.Serializable,
		Cloneable, Comparable<ReturnStruct> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ReturnStruct");

	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Type", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Event", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
	private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("Msg",
			org.apache.thrift.protocol.TType.STRUCT, (short) 3);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ReturnStructStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ReturnStructTupleSchemeFactory());
	}

	/**
	 * Type of returned information
	 * 
	 * @see ReturnType
	 */
	public ReturnType Type; // required
	/**
	 * Event data structure--valid when Type == RETURN_EVENT
	 */
	public EventDataStruct Event; // required
	/**
	 * Received message data structure--valid when Type == RETURN_EVENT
	 */
	public RcvMsgStruct Msg; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * Type of returned information
		 * 
		 * @see ReturnType
		 */
		TYPE((short) 1, "Type"),
		/**
		 * Event data structure--valid when Type == RETURN_EVENT
		 */
		EVENT((short) 2, "Event"),
		/**
		 * Received message data structure--valid when Type == RETURN_EVENT
		 */
		MSG((short) 3, "Msg");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // TYPE
				return TYPE;
			case 2: // EVENT
				return EVENT;
			case 3: // MSG
				return MSG;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnType.class)));
		tmpMap.put(_Fields.EVENT,
				new org.apache.thrift.meta_data.FieldMetaData("Event", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								EventDataStruct.class)));
		tmpMap.put(_Fields.MSG,
				new org.apache.thrift.meta_data.FieldMetaData("Msg", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								RcvMsgStruct.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnStruct.class, metaDataMap);
	}

	public ReturnStruct() {
	}

	public ReturnStruct(ReturnType Type, EventDataStruct Event, RcvMsgStruct Msg) {
		this();
		this.Type = Type;
		this.Event = Event;
		this.Msg = Msg;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ReturnStruct(ReturnStruct other) {
		if (other.isSetType()) {
			this.Type = other.Type;
		}
		if (other.isSetEvent()) {
			this.Event = new EventDataStruct(other.Event);
		}
		if (other.isSetMsg()) {
			this.Msg = new RcvMsgStruct(other.Msg);
		}
	}

	public ReturnStruct deepCopy() {
		return new ReturnStruct(this);
	}

	@Override
	public void clear() {
		this.Type = null;
		this.Event = null;
		this.Msg = null;
	}

	/**
	 * Type of returned information
	 * 
	 * @see ReturnType
	 */
	public ReturnType getType() {
		return this.Type;
	}

	/**
	 * Type of returned information
	 * 
	 * @see ReturnType
	 */
	public ReturnStruct setType(ReturnType Type) {
		this.Type = Type;
		return this;
	}

	public void unsetType() {
		this.Type = null;
	}

	/**
	 * Returns true if field Type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return this.Type != null;
	}

	public void setTypeIsSet(boolean value) {
		if (!value) {
			this.Type = null;
		}
	}

	/**
	 * Event data structure--valid when Type == RETURN_EVENT
	 */
	public EventDataStruct getEvent() {
		return this.Event;
	}

	/**
	 * Event data structure--valid when Type == RETURN_EVENT
	 */
	public ReturnStruct setEvent(EventDataStruct Event) {
		this.Event = Event;
		return this;
	}

	public void unsetEvent() {
		this.Event = null;
	}

	/**
	 * Returns true if field Event is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetEvent() {
		return this.Event != null;
	}

	public void setEventIsSet(boolean value) {
		if (!value) {
			this.Event = null;
		}
	}

	/**
	 * Received message data structure--valid when Type == RETURN_EVENT
	 */
	public RcvMsgStruct getMsg() {
		return this.Msg;
	}

	/**
	 * Received message data structure--valid when Type == RETURN_EVENT
	 */
	public ReturnStruct setMsg(RcvMsgStruct Msg) {
		this.Msg = Msg;
		return this;
	}

	public void unsetMsg() {
		this.Msg = null;
	}

	/**
	 * Returns true if field Msg is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMsg() {
		return this.Msg != null;
	}

	public void setMsgIsSet(boolean value) {
		if (!value) {
			this.Msg = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((ReturnType) value);
			}
			break;

		case EVENT:
			if (value == null) {
				unsetEvent();
			} else {
				setEvent((EventDataStruct) value);
			}
			break;

		case MSG:
			if (value == null) {
				unsetMsg();
			} else {
				setMsg((RcvMsgStruct) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case TYPE:
			return getType();

		case EVENT:
			return getEvent();

		case MSG:
			return getMsg();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case TYPE:
			return isSetType();
		case EVENT:
			return isSetEvent();
		case MSG:
			return isSetMsg();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ReturnStruct)
			return this.equals((ReturnStruct) that);
		return false;
	}

	public boolean equals(ReturnStruct that) {
		if (that == null)
			return false;

		boolean this_present_Type = true && this.isSetType();
		boolean that_present_Type = true && that.isSetType();
		if (this_present_Type || that_present_Type) {
			if (!(this_present_Type && that_present_Type))
				return false;
			if (!this.Type.equals(that.Type))
				return false;
		}

		boolean this_present_Event = true && this.isSetEvent();
		boolean that_present_Event = true && that.isSetEvent();
		if (this_present_Event || that_present_Event) {
			if (!(this_present_Event && that_present_Event))
				return false;
			if (!this.Event.equals(that.Event))
				return false;
		}

		boolean this_present_Msg = true && this.isSetMsg();
		boolean that_present_Msg = true && that.isSetMsg();
		if (this_present_Msg || that_present_Msg) {
			if (!(this_present_Msg && that_present_Msg))
				return false;
			if (!this.Msg.equals(that.Msg))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_Type = true && (isSetType());
		list.add(present_Type);
		if (present_Type)
			list.add(Type.getValue());

		boolean present_Event = true && (isSetEvent());
		list.add(present_Event);
		if (present_Event)
			list.add(Event);

		boolean present_Msg = true && (isSetMsg());
		list.add(present_Msg);
		if (present_Msg)
			list.add(Msg);

		return list.hashCode();
	}

	@Override
	public int compareTo(ReturnStruct other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEvent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Event, other.Event);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMsg()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Msg, other.Msg);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ReturnStruct(");
		boolean first = true;

		sb.append("Type:");
		if (this.Type == null) {
			sb.append("null");
		} else {
			sb.append(this.Type);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Event:");
		if (this.Event == null) {
			sb.append("null");
		} else {
			sb.append(this.Event);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Msg:");
		if (this.Msg == null) {
			sb.append("null");
		} else {
			sb.append(this.Msg);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (Event != null) {
			Event.validate();
		}
		if (Msg != null) {
			Msg.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ReturnStructStandardSchemeFactory implements SchemeFactory {
		public ReturnStructStandardScheme getScheme() {
			return new ReturnStructStandardScheme();
		}
	}

	private static class ReturnStructStandardScheme extends StandardScheme<ReturnStruct> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnStruct struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.Type = ReturnType.findByValue(iprot.readI32());
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // EVENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.Event = new EventDataStruct();
						struct.Event.read(iprot);
						struct.setEventIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // MSG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.Msg = new RcvMsgStruct();
						struct.Msg.read(iprot);
						struct.setMsgIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnStruct struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.Type != null) {
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.Type.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.Event != null) {
				oprot.writeFieldBegin(EVENT_FIELD_DESC);
				struct.Event.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.Msg != null) {
				oprot.writeFieldBegin(MSG_FIELD_DESC);
				struct.Msg.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ReturnStructTupleSchemeFactory implements SchemeFactory {
		public ReturnStructTupleScheme getScheme() {
			return new ReturnStructTupleScheme();
		}
	}

	private static class ReturnStructTupleScheme extends TupleScheme<ReturnStruct> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ReturnStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetType()) {
				optionals.set(0);
			}
			if (struct.isSetEvent()) {
				optionals.set(1);
			}
			if (struct.isSetMsg()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetType()) {
				oprot.writeI32(struct.Type.getValue());
			}
			if (struct.isSetEvent()) {
				struct.Event.write(oprot);
			}
			if (struct.isSetMsg()) {
				struct.Msg.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ReturnStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.Type = ReturnType.findByValue(iprot.readI32());
				struct.setTypeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Event = new EventDataStruct();
				struct.Event.read(iprot);
				struct.setEventIsSet(true);
			}
			if (incoming.get(2)) {
				struct.Msg = new RcvMsgStruct();
				struct.Msg.read(iprot);
				struct.setMsgIsSet(true);
			}
		}
	}

}
