package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Array type used to send string data
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class StringArrayType implements org.apache.thrift.TBase<StringArrayType, StringArrayType._Fields>,
		java.io.Serializable, Cloneable, Comparable<StringArrayType> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"StringArrayType");

	private static final org.apache.thrift.protocol.TField BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Buffer", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Length", org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new StringArrayTypeStandardSchemeFactory());
		schemes.put(TupleScheme.class, new StringArrayTypeTupleSchemeFactory());
	}

	/**
	 * Data buffer
	 */
	public String Buffer; // required
	/**
	 * Data buffer length (in bytes)
	 */
	public int Length; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * Data buffer
		 */
		BUFFER((short) 1, "Buffer"),
		/**
		 * Data buffer length (in bytes)
		 */
		LENGTH((short) 2, "Length");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // BUFFER
				return BUFFER;
			case 2: // LENGTH
				return LENGTH;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __LENGTH_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.BUFFER,
				new org.apache.thrift.meta_data.FieldMetaData("Buffer", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LENGTH,
				new org.apache.thrift.meta_data.FieldMetaData("Length", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StringArrayType.class, metaDataMap);
	}

	public StringArrayType() {
	}

	public StringArrayType(String Buffer, int Length) {
		this();
		this.Buffer = Buffer;
		this.Length = Length;
		setLengthIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public StringArrayType(StringArrayType other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetBuffer()) {
			this.Buffer = other.Buffer;
		}
		this.Length = other.Length;
	}

	public StringArrayType deepCopy() {
		return new StringArrayType(this);
	}

	@Override
	public void clear() {
		this.Buffer = null;
		setLengthIsSet(false);
		this.Length = 0;
	}

	/**
	 * Data buffer
	 */
	public String getBuffer() {
		return this.Buffer;
	}

	/**
	 * Data buffer
	 */
	public StringArrayType setBuffer(String Buffer) {
		this.Buffer = Buffer;
		return this;
	}

	public void unsetBuffer() {
		this.Buffer = null;
	}

	/**
	 * Returns true if field Buffer is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBuffer() {
		return this.Buffer != null;
	}

	public void setBufferIsSet(boolean value) {
		if (!value) {
			this.Buffer = null;
		}
	}

	/**
	 * Data buffer length (in bytes)
	 */
	public int getLength() {
		return this.Length;
	}

	/**
	 * Data buffer length (in bytes)
	 */
	public StringArrayType setLength(int Length) {
		this.Length = Length;
		setLengthIsSet(true);
		return this;
	}

	public void unsetLength() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
	}

	/**
	 * Returns true if field Length is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLength() {
		return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
	}

	public void setLengthIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case BUFFER:
			if (value == null) {
				unsetBuffer();
			} else {
				setBuffer((String) value);
			}
			break;

		case LENGTH:
			if (value == null) {
				unsetLength();
			} else {
				setLength((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case BUFFER:
			return getBuffer();

		case LENGTH:
			return getLength();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case BUFFER:
			return isSetBuffer();
		case LENGTH:
			return isSetLength();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof StringArrayType)
			return this.equals((StringArrayType) that);
		return false;
	}

	public boolean equals(StringArrayType that) {
		if (that == null)
			return false;

		boolean this_present_Buffer = true && this.isSetBuffer();
		boolean that_present_Buffer = true && that.isSetBuffer();
		if (this_present_Buffer || that_present_Buffer) {
			if (!(this_present_Buffer && that_present_Buffer))
				return false;
			if (!this.Buffer.equals(that.Buffer))
				return false;
		}

		boolean this_present_Length = true;
		boolean that_present_Length = true;
		if (this_present_Length || that_present_Length) {
			if (!(this_present_Length && that_present_Length))
				return false;
			if (this.Length != that.Length)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_Buffer = true && (isSetBuffer());
		list.add(present_Buffer);
		if (present_Buffer)
			list.add(Buffer);

		boolean present_Length = true;
		list.add(present_Length);
		if (present_Length)
			list.add(Length);

		return list.hashCode();
	}

	@Override
	public int compareTo(StringArrayType other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetBuffer()).compareTo(other.isSetBuffer());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBuffer()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Buffer, other.Buffer);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLength()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Length, other.Length);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("StringArrayType(");
		boolean first = true;

		sb.append("Buffer:");
		if (this.Buffer == null) {
			sb.append("null");
		} else {
			sb.append(this.Buffer);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Length:");
		sb.append(this.Length);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class StringArrayTypeStandardSchemeFactory implements SchemeFactory {
		public StringArrayTypeStandardScheme getScheme() {
			return new StringArrayTypeStandardScheme();
		}
	}

	private static class StringArrayTypeStandardScheme extends StandardScheme<StringArrayType> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, StringArrayType struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // BUFFER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Buffer = iprot.readString();
						struct.setBufferIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // LENGTH
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.Length = iprot.readI32();
						struct.setLengthIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, StringArrayType struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.Buffer != null) {
				oprot.writeFieldBegin(BUFFER_FIELD_DESC);
				oprot.writeString(struct.Buffer);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(LENGTH_FIELD_DESC);
			oprot.writeI32(struct.Length);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class StringArrayTypeTupleSchemeFactory implements SchemeFactory {
		public StringArrayTypeTupleScheme getScheme() {
			return new StringArrayTypeTupleScheme();
		}
	}

	private static class StringArrayTypeTupleScheme extends TupleScheme<StringArrayType> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, StringArrayType struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetBuffer()) {
				optionals.set(0);
			}
			if (struct.isSetLength()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetBuffer()) {
				oprot.writeString(struct.Buffer);
			}
			if (struct.isSetLength()) {
				oprot.writeI32(struct.Length);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, StringArrayType struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.Buffer = iprot.readString();
				struct.setBufferIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Length = iprot.readI32();
				struct.setLengthIsSet(true);
			}
		}
	}

}
