package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Data structure to be used in array of new endpoint to be created
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class MultiEpCreateStruct implements org.apache.thrift.TBase<MultiEpCreateStruct, MultiEpCreateStruct._Fields>,
		java.io.Serializable, Cloneable, Comparable<MultiEpCreateStruct> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"MultiEpCreateStruct");

	private static final org.apache.thrift.protocol.TField MANUFACTURER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"ManufacturerId", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField USER_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"UserField", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Name", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new MultiEpCreateStructStandardSchemeFactory());
		schemes.put(TupleScheme.class, new MultiEpCreateStructTupleSchemeFactory());
	}

	/**
	 * Manufacturing ID of the endpoint to be created
	 */
	public String ManufacturerId; // required
	/**
	 * The (optional) SerialNumber of the endpoint to be created
	 */
	public String UserField; // required
	/**
	 * The name string to be associated with the new endpoint
	 */
	public String Name; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * Manufacturing ID of the endpoint to be created
		 */
		MANUFACTURER_ID((short) 1, "ManufacturerId"),
		/**
		 * The (optional) SerialNumber of the endpoint to be created
		 */
		USER_FIELD((short) 2, "UserField"),
		/**
		 * The name string to be associated with the new endpoint
		 */
		NAME((short) 3, "Name");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MANUFACTURER_ID
				return MANUFACTURER_ID;
			case 2: // USER_FIELD
				return USER_FIELD;
			case 3: // NAME
				return NAME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MANUFACTURER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("ManufacturerId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USER_FIELD,
				new org.apache.thrift.meta_data.FieldMetaData("UserField",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiEpCreateStruct.class, metaDataMap);
	}

	public MultiEpCreateStruct() {
	}

	public MultiEpCreateStruct(String ManufacturerId, String UserField, String Name) {
		this();
		this.ManufacturerId = ManufacturerId;
		this.UserField = UserField;
		this.Name = Name;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public MultiEpCreateStruct(MultiEpCreateStruct other) {
		if (other.isSetManufacturerId()) {
			this.ManufacturerId = other.ManufacturerId;
		}
		if (other.isSetUserField()) {
			this.UserField = other.UserField;
		}
		if (other.isSetName()) {
			this.Name = other.Name;
		}
	}

	public MultiEpCreateStruct deepCopy() {
		return new MultiEpCreateStruct(this);
	}

	@Override
	public void clear() {
		this.ManufacturerId = null;
		this.UserField = null;
		this.Name = null;
	}

	/**
	 * Manufacturing ID of the endpoint to be created
	 */
	public String getManufacturerId() {
		return this.ManufacturerId;
	}

	/**
	 * Manufacturing ID of the endpoint to be created
	 */
	public MultiEpCreateStruct setManufacturerId(String ManufacturerId) {
		this.ManufacturerId = ManufacturerId;
		return this;
	}

	public void unsetManufacturerId() {
		this.ManufacturerId = null;
	}

	/**
	 * Returns true if field ManufacturerId is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetManufacturerId() {
		return this.ManufacturerId != null;
	}

	public void setManufacturerIdIsSet(boolean value) {
		if (!value) {
			this.ManufacturerId = null;
		}
	}

	/**
	 * The (optional) SerialNumber of the endpoint to be created
	 */
	public String getUserField() {
		return this.UserField;
	}

	/**
	 * The (optional) SerialNumber of the endpoint to be created
	 */
	public MultiEpCreateStruct setUserField(String UserField) {
		this.UserField = UserField;
		return this;
	}

	public void unsetUserField() {
		this.UserField = null;
	}

	/**
	 * Returns true if field UserField is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUserField() {
		return this.UserField != null;
	}

	public void setUserFieldIsSet(boolean value) {
		if (!value) {
			this.UserField = null;
		}
	}

	/**
	 * The name string to be associated with the new endpoint
	 */
	public String getName() {
		return this.Name;
	}

	/**
	 * The name string to be associated with the new endpoint
	 */
	public MultiEpCreateStruct setName(String Name) {
		this.Name = Name;
		return this;
	}

	public void unsetName() {
		this.Name = null;
	}

	/**
	 * Returns true if field Name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.Name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.Name = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case MANUFACTURER_ID:
			if (value == null) {
				unsetManufacturerId();
			} else {
				setManufacturerId((String) value);
			}
			break;

		case USER_FIELD:
			if (value == null) {
				unsetUserField();
			} else {
				setUserField((String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case MANUFACTURER_ID:
			return getManufacturerId();

		case USER_FIELD:
			return getUserField();

		case NAME:
			return getName();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case MANUFACTURER_ID:
			return isSetManufacturerId();
		case USER_FIELD:
			return isSetUserField();
		case NAME:
			return isSetName();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof MultiEpCreateStruct)
			return this.equals((MultiEpCreateStruct) that);
		return false;
	}

	public boolean equals(MultiEpCreateStruct that) {
		if (that == null)
			return false;

		boolean this_present_ManufacturerId = true && this.isSetManufacturerId();
		boolean that_present_ManufacturerId = true && that.isSetManufacturerId();
		if (this_present_ManufacturerId || that_present_ManufacturerId) {
			if (!(this_present_ManufacturerId && that_present_ManufacturerId))
				return false;
			if (!this.ManufacturerId.equals(that.ManufacturerId))
				return false;
		}

		boolean this_present_UserField = true && this.isSetUserField();
		boolean that_present_UserField = true && that.isSetUserField();
		if (this_present_UserField || that_present_UserField) {
			if (!(this_present_UserField && that_present_UserField))
				return false;
			if (!this.UserField.equals(that.UserField))
				return false;
		}

		boolean this_present_Name = true && this.isSetName();
		boolean that_present_Name = true && that.isSetName();
		if (this_present_Name || that_present_Name) {
			if (!(this_present_Name && that_present_Name))
				return false;
			if (!this.Name.equals(that.Name))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_ManufacturerId = true && (isSetManufacturerId());
		list.add(present_ManufacturerId);
		if (present_ManufacturerId)
			list.add(ManufacturerId);

		boolean present_UserField = true && (isSetUserField());
		list.add(present_UserField);
		if (present_UserField)
			list.add(UserField);

		boolean present_Name = true && (isSetName());
		list.add(present_Name);
		if (present_Name)
			list.add(Name);

		return list.hashCode();
	}

	@Override
	public int compareTo(MultiEpCreateStruct other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetManufacturerId()).compareTo(other.isSetManufacturerId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetManufacturerId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ManufacturerId, other.ManufacturerId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserField()).compareTo(other.isSetUserField());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserField()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserField, other.UserField);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("MultiEpCreateStruct(");
		boolean first = true;

		sb.append("ManufacturerId:");
		if (this.ManufacturerId == null) {
			sb.append("null");
		} else {
			sb.append(this.ManufacturerId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("UserField:");
		if (this.UserField == null) {
			sb.append("null");
		} else {
			sb.append(this.UserField);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Name:");
		if (this.Name == null) {
			sb.append("null");
		} else {
			sb.append(this.Name);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class MultiEpCreateStructStandardSchemeFactory implements SchemeFactory {
		public MultiEpCreateStructStandardScheme getScheme() {
			return new MultiEpCreateStructStandardScheme();
		}
	}

	private static class MultiEpCreateStructStandardScheme extends StandardScheme<MultiEpCreateStruct> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, MultiEpCreateStruct struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // MANUFACTURER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ManufacturerId = iprot.readString();
						struct.setManufacturerIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // USER_FIELD
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.UserField = iprot.readString();
						struct.setUserFieldIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.Name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, MultiEpCreateStruct struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.ManufacturerId != null) {
				oprot.writeFieldBegin(MANUFACTURER_ID_FIELD_DESC);
				oprot.writeString(struct.ManufacturerId);
				oprot.writeFieldEnd();
			}
			if (struct.UserField != null) {
				oprot.writeFieldBegin(USER_FIELD_FIELD_DESC);
				oprot.writeString(struct.UserField);
				oprot.writeFieldEnd();
			}
			if (struct.Name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.Name);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class MultiEpCreateStructTupleSchemeFactory implements SchemeFactory {
		public MultiEpCreateStructTupleScheme getScheme() {
			return new MultiEpCreateStructTupleScheme();
		}
	}

	private static class MultiEpCreateStructTupleScheme extends TupleScheme<MultiEpCreateStruct> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, MultiEpCreateStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetManufacturerId()) {
				optionals.set(0);
			}
			if (struct.isSetUserField()) {
				optionals.set(1);
			}
			if (struct.isSetName()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetManufacturerId()) {
				oprot.writeString(struct.ManufacturerId);
			}
			if (struct.isSetUserField()) {
				oprot.writeString(struct.UserField);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.Name);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, MultiEpCreateStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.ManufacturerId = iprot.readString();
				struct.setManufacturerIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.UserField = iprot.readString();
				struct.setUserFieldIsSet(true);
			}
			if (incoming.get(2)) {
				struct.Name = iprot.readString();
				struct.setNameIsSet(true);
			}
		}
	}

}
