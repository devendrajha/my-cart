package io.smartnexus.ats.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * Setting info used for messaging
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class SettingStruct implements org.apache.thrift.TBase<SettingStruct, SettingStruct._Fields>,
		java.io.Serializable, Cloneable, Comparable<SettingStruct> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"SettingStruct");

	private static final org.apache.thrift.protocol.TField LOCAL_SETTING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"LocalSettingId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"Value", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new SettingStructStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SettingStructTupleSchemeFactory());
	}

	/**
	 * local Setting ID
	 */
	public int LocalSettingId; // required
	/**
	 * Value of setting
	 */
	public DataElementStruct Value; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * local Setting ID
		 */
		LOCAL_SETTING_ID((short) 1, "LocalSettingId"),
		/**
		 * Value of setting
		 */
		VALUE((short) 2, "Value");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // LOCAL_SETTING_ID
				return LOCAL_SETTING_ID;
			case 2: // VALUE
				return VALUE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __LOCALSETTINGID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.LOCAL_SETTING_ID,
				new org.apache.thrift.meta_data.FieldMetaData("LocalSettingId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VALUE,
				new org.apache.thrift.meta_data.FieldMetaData("Value", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								DataElementStruct.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingStruct.class, metaDataMap);
	}

	public SettingStruct() {
	}

	public SettingStruct(int LocalSettingId, DataElementStruct Value) {
		this();
		this.LocalSettingId = LocalSettingId;
		setLocalSettingIdIsSet(true);
		this.Value = Value;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SettingStruct(SettingStruct other) {
		__isset_bitfield = other.__isset_bitfield;
		this.LocalSettingId = other.LocalSettingId;
		if (other.isSetValue()) {
			this.Value = new DataElementStruct(other.Value);
		}
	}

	public SettingStruct deepCopy() {
		return new SettingStruct(this);
	}

	@Override
	public void clear() {
		setLocalSettingIdIsSet(false);
		this.LocalSettingId = 0;
		this.Value = null;
	}

	/**
	 * local Setting ID
	 */
	public int getLocalSettingId() {
		return this.LocalSettingId;
	}

	/**
	 * local Setting ID
	 */
	public SettingStruct setLocalSettingId(int LocalSettingId) {
		this.LocalSettingId = LocalSettingId;
		setLocalSettingIdIsSet(true);
		return this;
	}

	public void unsetLocalSettingId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALSETTINGID_ISSET_ID);
	}

	/**
	 * Returns true if field LocalSettingId is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetLocalSettingId() {
		return EncodingUtils.testBit(__isset_bitfield, __LOCALSETTINGID_ISSET_ID);
	}

	public void setLocalSettingIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALSETTINGID_ISSET_ID, value);
	}

	/**
	 * Value of setting
	 */
	public DataElementStruct getValue() {
		return this.Value;
	}

	/**
	 * Value of setting
	 */
	public SettingStruct setValue(DataElementStruct Value) {
		this.Value = Value;
		return this;
	}

	public void unsetValue() {
		this.Value = null;
	}

	/**
	 * Returns true if field Value is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetValue() {
		return this.Value != null;
	}

	public void setValueIsSet(boolean value) {
		if (!value) {
			this.Value = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case LOCAL_SETTING_ID:
			if (value == null) {
				unsetLocalSettingId();
			} else {
				setLocalSettingId((Integer) value);
			}
			break;

		case VALUE:
			if (value == null) {
				unsetValue();
			} else {
				setValue((DataElementStruct) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case LOCAL_SETTING_ID:
			return getLocalSettingId();

		case VALUE:
			return getValue();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case LOCAL_SETTING_ID:
			return isSetLocalSettingId();
		case VALUE:
			return isSetValue();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SettingStruct)
			return this.equals((SettingStruct) that);
		return false;
	}

	public boolean equals(SettingStruct that) {
		if (that == null)
			return false;

		boolean this_present_LocalSettingId = true;
		boolean that_present_LocalSettingId = true;
		if (this_present_LocalSettingId || that_present_LocalSettingId) {
			if (!(this_present_LocalSettingId && that_present_LocalSettingId))
				return false;
			if (this.LocalSettingId != that.LocalSettingId)
				return false;
		}

		boolean this_present_Value = true && this.isSetValue();
		boolean that_present_Value = true && that.isSetValue();
		if (this_present_Value || that_present_Value) {
			if (!(this_present_Value && that_present_Value))
				return false;
			if (!this.Value.equals(that.Value))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_LocalSettingId = true;
		list.add(present_LocalSettingId);
		if (present_LocalSettingId)
			list.add(LocalSettingId);

		boolean present_Value = true && (isSetValue());
		list.add(present_Value);
		if (present_Value)
			list.add(Value);

		return list.hashCode();
	}

	@Override
	public int compareTo(SettingStruct other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetLocalSettingId()).compareTo(other.isSetLocalSettingId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocalSettingId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocalSettingId, other.LocalSettingId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetValue()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Value, other.Value);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SettingStruct(");
		boolean first = true;

		sb.append("LocalSettingId:");
		sb.append(this.LocalSettingId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("Value:");
		if (this.Value == null) {
			sb.append("null");
		} else {
			sb.append(this.Value);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (Value != null) {
			Value.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class SettingStructStandardSchemeFactory implements SchemeFactory {
		public SettingStructStandardScheme getScheme() {
			return new SettingStructStandardScheme();
		}
	}

	private static class SettingStructStandardScheme extends StandardScheme<SettingStruct> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, SettingStruct struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // LOCAL_SETTING_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.LocalSettingId = iprot.readI32();
						struct.setLocalSettingIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // VALUE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.Value = new DataElementStruct();
						struct.Value.read(iprot);
						struct.setValueIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, SettingStruct struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(LOCAL_SETTING_ID_FIELD_DESC);
			oprot.writeI32(struct.LocalSettingId);
			oprot.writeFieldEnd();
			if (struct.Value != null) {
				oprot.writeFieldBegin(VALUE_FIELD_DESC);
				struct.Value.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SettingStructTupleSchemeFactory implements SchemeFactory {
		public SettingStructTupleScheme getScheme() {
			return new SettingStructTupleScheme();
		}
	}

	private static class SettingStructTupleScheme extends TupleScheme<SettingStruct> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, SettingStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetLocalSettingId()) {
				optionals.set(0);
			}
			if (struct.isSetValue()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetLocalSettingId()) {
				oprot.writeI32(struct.LocalSettingId);
			}
			if (struct.isSetValue()) {
				struct.Value.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, SettingStruct struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.LocalSettingId = iprot.readI32();
				struct.setLocalSettingIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Value = new DataElementStruct();
				struct.Value.read(iprot);
				struct.setValueIsSet(true);
			}
		}
	}

}
