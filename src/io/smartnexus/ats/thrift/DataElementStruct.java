package io.smartnexus.ats.thrift;


import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Polymorphic data types used with attribute messages
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-30")
public class DataElementStruct implements org.apache.thrift.TBase<DataElementStruct, DataElementStruct._Fields>, java.io.Serializable, Cloneable, Comparable<DataElementStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataElementStruct");

  private static final org.apache.thrift.protocol.TField BOOL_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("BoolDataElement", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INTEGER_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("IntegerDataElement", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ByteDataElement", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField DECIMAL_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("DecimalDataElement", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BIG_INTEGER_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("BigIntegerDataElement", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STRING_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("StringDataElement", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FLOAT_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("FloatDataElement", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DOUBLE_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("DoubleDataElement", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LDOUBLE_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("LdoubleDataElement", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField JSON_DATA_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("JsonDataElement", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataElementStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataElementStructTupleSchemeFactory());
  }

  /**
   * Valid when Type == DATA_TYPE_BOOL
   */
  public boolean BoolDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_INTEGER
   */
  public int IntegerDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_BYTE
   */
  public short ByteDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_DECIMAL
   */
  public double DecimalDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_BINT
   */
  public long BigIntegerDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_STRING
   */
  public StringArrayType StringDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_FLOAT
   */
  public double FloatDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_DOUBLE
   */
  public double DoubleDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_LDOUBLE
   */
  public double LdoubleDataElement; // required
  /**
   * Valid when Type == DATA_TYPE_JSON
   */
  public StringArrayType JsonDataElement; // required
  /**
   * Indicates which data type is valid
   * 
   * @see DataElementType
   */
  public DataElementType Type; // required
  /**
   * Timestamp
   */
  public String time_stamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Valid when Type == DATA_TYPE_BOOL
     */
    BOOL_DATA_ELEMENT((short)1, "BoolDataElement"),
    /**
     * Valid when Type == DATA_TYPE_INTEGER
     */
    INTEGER_DATA_ELEMENT((short)2, "IntegerDataElement"),
    /**
     * Valid when Type == DATA_TYPE_BYTE
     */
    BYTE_DATA_ELEMENT((short)3, "ByteDataElement"),
    /**
     * Valid when Type == DATA_TYPE_DECIMAL
     */
    DECIMAL_DATA_ELEMENT((short)4, "DecimalDataElement"),
    /**
     * Valid when Type == DATA_TYPE_BINT
     */
    BIG_INTEGER_DATA_ELEMENT((short)5, "BigIntegerDataElement"),
    /**
     * Valid when Type == DATA_TYPE_STRING
     */
    STRING_DATA_ELEMENT((short)6, "StringDataElement"),
    /**
     * Valid when Type == DATA_TYPE_FLOAT
     */
    FLOAT_DATA_ELEMENT((short)7, "FloatDataElement"),
    /**
     * Valid when Type == DATA_TYPE_DOUBLE
     */
    DOUBLE_DATA_ELEMENT((short)8, "DoubleDataElement"),
    /**
     * Valid when Type == DATA_TYPE_LDOUBLE
     */
    LDOUBLE_DATA_ELEMENT((short)9, "LdoubleDataElement"),
    /**
     * Valid when Type == DATA_TYPE_JSON
     */
    JSON_DATA_ELEMENT((short)10, "JsonDataElement"),
    /**
     * Indicates which data type is valid
     * 
     * @see DataElementType
     */
    TYPE((short)11, "Type"),
    /**
     * Timestamp
     */
    TIME_STAMP((short)12, "time_stamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_DATA_ELEMENT
          return BOOL_DATA_ELEMENT;
        case 2: // INTEGER_DATA_ELEMENT
          return INTEGER_DATA_ELEMENT;
        case 3: // BYTE_DATA_ELEMENT
          return BYTE_DATA_ELEMENT;
        case 4: // DECIMAL_DATA_ELEMENT
          return DECIMAL_DATA_ELEMENT;
        case 5: // BIG_INTEGER_DATA_ELEMENT
          return BIG_INTEGER_DATA_ELEMENT;
        case 6: // STRING_DATA_ELEMENT
          return STRING_DATA_ELEMENT;
        case 7: // FLOAT_DATA_ELEMENT
          return FLOAT_DATA_ELEMENT;
        case 8: // DOUBLE_DATA_ELEMENT
          return DOUBLE_DATA_ELEMENT;
        case 9: // LDOUBLE_DATA_ELEMENT
          return LDOUBLE_DATA_ELEMENT;
        case 10: // JSON_DATA_ELEMENT
          return JSON_DATA_ELEMENT;
        case 11: // TYPE
          return TYPE;
        case 12: // TIME_STAMP
          return TIME_STAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLDATAELEMENT_ISSET_ID = 0;
  private static final int __INTEGERDATAELEMENT_ISSET_ID = 1;
  private static final int __BYTEDATAELEMENT_ISSET_ID = 2;
  private static final int __DECIMALDATAELEMENT_ISSET_ID = 3;
  private static final int __BIGINTEGERDATAELEMENT_ISSET_ID = 4;
  private static final int __FLOATDATAELEMENT_ISSET_ID = 5;
  private static final int __DOUBLEDATAELEMENT_ISSET_ID = 6;
  private static final int __LDOUBLEDATAELEMENT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("BoolDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INTEGER_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("IntegerDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BYTE_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("ByteDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DECIMAL_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("DecimalDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIG_INTEGER_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("BigIntegerDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRING_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("StringDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StringArrayType.class)));
    tmpMap.put(_Fields.FLOAT_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("FloatDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DOUBLE_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("DoubleDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LDOUBLE_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("LdoubleDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JSON_DATA_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("JsonDataElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StringArrayType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataElementType.class)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataElementStruct.class, metaDataMap);
  }

  public DataElementStruct() {
  }

  public DataElementStruct(
    boolean BoolDataElement,
    int IntegerDataElement,
    short ByteDataElement,
    double DecimalDataElement,
    long BigIntegerDataElement,
    StringArrayType StringDataElement,
    double FloatDataElement,
    double DoubleDataElement,
    double LdoubleDataElement,
    StringArrayType JsonDataElement,
    DataElementType Type,
    String time_stamp)
  {
    this();
    this.BoolDataElement = BoolDataElement;
    setBoolDataElementIsSet(true);
    this.IntegerDataElement = IntegerDataElement;
    setIntegerDataElementIsSet(true);
    this.ByteDataElement = ByteDataElement;
    setByteDataElementIsSet(true);
    this.DecimalDataElement = DecimalDataElement;
    setDecimalDataElementIsSet(true);
    this.BigIntegerDataElement = BigIntegerDataElement;
    setBigIntegerDataElementIsSet(true);
    this.StringDataElement = StringDataElement;
    this.FloatDataElement = FloatDataElement;
    setFloatDataElementIsSet(true);
    this.DoubleDataElement = DoubleDataElement;
    setDoubleDataElementIsSet(true);
    this.LdoubleDataElement = LdoubleDataElement;
    setLdoubleDataElementIsSet(true);
    this.JsonDataElement = JsonDataElement;
    this.Type = Type;
    this.time_stamp = time_stamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataElementStruct(DataElementStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.BoolDataElement = other.BoolDataElement;
    this.IntegerDataElement = other.IntegerDataElement;
    this.ByteDataElement = other.ByteDataElement;
    this.DecimalDataElement = other.DecimalDataElement;
    this.BigIntegerDataElement = other.BigIntegerDataElement;
    if (other.isSetStringDataElement()) {
      this.StringDataElement = new StringArrayType(other.StringDataElement);
    }
    this.FloatDataElement = other.FloatDataElement;
    this.DoubleDataElement = other.DoubleDataElement;
    this.LdoubleDataElement = other.LdoubleDataElement;
    if (other.isSetJsonDataElement()) {
      this.JsonDataElement = new StringArrayType(other.JsonDataElement);
    }
    if (other.isSetType()) {
      this.Type = other.Type;
    }
    if (other.isSetTime_stamp()) {
      this.time_stamp = other.time_stamp;
    }
  }

  public DataElementStruct deepCopy() {
    return new DataElementStruct(this);
  }

  @Override
  public void clear() {
    setBoolDataElementIsSet(false);
    this.BoolDataElement = false;
    setIntegerDataElementIsSet(false);
    this.IntegerDataElement = 0;
    setByteDataElementIsSet(false);
    this.ByteDataElement = 0;
    setDecimalDataElementIsSet(false);
    this.DecimalDataElement = 0.0;
    setBigIntegerDataElementIsSet(false);
    this.BigIntegerDataElement = 0;
    this.StringDataElement = null;
    setFloatDataElementIsSet(false);
    this.FloatDataElement = 0.0;
    setDoubleDataElementIsSet(false);
    this.DoubleDataElement = 0.0;
    setLdoubleDataElementIsSet(false);
    this.LdoubleDataElement = 0.0;
    this.JsonDataElement = null;
    this.Type = null;
    this.time_stamp = null;
  }

  /**
   * Valid when Type == DATA_TYPE_BOOL
   */
  public boolean isBoolDataElement() {
    return this.BoolDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_BOOL
   */
  public DataElementStruct setBoolDataElement(boolean BoolDataElement) {
    this.BoolDataElement = BoolDataElement;
    setBoolDataElementIsSet(true);
    return this;
  }

  public void unsetBoolDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field BoolDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLDATAELEMENT_ISSET_ID);
  }

  public void setBoolDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_INTEGER
   */
  public int getIntegerDataElement() {
    return this.IntegerDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_INTEGER
   */
  public DataElementStruct setIntegerDataElement(int IntegerDataElement) {
    this.IntegerDataElement = IntegerDataElement;
    setIntegerDataElementIsSet(true);
    return this;
  }

  public void unsetIntegerDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGERDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field IntegerDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGERDATAELEMENT_ISSET_ID);
  }

  public void setIntegerDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGERDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_BYTE
   */
  public short getByteDataElement() {
    return this.ByteDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_BYTE
   */
  public DataElementStruct setByteDataElement(short ByteDataElement) {
    this.ByteDataElement = ByteDataElement;
    setByteDataElementIsSet(true);
    return this;
  }

  public void unsetByteDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field ByteDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetByteDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEDATAELEMENT_ISSET_ID);
  }

  public void setByteDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_DECIMAL
   */
  public double getDecimalDataElement() {
    return this.DecimalDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_DECIMAL
   */
  public DataElementStruct setDecimalDataElement(double DecimalDataElement) {
    this.DecimalDataElement = DecimalDataElement;
    setDecimalDataElementIsSet(true);
    return this;
  }

  public void unsetDecimalDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DECIMALDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field DecimalDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimalDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __DECIMALDATAELEMENT_ISSET_ID);
  }

  public void setDecimalDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DECIMALDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_BINT
   */
  public long getBigIntegerDataElement() {
    return this.BigIntegerDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_BINT
   */
  public DataElementStruct setBigIntegerDataElement(long BigIntegerDataElement) {
    this.BigIntegerDataElement = BigIntegerDataElement;
    setBigIntegerDataElementIsSet(true);
    return this;
  }

  public void unsetBigIntegerDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGINTEGERDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field BigIntegerDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetBigIntegerDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGINTEGERDATAELEMENT_ISSET_ID);
  }

  public void setBigIntegerDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGINTEGERDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_STRING
   */
  public StringArrayType getStringDataElement() {
    return this.StringDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_STRING
   */
  public DataElementStruct setStringDataElement(StringArrayType StringDataElement) {
    this.StringDataElement = StringDataElement;
    return this;
  }

  public void unsetStringDataElement() {
    this.StringDataElement = null;
  }

  /** Returns true if field StringDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetStringDataElement() {
    return this.StringDataElement != null;
  }

  public void setStringDataElementIsSet(boolean value) {
    if (!value) {
      this.StringDataElement = null;
    }
  }

  /**
   * Valid when Type == DATA_TYPE_FLOAT
   */
  public double getFloatDataElement() {
    return this.FloatDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_FLOAT
   */
  public DataElementStruct setFloatDataElement(double FloatDataElement) {
    this.FloatDataElement = FloatDataElement;
    setFloatDataElementIsSet(true);
    return this;
  }

  public void unsetFloatDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOATDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field FloatDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOATDATAELEMENT_ISSET_ID);
  }

  public void setFloatDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOATDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_DOUBLE
   */
  public double getDoubleDataElement() {
    return this.DoubleDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_DOUBLE
   */
  public DataElementStruct setDoubleDataElement(double DoubleDataElement) {
    this.DoubleDataElement = DoubleDataElement;
    setDoubleDataElementIsSet(true);
    return this;
  }

  public void unsetDoubleDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field DoubleDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEDATAELEMENT_ISSET_ID);
  }

  public void setDoubleDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_LDOUBLE
   */
  public double getLdoubleDataElement() {
    return this.LdoubleDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_LDOUBLE
   */
  public DataElementStruct setLdoubleDataElement(double LdoubleDataElement) {
    this.LdoubleDataElement = LdoubleDataElement;
    setLdoubleDataElementIsSet(true);
    return this;
  }

  public void unsetLdoubleDataElement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LDOUBLEDATAELEMENT_ISSET_ID);
  }

  /** Returns true if field LdoubleDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetLdoubleDataElement() {
    return EncodingUtils.testBit(__isset_bitfield, __LDOUBLEDATAELEMENT_ISSET_ID);
  }

  public void setLdoubleDataElementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LDOUBLEDATAELEMENT_ISSET_ID, value);
  }

  /**
   * Valid when Type == DATA_TYPE_JSON
   */
  public StringArrayType getJsonDataElement() {
    return this.JsonDataElement;
  }

  /**
   * Valid when Type == DATA_TYPE_JSON
   */
  public DataElementStruct setJsonDataElement(StringArrayType JsonDataElement) {
    this.JsonDataElement = JsonDataElement;
    return this;
  }

  public void unsetJsonDataElement() {
    this.JsonDataElement = null;
  }

  /** Returns true if field JsonDataElement is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonDataElement() {
    return this.JsonDataElement != null;
  }

  public void setJsonDataElementIsSet(boolean value) {
    if (!value) {
      this.JsonDataElement = null;
    }
  }

  /**
   * Indicates which data type is valid
   * 
   * @see DataElementType
   */
  public DataElementType getType() {
    return this.Type;
  }

  /**
   * Indicates which data type is valid
   * 
   * @see DataElementType
   */
  public DataElementStruct setType(DataElementType Type) {
    this.Type = Type;
    return this;
  }

  public void unsetType() {
    this.Type = null;
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.Type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.Type = null;
    }
  }

  /**
   * Timestamp
   */
  public String getTime_stamp() {
    return this.time_stamp;
  }

  /**
   * Timestamp
   */
  public DataElementStruct setTime_stamp(String time_stamp) {
    this.time_stamp = time_stamp;
    return this;
  }

  public void unsetTime_stamp() {
    this.time_stamp = null;
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return this.time_stamp != null;
  }

  public void setTime_stampIsSet(boolean value) {
    if (!value) {
      this.time_stamp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_DATA_ELEMENT:
      if (value == null) {
        unsetBoolDataElement();
      } else {
        setBoolDataElement((Boolean)value);
      }
      break;

    case INTEGER_DATA_ELEMENT:
      if (value == null) {
        unsetIntegerDataElement();
      } else {
        setIntegerDataElement((Integer)value);
      }
      break;

    case BYTE_DATA_ELEMENT:
      if (value == null) {
        unsetByteDataElement();
      } else {
        setByteDataElement((Short)value);
      }
      break;

    case DECIMAL_DATA_ELEMENT:
      if (value == null) {
        unsetDecimalDataElement();
      } else {
        setDecimalDataElement((Double)value);
      }
      break;

    case BIG_INTEGER_DATA_ELEMENT:
      if (value == null) {
        unsetBigIntegerDataElement();
      } else {
        setBigIntegerDataElement((Long)value);
      }
      break;

    case STRING_DATA_ELEMENT:
      if (value == null) {
        unsetStringDataElement();
      } else {
        setStringDataElement((StringArrayType)value);
      }
      break;

    case FLOAT_DATA_ELEMENT:
      if (value == null) {
        unsetFloatDataElement();
      } else {
        setFloatDataElement((Double)value);
      }
      break;

    case DOUBLE_DATA_ELEMENT:
      if (value == null) {
        unsetDoubleDataElement();
      } else {
        setDoubleDataElement((Double)value);
      }
      break;

    case LDOUBLE_DATA_ELEMENT:
      if (value == null) {
        unsetLdoubleDataElement();
      } else {
        setLdoubleDataElement((Double)value);
      }
      break;

    case JSON_DATA_ELEMENT:
      if (value == null) {
        unsetJsonDataElement();
      } else {
        setJsonDataElement((StringArrayType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DataElementType)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_DATA_ELEMENT:
      return isBoolDataElement();

    case INTEGER_DATA_ELEMENT:
      return getIntegerDataElement();

    case BYTE_DATA_ELEMENT:
      return getByteDataElement();

    case DECIMAL_DATA_ELEMENT:
      return getDecimalDataElement();

    case BIG_INTEGER_DATA_ELEMENT:
      return getBigIntegerDataElement();

    case STRING_DATA_ELEMENT:
      return getStringDataElement();

    case FLOAT_DATA_ELEMENT:
      return getFloatDataElement();

    case DOUBLE_DATA_ELEMENT:
      return getDoubleDataElement();

    case LDOUBLE_DATA_ELEMENT:
      return getLdoubleDataElement();

    case JSON_DATA_ELEMENT:
      return getJsonDataElement();

    case TYPE:
      return getType();

    case TIME_STAMP:
      return getTime_stamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_DATA_ELEMENT:
      return isSetBoolDataElement();
    case INTEGER_DATA_ELEMENT:
      return isSetIntegerDataElement();
    case BYTE_DATA_ELEMENT:
      return isSetByteDataElement();
    case DECIMAL_DATA_ELEMENT:
      return isSetDecimalDataElement();
    case BIG_INTEGER_DATA_ELEMENT:
      return isSetBigIntegerDataElement();
    case STRING_DATA_ELEMENT:
      return isSetStringDataElement();
    case FLOAT_DATA_ELEMENT:
      return isSetFloatDataElement();
    case DOUBLE_DATA_ELEMENT:
      return isSetDoubleDataElement();
    case LDOUBLE_DATA_ELEMENT:
      return isSetLdoubleDataElement();
    case JSON_DATA_ELEMENT:
      return isSetJsonDataElement();
    case TYPE:
      return isSetType();
    case TIME_STAMP:
      return isSetTime_stamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataElementStruct)
      return this.equals((DataElementStruct)that);
    return false;
  }

  public boolean equals(DataElementStruct that) {
    if (that == null)
      return false;

    boolean this_present_BoolDataElement = true;
    boolean that_present_BoolDataElement = true;
    if (this_present_BoolDataElement || that_present_BoolDataElement) {
      if (!(this_present_BoolDataElement && that_present_BoolDataElement))
        return false;
      if (this.BoolDataElement != that.BoolDataElement)
        return false;
    }

    boolean this_present_IntegerDataElement = true;
    boolean that_present_IntegerDataElement = true;
    if (this_present_IntegerDataElement || that_present_IntegerDataElement) {
      if (!(this_present_IntegerDataElement && that_present_IntegerDataElement))
        return false;
      if (this.IntegerDataElement != that.IntegerDataElement)
        return false;
    }

    boolean this_present_ByteDataElement = true;
    boolean that_present_ByteDataElement = true;
    if (this_present_ByteDataElement || that_present_ByteDataElement) {
      if (!(this_present_ByteDataElement && that_present_ByteDataElement))
        return false;
      if (this.ByteDataElement != that.ByteDataElement)
        return false;
    }

    boolean this_present_DecimalDataElement = true;
    boolean that_present_DecimalDataElement = true;
    if (this_present_DecimalDataElement || that_present_DecimalDataElement) {
      if (!(this_present_DecimalDataElement && that_present_DecimalDataElement))
        return false;
      if (this.DecimalDataElement != that.DecimalDataElement)
        return false;
    }

    boolean this_present_BigIntegerDataElement = true;
    boolean that_present_BigIntegerDataElement = true;
    if (this_present_BigIntegerDataElement || that_present_BigIntegerDataElement) {
      if (!(this_present_BigIntegerDataElement && that_present_BigIntegerDataElement))
        return false;
      if (this.BigIntegerDataElement != that.BigIntegerDataElement)
        return false;
    }

    boolean this_present_StringDataElement = true && this.isSetStringDataElement();
    boolean that_present_StringDataElement = true && that.isSetStringDataElement();
    if (this_present_StringDataElement || that_present_StringDataElement) {
      if (!(this_present_StringDataElement && that_present_StringDataElement))
        return false;
      if (!this.StringDataElement.equals(that.StringDataElement))
        return false;
    }

    boolean this_present_FloatDataElement = true;
    boolean that_present_FloatDataElement = true;
    if (this_present_FloatDataElement || that_present_FloatDataElement) {
      if (!(this_present_FloatDataElement && that_present_FloatDataElement))
        return false;
      if (this.FloatDataElement != that.FloatDataElement)
        return false;
    }

    boolean this_present_DoubleDataElement = true;
    boolean that_present_DoubleDataElement = true;
    if (this_present_DoubleDataElement || that_present_DoubleDataElement) {
      if (!(this_present_DoubleDataElement && that_present_DoubleDataElement))
        return false;
      if (this.DoubleDataElement != that.DoubleDataElement)
        return false;
    }

    boolean this_present_LdoubleDataElement = true;
    boolean that_present_LdoubleDataElement = true;
    if (this_present_LdoubleDataElement || that_present_LdoubleDataElement) {
      if (!(this_present_LdoubleDataElement && that_present_LdoubleDataElement))
        return false;
      if (this.LdoubleDataElement != that.LdoubleDataElement)
        return false;
    }

    boolean this_present_JsonDataElement = true && this.isSetJsonDataElement();
    boolean that_present_JsonDataElement = true && that.isSetJsonDataElement();
    if (this_present_JsonDataElement || that_present_JsonDataElement) {
      if (!(this_present_JsonDataElement && that_present_JsonDataElement))
        return false;
      if (!this.JsonDataElement.equals(that.JsonDataElement))
        return false;
    }

    boolean this_present_Type = true && this.isSetType();
    boolean that_present_Type = true && that.isSetType();
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (!this.Type.equals(that.Type))
        return false;
    }

    boolean this_present_time_stamp = true && this.isSetTime_stamp();
    boolean that_present_time_stamp = true && that.isSetTime_stamp();
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (!this.time_stamp.equals(that.time_stamp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_BoolDataElement = true;
    list.add(present_BoolDataElement);
    if (present_BoolDataElement)
      list.add(BoolDataElement);

    boolean present_IntegerDataElement = true;
    list.add(present_IntegerDataElement);
    if (present_IntegerDataElement)
      list.add(IntegerDataElement);

    boolean present_ByteDataElement = true;
    list.add(present_ByteDataElement);
    if (present_ByteDataElement)
      list.add(ByteDataElement);

    boolean present_DecimalDataElement = true;
    list.add(present_DecimalDataElement);
    if (present_DecimalDataElement)
      list.add(DecimalDataElement);

    boolean present_BigIntegerDataElement = true;
    list.add(present_BigIntegerDataElement);
    if (present_BigIntegerDataElement)
      list.add(BigIntegerDataElement);

    boolean present_StringDataElement = true && (isSetStringDataElement());
    list.add(present_StringDataElement);
    if (present_StringDataElement)
      list.add(StringDataElement);

    boolean present_FloatDataElement = true;
    list.add(present_FloatDataElement);
    if (present_FloatDataElement)
      list.add(FloatDataElement);

    boolean present_DoubleDataElement = true;
    list.add(present_DoubleDataElement);
    if (present_DoubleDataElement)
      list.add(DoubleDataElement);

    boolean present_LdoubleDataElement = true;
    list.add(present_LdoubleDataElement);
    if (present_LdoubleDataElement)
      list.add(LdoubleDataElement);

    boolean present_JsonDataElement = true && (isSetJsonDataElement());
    list.add(present_JsonDataElement);
    if (present_JsonDataElement)
      list.add(JsonDataElement);

    boolean present_Type = true && (isSetType());
    list.add(present_Type);
    if (present_Type)
      list.add(Type.getValue());

    boolean present_time_stamp = true && (isSetTime_stamp());
    list.add(present_time_stamp);
    if (present_time_stamp)
      list.add(time_stamp);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataElementStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolDataElement()).compareTo(other.isSetBoolDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoolDataElement, other.BoolDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntegerDataElement()).compareTo(other.isSetIntegerDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IntegerDataElement, other.IntegerDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteDataElement()).compareTo(other.isSetByteDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ByteDataElement, other.ByteDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimalDataElement()).compareTo(other.isSetDecimalDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimalDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DecimalDataElement, other.DecimalDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigIntegerDataElement()).compareTo(other.isSetBigIntegerDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigIntegerDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BigIntegerDataElement, other.BigIntegerDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringDataElement()).compareTo(other.isSetStringDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StringDataElement, other.StringDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloatDataElement()).compareTo(other.isSetFloatDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FloatDataElement, other.FloatDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleDataElement()).compareTo(other.isSetDoubleDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DoubleDataElement, other.DoubleDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLdoubleDataElement()).compareTo(other.isSetLdoubleDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLdoubleDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LdoubleDataElement, other.LdoubleDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsonDataElement()).compareTo(other.isSetJsonDataElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonDataElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.JsonDataElement, other.JsonDataElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_stamp()).compareTo(other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataElementStruct(");
    boolean first = true;

    sb.append("BoolDataElement:");
    sb.append(this.BoolDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IntegerDataElement:");
    sb.append(this.IntegerDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ByteDataElement:");
    sb.append(this.ByteDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DecimalDataElement:");
    sb.append(this.DecimalDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BigIntegerDataElement:");
    sb.append(this.BigIntegerDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("StringDataElement:");
    if (this.StringDataElement == null) {
      sb.append("null");
    } else {
      sb.append(this.StringDataElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FloatDataElement:");
    sb.append(this.FloatDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DoubleDataElement:");
    sb.append(this.DoubleDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LdoubleDataElement:");
    sb.append(this.LdoubleDataElement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("JsonDataElement:");
    if (this.JsonDataElement == null) {
      sb.append("null");
    } else {
      sb.append(this.JsonDataElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Type:");
    if (this.Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time_stamp:");
    if (this.time_stamp == null) {
      sb.append("null");
    } else {
      sb.append(this.time_stamp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (StringDataElement != null) {
      StringDataElement.validate();
    }
    if (JsonDataElement != null) {
      JsonDataElement.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataElementStructStandardSchemeFactory implements SchemeFactory {
    public DataElementStructStandardScheme getScheme() {
      return new DataElementStructStandardScheme();
    }
  }

  private static class DataElementStructStandardScheme extends StandardScheme<DataElementStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataElementStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.BoolDataElement = iprot.readBool();
              struct.setBoolDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTEGER_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IntegerDataElement = iprot.readI32();
              struct.setIntegerDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ByteDataElement = iprot.readI16();
              struct.setByteDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DECIMAL_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DecimalDataElement = iprot.readDouble();
              struct.setDecimalDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIG_INTEGER_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BigIntegerDataElement = iprot.readI64();
              struct.setBigIntegerDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRING_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.StringDataElement = new StringArrayType();
              struct.StringDataElement.read(iprot);
              struct.setStringDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLOAT_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FloatDataElement = iprot.readDouble();
              struct.setFloatDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOUBLE_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DoubleDataElement = iprot.readDouble();
              struct.setDoubleDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LDOUBLE_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.LdoubleDataElement = iprot.readDouble();
              struct.setLdoubleDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JSON_DATA_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.JsonDataElement = new StringArrayType();
              struct.JsonDataElement.read(iprot);
              struct.setJsonDataElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Type = DataElementType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_stamp = iprot.readString();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataElementStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_DATA_ELEMENT_FIELD_DESC);
      oprot.writeBool(struct.BoolDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEGER_DATA_ELEMENT_FIELD_DESC);
      oprot.writeI32(struct.IntegerDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_DATA_ELEMENT_FIELD_DESC);
      oprot.writeI16(struct.ByteDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DECIMAL_DATA_ELEMENT_FIELD_DESC);
      oprot.writeDouble(struct.DecimalDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_INTEGER_DATA_ELEMENT_FIELD_DESC);
      oprot.writeI64(struct.BigIntegerDataElement);
      oprot.writeFieldEnd();
      if (struct.StringDataElement != null) {
        oprot.writeFieldBegin(STRING_DATA_ELEMENT_FIELD_DESC);
        struct.StringDataElement.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLOAT_DATA_ELEMENT_FIELD_DESC);
      oprot.writeDouble(struct.FloatDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_DATA_ELEMENT_FIELD_DESC);
      oprot.writeDouble(struct.DoubleDataElement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LDOUBLE_DATA_ELEMENT_FIELD_DESC);
      oprot.writeDouble(struct.LdoubleDataElement);
      oprot.writeFieldEnd();
      if (struct.JsonDataElement != null) {
        oprot.writeFieldBegin(JSON_DATA_ELEMENT_FIELD_DESC);
        struct.JsonDataElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.Type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.time_stamp != null) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeString(struct.time_stamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataElementStructTupleSchemeFactory implements SchemeFactory {
    public DataElementStructTupleScheme getScheme() {
      return new DataElementStructTupleScheme();
    }
  }

  private static class DataElementStructTupleScheme extends TupleScheme<DataElementStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataElementStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolDataElement()) {
        optionals.set(0);
      }
      if (struct.isSetIntegerDataElement()) {
        optionals.set(1);
      }
      if (struct.isSetByteDataElement()) {
        optionals.set(2);
      }
      if (struct.isSetDecimalDataElement()) {
        optionals.set(3);
      }
      if (struct.isSetBigIntegerDataElement()) {
        optionals.set(4);
      }
      if (struct.isSetStringDataElement()) {
        optionals.set(5);
      }
      if (struct.isSetFloatDataElement()) {
        optionals.set(6);
      }
      if (struct.isSetDoubleDataElement()) {
        optionals.set(7);
      }
      if (struct.isSetLdoubleDataElement()) {
        optionals.set(8);
      }
      if (struct.isSetJsonDataElement()) {
        optionals.set(9);
      }
      if (struct.isSetType()) {
        optionals.set(10);
      }
      if (struct.isSetTime_stamp()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetBoolDataElement()) {
        oprot.writeBool(struct.BoolDataElement);
      }
      if (struct.isSetIntegerDataElement()) {
        oprot.writeI32(struct.IntegerDataElement);
      }
      if (struct.isSetByteDataElement()) {
        oprot.writeI16(struct.ByteDataElement);
      }
      if (struct.isSetDecimalDataElement()) {
        oprot.writeDouble(struct.DecimalDataElement);
      }
      if (struct.isSetBigIntegerDataElement()) {
        oprot.writeI64(struct.BigIntegerDataElement);
      }
      if (struct.isSetStringDataElement()) {
        struct.StringDataElement.write(oprot);
      }
      if (struct.isSetFloatDataElement()) {
        oprot.writeDouble(struct.FloatDataElement);
      }
      if (struct.isSetDoubleDataElement()) {
        oprot.writeDouble(struct.DoubleDataElement);
      }
      if (struct.isSetLdoubleDataElement()) {
        oprot.writeDouble(struct.LdoubleDataElement);
      }
      if (struct.isSetJsonDataElement()) {
        struct.JsonDataElement.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.Type.getValue());
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeString(struct.time_stamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataElementStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.BoolDataElement = iprot.readBool();
        struct.setBoolDataElementIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IntegerDataElement = iprot.readI32();
        struct.setIntegerDataElementIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ByteDataElement = iprot.readI16();
        struct.setByteDataElementIsSet(true);
      }
      if (incoming.get(3)) {
        struct.DecimalDataElement = iprot.readDouble();
        struct.setDecimalDataElementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.BigIntegerDataElement = iprot.readI64();
        struct.setBigIntegerDataElementIsSet(true);
      }
      if (incoming.get(5)) {
        struct.StringDataElement = new StringArrayType();
        struct.StringDataElement.read(iprot);
        struct.setStringDataElementIsSet(true);
      }
      if (incoming.get(6)) {
        struct.FloatDataElement = iprot.readDouble();
        struct.setFloatDataElementIsSet(true);
      }
      if (incoming.get(7)) {
        struct.DoubleDataElement = iprot.readDouble();
        struct.setDoubleDataElementIsSet(true);
      }
      if (incoming.get(8)) {
        struct.LdoubleDataElement = iprot.readDouble();
        struct.setLdoubleDataElementIsSet(true);
      }
      if (incoming.get(9)) {
        struct.JsonDataElement = new StringArrayType();
        struct.JsonDataElement.read(iprot);
        struct.setJsonDataElementIsSet(true);
      }
      if (incoming.get(10)) {
        struct.Type = DataElementType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.time_stamp = iprot.readString();
        struct.setTime_stampIsSet(true);
      }
    }
  }

}

